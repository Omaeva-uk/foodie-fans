{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, authService, performerService } from '@services/index';\nimport { message } from 'antd';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, updatePassword, updatePasswordSuccess, updatePasswordFail, updatePerformer } from './actions';\nvar userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(setUpdating(true));\n\n          case 3:\n            _context.next = 5;\n            return userService.updateMe(data.payload);\n\n          case 5:\n            updated = _context.sent;\n            _context.next = 8;\n            return put(updateUserSuccess(updated.data));\n\n          case 8:\n            message.success('Changes saved');\n            _context.next = 19;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 15;\n            return Promise.resolve(_context.t0);\n\n          case 15:\n            error = _context.sent;\n            message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n            _context.next = 19;\n            return put(updateUserFail(error));\n\n          case 19:\n            _context.prev = 19;\n            _context.next = 22;\n            return put(setUpdating(false));\n\n          case 22:\n            return _context.finish(19);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 11, 19, 23]]);\n  })\n}, {\n  on: updatePerformer,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated, error;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return put(setUpdating(true));\n\n          case 3:\n            _context2.next = 5;\n            return performerService.updateMe(data.payload._id, data.payload);\n\n          case 5:\n            updated = _context2.sent;\n            _context2.next = 8;\n            return put(updateUserSuccess(updated.data));\n\n          case 8:\n            message.success('Changes saved');\n            _context2.next = 19;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 15;\n            return Promise.resolve(_context2.t0);\n\n          case 15:\n            error = _context2.sent;\n            message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n            _context2.next = 19;\n            return put(updateUserFail(error));\n\n          case 19:\n            _context2.prev = 19;\n            _context2.next = 22;\n            return put(setUpdating(false));\n\n          case 22:\n            return _context2.finish(19);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 11, 19, 23]]);\n  })\n}, {\n  on: updatePassword,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated, error;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return put(setUpdating(true));\n\n          case 3:\n            _context3.next = 5;\n            return authService.updatePassword(data.payload);\n\n          case 5:\n            updated = _context3.sent;\n            _context3.next = 8;\n            return put(updatePasswordSuccess(updated.data));\n\n          case 8:\n            message.success('Changes saved');\n            _context3.next = 19;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 15;\n            return Promise.resolve(_context3.t0);\n\n          case 15:\n            error = _context3.sent;\n            message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n            _context3.next = 19;\n            return put(updatePasswordFail(error));\n\n          case 19:\n            _context3.prev = 19;\n            _context3.next = 22;\n            return put(setUpdating(false));\n\n          case 22:\n            return _context3.finish(19);\n\n          case 23:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 11, 19, 23]]);\n  })\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/user/sagas.ts"],"names":["flatten","put","createSagas","userService","authService","performerService","message","updateUser","updateUserSuccess","updateUserFail","setUpdating","updatePassword","updatePasswordSuccess","updatePasswordFail","updatePerformer","userSagas","on","worker","data","updateMe","payload","updated","success","Promise","resolve","error","_id"],"mappings":"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","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, authService, performerService } from '@services/index';\nimport { IReduxAction } from 'src/interfaces';\nimport { message } from 'antd';\nimport {\n  updateUser,\n  updateUserSuccess,\n  updateUserFail,\n  setUpdating,\n  updatePassword,\n  updatePasswordSuccess,\n  updatePasswordFail,\n  updatePerformer\n} from './actions';\n\nconst userSagas = [\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\n  {\n    on: updateUser,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield userService.updateMe(data.payload);\n        yield put(updateUserSuccess(updated.data));\n        message.success('Changes saved');\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Error occured, please try again later');\n        yield put(updateUserFail(error));\n      } finally {\n        yield put(setUpdating(false));\n      }\n    }\n  },\n  {\n    on: updatePerformer,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield performerService.updateMe(data.payload._id, data.payload);\n        yield put(updateUserSuccess(updated.data));\n        message.success('Changes saved');\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Error occured, please try again later');\n        yield put(updateUserFail(error));\n      } finally {\n        yield put(setUpdating(false));\n      }\n    }\n  },\n  {\n    on: updatePassword,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield authService.updatePassword(data.payload);\n        yield put(updatePasswordSuccess(updated.data));\n        message.success('Changes saved');\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Error occured, please try again later');\n        yield put(updatePasswordFail(error));\n      } finally {\n        yield put(setUpdating(false));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(userSagas)]);\n"]},"metadata":{},"sourceType":"module"}