{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent, createRef } from 'react';\nimport { Form, Input, Button, message, Popover } from 'antd';\nimport { SendOutlined, SmileOutlined } from '@ant-design/icons';\nimport { Emotions } from '@components/messages/emotions';\nimport Router from 'next/router';\nimport './comment.less';\nvar TextArea = Input.TextArea;\nexport var CommentForm = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CommentForm, _PureComponent);\n\n  var _super = _createSuper(CommentForm);\n\n  function CommentForm() {\n    var _this;\n\n    _classCallCheck(this, CommentForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"formRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      text: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(CommentForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.formRef) this.formRef = /*#__PURE__*/createRef();\n    }\n  }, {\n    key: \"onFinish\",\n    value: function onFinish(values) {\n      var _this$props = this.props,\n          handleComment = _this$props.onSubmit,\n          objectId = _this$props.objectId,\n          objectType = _this$props.objectType,\n          creator = _this$props.creator;\n      var data = values;\n\n      if (!creator || !creator._id) {\n        message.error('Please login!');\n        return Router.push('/');\n      }\n\n      if (!data.content) {\n        return message.error('Please add a comment!');\n      }\n\n      if (data.content.length > 150) {\n        return message.error('Comment is over 150 characters');\n      }\n\n      data.objectId = objectId;\n      data.objectType = objectType || 'video';\n      this.formRef.resetFields();\n      return handleComment(data);\n    }\n  }, {\n    key: \"onEmojiClick\",\n    value: function () {\n      var _onEmojiClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(emoji) {\n        var creator, text, instance;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                creator = this.props.creator;\n\n                if (!(!creator || !creator._id)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                text = this.state.text;\n                instance = this.formRef;\n                instance.setFieldsValue({\n                  content: \"\".concat(instance.getFieldValue('content'), \" \").concat(emoji, \" \")\n                });\n                this.setState({\n                  text: \"\".concat(text, \" \").concat(emoji, \" \")\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onEmojiClick(_x) {\n        return _onEmojiClick.apply(this, arguments);\n      }\n\n      return onEmojiClick;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          creator = _this$props2.creator,\n          requesting = _this$props2.requesting,\n          isReply = _this$props2.isReply,\n          siteName = _this$props2.siteName,\n          objectId = _this$props2.objectId;\n      if (!this.formRef) this.formRef = /*#__PURE__*/createRef();\n      return __jsx(Form, {\n        ref: function ref(_ref) {\n          _this2.formRef = _ref;\n        },\n        name: \"comment-form\",\n        onFinish: this.onFinish.bind(this),\n        initialValues: {\n          content: ''\n        }\n      }, __jsx(\"div\", {\n        className: \"comment-form\"\n      }, __jsx(\"div\", {\n        className: \"cmt-area\"\n      }, __jsx(Form.Item, {\n        name: \"content\"\n      }, __jsx(TextArea, {\n        disabled: !creator || !creator._id,\n        maxLength: 150,\n        showCount: true,\n        minLength: 1,\n        rows: !isReply ? 2 : 1,\n        placeholder: !isReply ? 'Add a comment here' : 'Add a reply here'\n      })), __jsx(Popover, {\n        key: objectId,\n        className: \"emotion-popover\",\n        content: __jsx(Emotions, {\n          onEmojiClick: this.onEmojiClick.bind(this),\n          siteName: siteName\n        }),\n        title: null,\n        trigger: \"click\"\n      }, __jsx(\"div\", {\n        className: \"grp-emotions\"\n      }, __jsx(SmileOutlined, null)))), __jsx(Button, {\n        className: !isReply ? 'submit-btn' : '',\n        htmlType: \"submit\",\n        disabled: requesting\n      }, !isReply ? __jsx(SendOutlined, null) : 'Reply')));\n    }\n  }]);\n\n  return CommentForm;\n}(PureComponent);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/comment/comment-form.tsx"],"names":["PureComponent","createRef","Form","Input","Button","message","Popover","SendOutlined","SmileOutlined","Emotions","Router","TextArea","CommentForm","text","formRef","values","props","handleComment","onSubmit","objectId","objectType","creator","data","_id","error","push","content","length","resetFields","emoji","state","instance","setFieldsValue","getFieldValue","setState","requesting","isReply","siteName","ref","onFinish","bind","onEmojiClick"],"mappings":"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","sourcesContent":["import { PureComponent, createRef } from 'react';\nimport {\n  Form, Input, Button, message, Popover\n} from 'antd';\nimport {\n  SendOutlined, SmileOutlined\n} from '@ant-design/icons';\nimport { IUser } from 'src/interfaces';\nimport { Emotions } from '@components/messages/emotions';\nimport { FormInstance } from 'antd/lib/form';\nimport { ICreateComment } from 'src/interfaces/comment';\nimport Router from 'next/router';\nimport './comment.less';\n\ninterface IProps {\n  objectId: string;\n  objectType?: string;\n  onSubmit: Function;\n  creator: IUser;\n  requesting: boolean;\n  isReply?: boolean;\n  siteName?: string;\n}\n\nconst { TextArea } = Input;\n\nexport class CommentForm extends PureComponent<IProps> {\n  formRef: any;\n\n  state = {\n    text: ''\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = createRef();\n  }\n\n  onFinish(values: ICreateComment) {\n    const {\n      onSubmit: handleComment, objectId, objectType, creator\n    } = this.props;\n    const data = values;\n    if (!creator || !creator._id) {\n      message.error('Please login!');\n      return Router.push('/');\n    }\n    if (!data.content) {\n      return message.error('Please add a comment!');\n    }\n    if (data.content.length > 150) {\n      return message.error('Comment is over 150 characters');\n    }\n    data.objectId = objectId;\n    data.objectType = objectType || 'video';\n    this.formRef.resetFields();\n    return handleComment(data);\n  }\n\n  async onEmojiClick(emoji) {\n    const { creator } = this.props;\n    if (!creator || !creator._id) return;\n    const { text } = this.state;\n    const instance = this.formRef as FormInstance;\n    instance.setFieldsValue({\n      content: `${instance.getFieldValue('content')} ${emoji} `\n    });\n    this.setState({ text: `${text} ${emoji} ` });\n  }\n\n  render() {\n    const {\n      creator, requesting, isReply, siteName, objectId\n    } = this.props;\n    if (!this.formRef) this.formRef = createRef();\n    return (\n      <Form\n        ref={(ref) => { this.formRef = ref; }}\n        name=\"comment-form\"\n        onFinish={this.onFinish.bind(this)}\n        initialValues={{\n          content: ''\n        }}\n      >\n        <div className=\"comment-form\">\n          <div className=\"cmt-area\">\n            <Form.Item\n              name=\"content\"\n            >\n              <TextArea disabled={!creator || !creator._id} maxLength={150} showCount minLength={1} rows={!isReply ? 2 : 1} placeholder={!isReply ? 'Add a comment here' : 'Add a reply here'} />\n            </Form.Item>\n            <Popover key={objectId} className=\"emotion-popover\" content={<Emotions onEmojiClick={this.onEmojiClick.bind(this)} siteName={siteName} />} title={null} trigger=\"click\">\n              <div className=\"grp-emotions\">\n                <SmileOutlined />\n              </div>\n            </Popover>\n          </div>\n          <Button className={!isReply ? 'submit-btn' : ''} htmlType=\"submit\" disabled={requesting}>\n            {!isReply ? <SendOutlined /> : 'Reply'}\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}