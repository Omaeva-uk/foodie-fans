{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getConversations, getConversationsSuccess, getConversationsFail, setActiveConversation, setActiveConversationSuccess, loadMessages, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageFail, sendMessageSuccess, getConversationDetail, getConversationDetailSuccess, readMessages, loadMoreMessages, loadMoreMessagesSuccess, searchConversations, searchConversationsFail, searchConversationsSuccess } from './actions';\nvar conversationSagas = [{\n  on: getConversations,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return messageService.getConversations(data.payload);\n\n          case 3:\n            resp = _context.sent;\n            _context.next = 6;\n            return put(getConversationsSuccess(resp.data));\n\n          case 6:\n            _context.next = 15;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 12;\n            return Promise.resolve(_context.t0);\n\n          case 12:\n            error = _context.sent;\n            _context.next = 15;\n            return put(getConversationsFail(error));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: searchConversations,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return messageService.getConversations(data.payload);\n\n          case 3:\n            resp = _context2.sent;\n            _context2.next = 6;\n            return put(searchConversationsSuccess(resp.data));\n\n          case 6:\n            _context2.next = 15;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 12;\n            return Promise.resolve(_context2.t0);\n\n          case 12:\n            error = _context2.sent;\n            _context2.next = 15;\n            return put(searchConversationsFail(error));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: setActiveConversation,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _data$payload, source, sourceId, conversationId, conversationMapping, readAllMessages, resp, conversation;\n\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _data$payload = data.payload, source = _data$payload.source, sourceId = _data$payload.sourceId, conversationId = _data$payload.conversationId;\n            _context3.next = 4;\n            return select(function (state) {\n              return state.conversation.mapping;\n            });\n\n          case 4:\n            conversationMapping = _context3.sent;\n\n            if (!conversationId) {\n              _context3.next = 19;\n              break;\n            }\n\n            if (!conversationMapping[conversationId]) {\n              _context3.next = 17;\n              break;\n            }\n\n            _context3.next = 9;\n            return put(setActiveConversationSuccess(conversationMapping[conversationId]));\n\n          case 9:\n            _context3.next = 11;\n            return messageService.readAllInConversation(conversationId);\n\n          case 11:\n            readAllMessages = _context3.sent;\n\n            if (!readAllMessages) {\n              _context3.next = 15;\n              break;\n            }\n\n            _context3.next = 15;\n            return put(readMessages(conversationId));\n\n          case 15:\n            _context3.next = 17;\n            return put(loadMessages({\n              conversationId: conversationId,\n              limit: 25,\n              offset: 0\n            }));\n\n          case 17:\n            _context3.next = 32;\n            break;\n\n          case 19:\n            _context3.next = 21;\n            return messageService.createConversation({\n              source: source,\n              sourceId: sourceId\n            });\n\n          case 21:\n            resp = _context3.sent;\n            conversation = resp.data;\n\n            if (!conversationMapping[conversation._id]) {\n              _context3.next = 28;\n              break;\n            }\n\n            _context3.next = 26;\n            return put(setActiveConversationSuccess(conversationMapping[conversation._id]));\n\n          case 26:\n            _context3.next = 30;\n            break;\n\n          case 28:\n            _context3.next = 30;\n            return put(setActiveConversationSuccess(conversation));\n\n          case 30:\n            _context3.next = 32;\n            return put(loadMessages({\n              conversationId: conversation._id,\n              limit: 25,\n              offset: 0\n            }));\n\n          case 32:\n            _context3.next = 37;\n            break;\n\n          case 34:\n            _context3.prev = 34;\n            _context3.t0 = _context3[\"catch\"](0);\n            message.error('Error occured, please try again later');\n\n          case 37:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 34]]);\n  })\n}, {\n  on: getConversationDetail,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var conversation;\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return messageService.getConversationDetail(data.payload.id);\n\n          case 3:\n            conversation = _context4.sent;\n            _context4.next = 6;\n            return put(getConversationDetailSuccess(conversation.data));\n\n          case 6:\n            _context4.next = 12;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 12;\n            return put(getConversationsFail(_context4.t0));\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}];\nvar messageSagas = [{\n  on: loadMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var messageMap, _data$payload2, conversationId, offset, limit, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            messageMap = select(function (state) {\n              return state.message.mapping;\n            });\n            _data$payload2 = data.payload, conversationId = _data$payload2.conversationId, offset = _data$payload2.offset, limit = _data$payload2.limit;\n\n            if (!(messageMap[conversationId] && messageMap[conversationId].fetching)) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 5:\n            _context5.next = 7;\n            return put(fetchingMessage({\n              conversationId: conversationId\n            }));\n\n          case 7:\n            _context5.next = 9;\n            return messageService.getMessages(conversationId, {\n              offset: offset,\n              limit: limit\n            });\n\n          case 9:\n            resp = _context5.sent;\n            _context5.next = 12;\n            return put(loadMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 12:\n            _context5.next = 17;\n            break;\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](0);\n            message.error('Error occured, please try again later');\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 14]]);\n  })\n}, {\n  on: loadMoreMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var messageMap, _data$payload3, conversationId, offset, limit, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            messageMap = select(function (state) {\n              return state.message.mapping;\n            });\n            _data$payload3 = data.payload, conversationId = _data$payload3.conversationId, offset = _data$payload3.offset, limit = _data$payload3.limit;\n\n            if (!(messageMap[conversationId] && messageMap[conversationId].fetching)) {\n              _context6.next = 5;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 5:\n            _context6.next = 7;\n            return put(fetchingMessage({\n              conversationId: conversationId\n            }));\n\n          case 7:\n            _context6.next = 9;\n            return messageService.getMessages(conversationId, {\n              offset: offset,\n              limit: limit\n            });\n\n          case 9:\n            resp = _context6.sent;\n            _context6.next = 12;\n            return put(loadMoreMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 12:\n            _context6.next = 17;\n            break;\n\n          case 14:\n            _context6.prev = 14;\n            _context6.t0 = _context6[\"catch\"](0);\n            message.error('Error occured, please try again later'); // console.log('err', e);\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, worker, null, [[0, 14]]);\n  })\n}, {\n  on: sendMessage,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(req) {\n    var _req$payload, conversationId, data, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _req$payload = req.payload, conversationId = _req$payload.conversationId, data = _req$payload.data;\n            _context7.next = 4;\n            return messageService.sendMessage(conversationId, data);\n\n          case 4:\n            resp = _context7.sent;\n            _context7.next = 7;\n            return put(sendMessageSuccess(resp.data));\n\n          case 7:\n            _context7.next = 13;\n            break;\n\n          case 9:\n            _context7.prev = 9;\n            _context7.t0 = _context7[\"catch\"](0);\n            _context7.next = 13;\n            return put(sendMessageFail(_context7.t0));\n\n          case 13:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, worker, null, [[0, 9]]);\n  })\n}];\nexport default flatten([createSagas(conversationSagas), createSagas(messageSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/message/sagas.ts"],"names":["flatten","put","select","createSagas","messageService","message","getConversations","getConversationsSuccess","getConversationsFail","setActiveConversation","setActiveConversationSuccess","loadMessages","fetchingMessage","loadMessagesSuccess","sendMessage","sendMessageFail","sendMessageSuccess","getConversationDetail","getConversationDetailSuccess","readMessages","loadMoreMessages","loadMoreMessagesSuccess","searchConversations","searchConversationsFail","searchConversationsSuccess","conversationSagas","on","worker","data","payload","resp","Promise","resolve","error","source","sourceId","conversationId","state","conversation","mapping","conversationMapping","readAllInConversation","readAllMessages","limit","offset","createConversation","_id","id","messageSagas","messageMap","fetching","getMessages","items","total","req"],"mappings":"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","sourcesContent":["import { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { IReduxAction } from 'src/interfaces';\nimport { message } from 'antd';\nimport {\n  getConversations,\n  getConversationsSuccess,\n  getConversationsFail,\n  setActiveConversation,\n  setActiveConversationSuccess,\n  loadMessages,\n  fetchingMessage,\n  loadMessagesSuccess,\n  sendMessage,\n  sendMessageFail,\n  sendMessageSuccess,\n  getConversationDetail,\n  getConversationDetailSuccess,\n  readMessages,\n  loadMoreMessages,\n  loadMoreMessagesSuccess,\n  searchConversations,\n  searchConversationsFail,\n  searchConversationsSuccess\n} from './actions';\n\nconst conversationSagas = [\n  {\n    on: getConversations,\n    * worker(data: IReduxAction<Record<string, string>>) {\n      try {\n        const resp = yield messageService.getConversations(data.payload);\n        yield put(getConversationsSuccess(resp.data));\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        yield put(getConversationsFail(error));\n      }\n    }\n  },\n  {\n    on: searchConversations,\n    * worker(data: IReduxAction<Record<string, string>>) {\n      try {\n        const resp = yield messageService.getConversations(data.payload);\n        yield put(searchConversationsSuccess(resp.data));\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        yield put(searchConversationsFail(error));\n      }\n    }\n  },\n  {\n    on: setActiveConversation,\n    * worker(data: IReduxAction<Record<string, string>>) {\n      try {\n        const {\n          source, sourceId, conversationId\n        } = data.payload;\n        const conversationMapping = yield select((state) => state.conversation.mapping);\n        if (conversationId) {\n          if (conversationMapping[conversationId]) {\n            yield put(\n              setActiveConversationSuccess(conversationMapping[conversationId])\n            );\n\n            const readAllMessages = yield messageService.readAllInConversation(conversationId);\n            if (readAllMessages) {\n              yield put(readMessages(conversationId));\n            }\n            yield put(loadMessages({ conversationId, limit: 25, offset: 0 }));\n          }\n        } else {\n          const resp = yield messageService.createConversation({\n            source,\n            sourceId\n          });\n          const conversation = resp.data;\n          if (conversationMapping[conversation._id]) {\n            yield put(setActiveConversationSuccess(conversationMapping[conversation._id]));\n          } else {\n            yield put(setActiveConversationSuccess(conversation));\n          }\n          yield put(loadMessages({ conversationId: conversation._id, limit: 25, offset: 0 }));\n        }\n      } catch (e) {\n        message.error('Error occured, please try again later');\n      }\n    }\n  },\n  {\n    on: getConversationDetail,\n    * worker(data: IReduxAction<Record<string, string>>) {\n      try {\n        const conversation = yield messageService.getConversationDetail(data.payload.id);\n        yield put(getConversationDetailSuccess(conversation.data));\n      } catch (e) {\n        yield put(getConversationsFail(e));\n      }\n    }\n  }\n];\n\nconst messageSagas = [\n  {\n    on: loadMessages,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const messageMap = select((state) => state.message.mapping);\n        const { conversationId, offset, limit } = data.payload;\n        if (messageMap[conversationId] && messageMap[conversationId].fetching) {\n          // do nothing if it is fetching\n          return;\n        }\n        yield put(fetchingMessage({ conversationId }));\n        const resp = yield messageService.getMessages(conversationId, { offset, limit });\n        yield put(\n          loadMessagesSuccess({\n            conversationId,\n            items: resp.data.data,\n            total: resp.data.total\n          })\n        );\n      } catch (e) {\n        message.error('Error occured, please try again later');\n      }\n    }\n  },\n  {\n    on: loadMoreMessages,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const messageMap = select((state) => state.message.mapping);\n        const { conversationId, offset, limit } = data.payload;\n        if (messageMap[conversationId] && messageMap[conversationId].fetching) {\n          // do nothing if it is fetching\n          return;\n        }\n        yield put(fetchingMessage({ conversationId }));\n        const resp = yield messageService.getMessages(conversationId, { offset, limit });\n        yield put(\n          loadMoreMessagesSuccess({\n            conversationId,\n            items: resp.data.data,\n            total: resp.data.total\n          })\n        );\n      } catch (e) {\n        message.error('Error occured, please try again later');\n        // console.log('err', e);\n      }\n    }\n  },\n  {\n    on: sendMessage,\n    * worker(req: IReduxAction<any>) {\n      try {\n        const { conversationId, data } = req.payload;\n        const resp = yield messageService.sendMessage(conversationId, data);\n        yield put(sendMessageSuccess(resp.data));\n      } catch (e) {\n        yield put(sendMessageFail(e));\n      }\n    }\n  }\n];\n\nexport default flatten([\n  createSagas(conversationSagas),\n  createSagas(messageSagas)\n]);\n"]},"metadata":{},"sourceType":"module"}