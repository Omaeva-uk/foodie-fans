{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport { Avatar, message, Modal, Spin, Button } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { paymentService } from '@services/payment.service';\nimport { hideSubscribePerformerModal } from '@redux/subscription/actions';\nimport { CheckSquareOutlined } from '@ant-design/icons';\nimport { TickIcon } from 'src/icons';\nexport var SubscribePerformerModal = function SubscribePerformerModal(_ref) {\n  _s();\n\n  var onSubscribed = _ref.onSubscribed;\n\n  var _useState = useState(),\n      performer = _useState[0],\n      setPerformer = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      submiting = _useState3[0],\n      setSubmiting = _useState3[1];\n\n  var currentUser = useSelector(function (state) {\n    return state.user.current;\n  });\n  var settings = useSelector(function (state) {\n    return state.settings;\n  });\n  var subscription = useSelector(function (state) {\n    return state.subscription;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    var fetctPerformer = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var resp, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                setLoading(true);\n                _context.next = 4;\n                return performerService.findOne(subscription.subscribingPerformerId);\n\n              case 4:\n                resp = _context.sent;\n                setPerformer(resp.data);\n                _context.next = 14;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                _context.next = 12;\n                return Promise.resolve(_context.t0);\n\n              case 12:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 14:\n                _context.prev = 14;\n                setLoading(false);\n                return _context.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8, 14, 17]]);\n      }));\n\n      return function fetctPerformer() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    subscription.subscribingPerformerId && fetctPerformer();\n  }, [subscription.subscribingPerformerId]);\n\n  var subscribe = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subscriptionType) {\n      var resp, _resp$data, err;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (currentUser._id) {\n                _context2.next = 4;\n                break;\n              }\n\n              message.error('Please log in!');\n              Router.push('/');\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              if (!(settings.paymentGateway === 'stripe' && !currentUser.stripeCardIds.length)) {\n                _context2.next = 8;\n                break;\n              }\n\n              message.error('Please add a payment card');\n              Router.push('/user/cards');\n              return _context2.abrupt(\"return\");\n\n            case 8:\n              _context2.prev = 8;\n              setSubmiting(true);\n              _context2.next = 12;\n              return paymentService.subscribePerformer({\n                type: subscriptionType,\n                performerId: performer._id,\n                paymentGateway: settings.paymentGateway\n              });\n\n            case 12:\n              resp = _context2.sent;\n\n              if (settings.paymentGateway === 'ccbill') {\n                window.location.href = resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.paymentUrl;\n              } else {\n                setSubmiting(false);\n                dispatch(hideSubscribePerformerModal());\n                onSubscribed && onSubscribed((performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id));\n              }\n\n              _context2.next = 22;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](8);\n              _context2.next = 20;\n              return _context2.t0;\n\n            case 20:\n              err = _context2.sent;\n              message.error(err.message || 'error occured, please try again later');\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[8, 16]]);\n    }));\n\n    return function subscribe(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var onCancel = function onCancel() {\n    dispatch(hideSubscribePerformerModal());\n  };\n\n  return __jsx(Modal, {\n    visible: subscription.showModal,\n    destroyOnClose: true,\n    centered: true,\n    width: 770,\n    footer: null,\n    onCancel: onCancel\n  }, loading && __jsx(\"div\", {\n    style: {\n      margin: 30,\n      textAlign: 'center'\n    }\n  }, __jsx(Spin, null)), __jsx(\"div\", {\n    className: \"confirm-purchase-form\"\n  }, __jsx(\"div\", {\n    className: \"left-col\"\n  }, __jsx(Avatar, {\n    src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'\n  }), __jsx(\"div\", {\n    className: \"p-name\"\n  }, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', ' ', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(TickIcon, {\n    className: \"primary-color\"\n  })), __jsx(\"div\", {\n    className: \"p-username\"\n  }, \"@\", (performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a'), __jsx(\"img\", {\n    className: \"lock-icon\",\n    src: \"/static/lock-icon.png\",\n    alt: \"lock\"\n  })), __jsx(\"div\", {\n    className: \"right-col\"\n  }, __jsx(\"h2\", null, \"Subscribe\", ' ', __jsx(\"span\", {\n    className: \"username\"\n  }, \"@\".concat(performer === null || performer === void 0 ? void 0 : performer.username) || 'the model')), __jsx(\"h3\", null, __jsx(\"span\", {\n    className: \"price\"\n  }, ((performer === null || performer === void 0 ? void 0 : performer.monthlyPrice) || 0).toFixed(2)), ' ', \"USD/month\"), __jsx(\"ul\", {\n    className: \"check-list\"\n  }, __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Full access to this model's exclusive content\"), __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Direct message with this model\"), __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Requested personalised Pay Per View content\"), __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Cancel your subscription at any time\")), __jsx(Button, {\n    className: \"primary\",\n    disabled: submiting,\n    loading: submiting,\n    onClick: function onClick() {\n      return subscribe('monthly');\n    }\n  }, \"SUBSCRIBE\"), __jsx(\"p\", {\n    className: \"sub-text\"\n  }, \"Clicking \\\"Subscribe\\\" will take you to the payment screen to finalize you subscription\"))));\n};\n\n_s(SubscribePerformerModal, \"N4Jnz7dAbMbL0Bo5+VVWs66dgT4=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = SubscribePerformerModal;\nSubscribePerformerModal.defaultProps = {\n  onSubscribed: null\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SubscribePerformerModal\");","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/subscription/subscribe-performer-modal.tsx"],"names":["getResponseError","performerService","Avatar","message","Modal","Spin","Button","React","useEffect","useState","useDispatch","useSelector","Router","paymentService","hideSubscribePerformerModal","CheckSquareOutlined","TickIcon","SubscribePerformerModal","onSubscribed","performer","setPerformer","loading","setLoading","submiting","setSubmiting","currentUser","state","user","current","settings","subscription","dispatch","fetctPerformer","findOne","subscribingPerformerId","resp","data","Promise","resolve","error","subscribe","subscriptionType","_id","push","paymentGateway","stripeCardIds","length","subscribePerformer","type","performerId","window","location","href","paymentUrl","username","err","onCancel","showModal","margin","textAlign","avatar","name","verifiedAccount","monthlyPrice","toFixed","defaultProps"],"mappings":"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","sourcesContent":["import { IPerformer } from '@interfaces/performer';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport {\n  Avatar, message, Modal, Spin, Button\n} from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { paymentService } from '@services/payment.service';\nimport { hideSubscribePerformerModal } from '@redux/subscription/actions';\nimport { CheckSquareOutlined } from '@ant-design/icons';\nimport { TickIcon } from 'src/icons';\n\ntype Props = {\n  onSubscribed?: Function;\n}\n\nexport const SubscribePerformerModal: React.FC<Props> = ({ onSubscribed }: Props) => {\n  const [performer, setPerformer] = useState<IPerformer>();\n  const [loading, setLoading] = useState(false);\n  const [submiting, setSubmiting] = useState<boolean>();\n  const currentUser = useSelector((state: any) => state.user.current);\n  const settings = useSelector((state: any) => state.settings);\n  const subscription = useSelector((state: any) => state.subscription);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetctPerformer = async () => {\n      try {\n        setLoading(true);\n        const resp = await performerService.findOne(\n          subscription.subscribingPerformerId\n        );\n        setPerformer(resp.data);\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    subscription.subscribingPerformerId && fetctPerformer();\n  }, [subscription.subscribingPerformerId]);\n\n  const subscribe = async (subscriptionType: string) => {\n    if (!currentUser._id) {\n      message.error('Please log in!');\n      Router.push('/');\n      return;\n    }\n    if (settings.paymentGateway === 'stripe' && !currentUser.stripeCardIds.length) {\n      message.error('Please add a payment card');\n      Router.push('/user/cards');\n      return;\n    }\n    try {\n      setSubmiting(true);\n      const resp = await paymentService.subscribePerformer({\n        type: subscriptionType,\n        performerId: performer._id,\n        paymentGateway: settings.paymentGateway\n      });\n      if (settings.paymentGateway === 'ccbill') {\n        window.location.href = resp?.data?.paymentUrl;\n      } else {\n        setSubmiting(false);\n        dispatch(hideSubscribePerformerModal());\n        onSubscribed && onSubscribed(performer?.username || performer?._id);\n      }\n    } catch (e) {\n      const err = await e;\n      message.error(err.message || 'error occured, please try again later');\n    }\n  };\n\n  const onCancel = () => {\n    dispatch(hideSubscribePerformerModal());\n  };\n\n  return (\n    <Modal\n      visible={subscription.showModal}\n      destroyOnClose\n      centered\n      width={770}\n      footer={null}\n      onCancel={onCancel}\n    >\n      {loading && <div style={{ margin: 30, textAlign: 'center' }}><Spin /></div>}\n      <div className=\"confirm-purchase-form\">\n        <div className=\"left-col\">\n          <Avatar src={performer?.avatar || '/static/no-avatar.png'} />\n          <div className=\"p-name\">\n            {performer?.name || 'N/A'}\n            {' '}\n            {performer?.verifiedAccount && <TickIcon className=\"primary-color\" />}\n          </div>\n          <div className=\"p-username\">\n            @\n            {performer?.username || 'n/a'}\n          </div>\n          <img className=\"lock-icon\" src=\"/static/lock-icon.png\" alt=\"lock\" />\n        </div>\n        <div className=\"right-col\">\n          <h2>\n            Subscribe\n            {' '}\n            <span className=\"username\">{`@${performer?.username}` || 'the model'}</span>\n          </h2>\n          <h3>\n            <span className=\"price\">{(performer?.monthlyPrice || 0).toFixed(2)}</span>\n            {' '}\n            USD/month\n          </h3>\n          <ul className=\"check-list\">\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Full access to this model&apos;s exclusive content\n            </li>\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Direct message with this model\n            </li>\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Requested personalised Pay Per View content\n            </li>\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Cancel your subscription at any time\n            </li>\n          </ul>\n          <Button\n            className=\"primary\"\n            disabled={submiting}\n            loading={submiting}\n            onClick={() => subscribe('monthly')}\n          >\n            SUBSCRIBE\n          </Button>\n          <p className=\"sub-text\">Clicking &quot;Subscribe&quot; will take you to the payment screen to finalize you subscription</p>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nSubscribePerformerModal.defaultProps = {\n  onSubscribed: null\n};\n"]},"metadata":{},"sourceType":"module"}