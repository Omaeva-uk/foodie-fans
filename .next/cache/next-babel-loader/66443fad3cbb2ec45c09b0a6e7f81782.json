{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { PureComponent } from 'react';\nimport { Carousel, Spin, Image } from 'antd';\nimport { VideoPlayer } from '@components/common/video-player';\nimport { AudioPlayer } from '@components/common/audio-player';\nimport './index.less';\nexport default class FeedSlider extends PureComponent {\n  render() {\n    const {\n      feed\n    } = this.props;\n    const images = feed.files && feed.files.filter(f => f.type === 'feed-photo');\n    const videos = feed.files && feed.files.filter(f => f.type === 'feed-video');\n    const audios = feed.files && feed.files.filter(f => f.type === 'feed-audio');\n    let processing = false;\n    videos && videos.forEach(f => {\n      if (f.status !== 'finished') {\n        processing = true;\n      }\n    });\n    audios && audios.forEach(f => {\n      if (f.status !== 'finished') {\n        processing = true;\n      }\n    });\n    return __jsx(\"div\", {\n      className: feed.type === 'audio' ? 'feed-slider custom' : 'feed-slider'\n    }, !processing && feed.files && feed.files.length && __jsx(React.Fragment, null, images && images.length > 0 && __jsx(Image.PreviewGroup, null, __jsx(Carousel, {\n      adaptiveHeight: true,\n      effect: \"fade\",\n      draggable: true,\n      swipe: true,\n      swipeToSlide: true,\n      arrows: true,\n      dots: false,\n      infinite: true\n    }, images.map(img => __jsx(Image, {\n      preview: {\n        maskClosable: false\n      },\n      key: img._id,\n      src: img.url,\n      fallback: \"/static/no-image.jpg\",\n      title: img.name,\n      width: \"100%\",\n      alt: \"img\"\n    })))), videos && videos.length > 0 && videos.map(vid => {\n      var _feed$thumbnail;\n\n      return __jsx(VideoPlayer, {\n        key: vid._id,\n        autoplay: false,\n        controls: true,\n        playsinline: true,\n        poster: feed === null || feed === void 0 ? void 0 : (_feed$thumbnail = feed.thumbnail) === null || _feed$thumbnail === void 0 ? void 0 : _feed$thumbnail.url,\n        fluid: true,\n        sources: [{\n          src: vid.url,\n          type: 'video/mp4'\n        }]\n      });\n    }), audios && audios.length > 0 && audios.map(audio => __jsx(AudioPlayer, {\n      key: audio._id,\n      source: audio === null || audio === void 0 ? void 0 : audio.url\n    }))), processing && __jsx(\"div\", {\n      className: \"proccessing\"\n    }, __jsx(Spin, null), __jsx(\"p\", null, \"Your media is currently proccessing\")));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/post/post-slider.tsx"],"names":["PureComponent","Carousel","Spin","Image","VideoPlayer","AudioPlayer","FeedSlider","render","feed","props","images","files","filter","f","type","videos","audios","processing","forEach","status","length","map","img","maskClosable","_id","url","name","vid","autoplay","controls","playsinline","poster","thumbnail","fluid","sources","src","audio"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport {\n  Carousel, Spin, Image\n} from 'antd';\nimport { VideoPlayer } from '@components/common/video-player';\nimport { AudioPlayer } from '@components/common/audio-player';\nimport { IFeed } from '@interfaces/feed';\nimport './index.less';\n\ninterface IProps {\n  feed: IFeed;\n}\n\nexport default class FeedSlider extends PureComponent<IProps> {\n  render() {\n    const { feed } = this.props;\n    const images = feed.files && feed.files.filter((f) => f.type === 'feed-photo');\n    const videos = feed.files && feed.files.filter((f) => f.type === 'feed-video');\n    const audios = feed.files && feed.files.filter((f) => f.type === 'feed-audio');\n    let processing = false;\n    videos && videos.forEach((f) => {\n      if (f.status !== 'finished') {\n        processing = true;\n      }\n    });\n    audios && audios.forEach((f) => {\n      if (f.status !== 'finished') {\n        processing = true;\n      }\n    });\n\n    return (\n      <div className={feed.type === 'audio' ? 'feed-slider custom' : 'feed-slider'}>\n        {!processing && feed.files && feed.files.length && (\n          <>\n            {images && images.length > 0 && (\n              <Image.PreviewGroup>\n                <Carousel\n                  adaptiveHeight\n                  effect=\"fade\"\n                  draggable\n                  swipe\n                  swipeToSlide\n                  arrows\n                  dots={false}\n                  infinite\n                >\n                  {images.map((img) => (\n                    <Image\n                      preview={{ maskClosable: false }}\n                      key={img._id}\n                      src={img.url}\n                      fallback=\"/static/no-image.jpg\"\n                      title={img.name}\n                      width=\"100%\"\n                      alt=\"img\"\n                    />\n                  ))}\n                </Carousel>\n              </Image.PreviewGroup>\n            )}\n            {videos && videos.length > 0 && videos.map((vid) => (\n              <VideoPlayer\n                key={vid._id}\n                {...{\n                  autoplay: false,\n                  controls: true,\n                  playsinline: true,\n                  poster: feed?.thumbnail?.url,\n                  fluid: true,\n                  sources: [\n                    {\n                      src: vid.url,\n                      type: 'video/mp4'\n                    }\n                  ]\n                }}\n              />\n            ))}\n            {audios && audios.length > 0 && audios.map((audio) => <AudioPlayer key={audio._id} source={audio?.url} />)}\n          </>\n        )}\n        {processing && (\n          <div className=\"proccessing\">\n            <Spin />\n            <p>Your media is currently proccessing</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}