{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, authService, performerService } from '@services/index';\nimport { message } from 'antd';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, updatePassword, updatePasswordSuccess, updatePasswordFail, updatePerformer } from './actions';\nconst userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield userService.updateMe(data.payload);\n      yield put(updateUserSuccess(updated.data));\n      message.success('Changes saved');\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updateUserFail(error));\n    } finally {\n      yield put(setUpdating(false));\n    }\n  }\n\n}, {\n  on: updatePerformer,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield performerService.updateMe(data.payload._id, data.payload);\n      yield put(updateUserSuccess(updated.data));\n      message.success('Changes saved');\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updateUserFail(error));\n    } finally {\n      yield put(setUpdating(false));\n    }\n  }\n\n}, {\n  on: updatePassword,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating(true));\n      const updated = yield authService.updatePassword(data.payload);\n      yield put(updatePasswordSuccess(updated.data));\n      message.success('Changes saved');\n    } catch (e) {\n      // TODO - alert error\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Error occured, please try again later');\n      yield put(updatePasswordFail(error));\n    } finally {\n      yield put(setUpdating(false));\n    }\n  }\n\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/user/sagas.ts"],"names":["flatten","put","createSagas","userService","authService","performerService","message","updateUser","updateUserSuccess","updateUserFail","setUpdating","updatePassword","updatePasswordSuccess","updatePasswordFail","updatePerformer","userSagas","on","worker","data","updated","updateMe","payload","success","e","error","Promise","resolve","_id"],"mappings":"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","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, authService, performerService } from '@services/index';\nimport { IReduxAction } from 'src/interfaces';\nimport { message } from 'antd';\nimport {\n  updateUser,\n  updateUserSuccess,\n  updateUserFail,\n  setUpdating,\n  updatePassword,\n  updatePasswordSuccess,\n  updatePasswordFail,\n  updatePerformer\n} from './actions';\n\nconst userSagas = [\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\n  {\n    on: updateUser,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield userService.updateMe(data.payload);\n        yield put(updateUserSuccess(updated.data));\n        message.success('Changes saved');\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Error occured, please try again later');\n        yield put(updateUserFail(error));\n      } finally {\n        yield put(setUpdating(false));\n      }\n    }\n  },\n  {\n    on: updatePerformer,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield performerService.updateMe(data.payload._id, data.payload);\n        yield put(updateUserSuccess(updated.data));\n        message.success('Changes saved');\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Error occured, please try again later');\n        yield put(updateUserFail(error));\n      } finally {\n        yield put(setUpdating(false));\n      }\n    }\n  },\n  {\n    on: updatePassword,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating(true));\n        const updated = yield authService.updatePassword(data.payload);\n        yield put(updatePasswordSuccess(updated.data));\n        message.success('Changes saved');\n      } catch (e) {\n        // TODO - alert error\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Error occured, please try again later');\n        yield put(updatePasswordFail(error));\n      } finally {\n        yield put(setUpdating(false));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(userSagas)]);\n"]},"metadata":{},"sourceType":"module"}