{"ast":null,"code":"import { APIRequest } from './api-request';\nexport class VideoService extends APIRequest {\n  search(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/videos/search', query));\n  }\n\n  userSearch(query) {\n    return this.get(this.buildUrl('/user/performer-assets/videos/search', query));\n  }\n\n  delete(id) {\n    return this.del(`/performer/performer-assets/videos/${id}`);\n  }\n\n  findById(id, headers) {\n    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);\n  }\n\n  findOne(id, headers) {\n    return this.get(`/user/performer-assets/videos/${id}`, headers);\n  }\n\n  update(id, files, payload, onProgress) {\n    return this.upload(`/performer/performer-assets/videos/edit/${id}`, files, {\n      onProgress,\n      customData: payload,\n      method: 'PUT'\n    });\n  }\n\n  deleteFile(id, type) {\n    return this.del(`/performer/performer-assets/videos/remove-file/${id}`, {\n      type\n    });\n  }\n\n  uploadVideo(files, payload, onProgress) {\n    return this.upload('/performer/performer-assets/videos/upload', files, {\n      onProgress,\n      customData: payload\n    });\n  }\n\n  getBookmarks(payload) {\n    return this.get(this.buildUrl('/reactions/videos/bookmark', payload));\n  }\n\n}\nexport const videoService = new VideoService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/video.service.ts"],"names":["APIRequest","VideoService","search","query","get","buildUrl","userSearch","delete","id","del","findById","headers","findOne","update","files","payload","onProgress","upload","customData","method","deleteFile","type","uploadVideo","getBookmarks","videoService"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,YAAN,SAA2BD,UAA3B,CAAsC;AAC3CE,EAAAA,MAAM,CAACC,KAAD,EAAiC;AACrC,WAAO,KAAKC,GAAL,CACL,KAAKC,QAAL,CAAc,2CAAd,EAA2DF,KAA3D,CADK,CAAP;AAGD;;AAEDG,EAAAA,UAAU,CAACH,KAAD,EAAiC;AACzC,WAAO,KAAKC,GAAL,CACL,KAAKC,QAAL,CAAc,sCAAd,EAAsDF,KAAtD,CADK,CAAP;AAGD;;AAEDI,EAAAA,MAAM,CAACC,EAAD,EAAa;AACjB,WAAO,KAAKC,GAAL,CAAU,sCAAqCD,EAAG,EAAlD,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACF,EAAD,EAAaG,OAAb,EAAkD;AACxD,WAAO,KAAKP,GAAL,CAAU,sCAAqCI,EAAG,OAAlD,EAA0DG,OAA1D,CAAP;AACD;;AAEDC,EAAAA,OAAO,CAACJ,EAAD,EAAaG,OAAb,EAAkD;AACvD,WAAO,KAAKP,GAAL,CAAU,iCAAgCI,EAAG,EAA7C,EAAgDG,OAAhD,CAAP;AACD;;AAEDE,EAAAA,MAAM,CAACL,EAAD,EAAaM,KAAb,EAAyDC,OAAzD,EAAuEC,UAAvE,EAA8F;AAClG,WAAO,KAAKC,MAAL,CAAa,2CAA0CT,EAAG,EAA1D,EAA6DM,KAA7D,EAAoE;AACzEE,MAAAA,UADyE;AAEzEE,MAAAA,UAAU,EAAEH,OAF6D;AAGzEI,MAAAA,MAAM,EAAE;AAHiE,KAApE,CAAP;AAKD;;AAEDC,EAAAA,UAAU,CAACZ,EAAD,EAAaa,IAAb,EAA2B;AACnC,WAAO,KAAKZ,GAAL,CAAU,kDAAiDD,EAAG,EAA9D,EAAiE;AAAEa,MAAAA;AAAF,KAAjE,CAAP;AACD;;AAEDC,EAAAA,WAAW,CACTR,KADS,EAETC,OAFS,EAGTC,UAHS,EAIT;AACA,WAAO,KAAKC,MAAL,CAAY,2CAAZ,EAAyDH,KAAzD,EAAgE;AACrEE,MAAAA,UADqE;AAErEE,MAAAA,UAAU,EAAEH;AAFyD,KAAhE,CAAP;AAID;;AAEDQ,EAAAA,YAAY,CAACR,OAAD,EAAU;AACpB,WAAO,KAAKX,GAAL,CAAS,KAAKC,QAAL,CAAc,4BAAd,EAA4CU,OAA5C,CAAT,CAAP;AACD;;AAlD0C;AAqD7C,OAAO,MAAMS,YAAY,GAAG,IAAIvB,YAAJ,EAArB","sourcesContent":["import { APIRequest } from './api-request';\n\nexport class VideoService extends APIRequest {\n  search(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/videos/search', query)\n    );\n  }\n\n  userSearch(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/user/performer-assets/videos/search', query)\n    );\n  }\n\n  delete(id: string) {\n    return this.del(`/performer/performer-assets/videos/${id}`);\n  }\n\n  findById(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);\n  }\n\n  findOne(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/user/performer-assets/videos/${id}`, headers);\n  }\n\n  update(id: string, files: [{ fieldname: string; file: File }], payload: any, onProgress?: Function) {\n    return this.upload(`/performer/performer-assets/videos/edit/${id}`, files, {\n      onProgress,\n      customData: payload,\n      method: 'PUT'\n    });\n  }\n\n  deleteFile(id: string, type: string) {\n    return this.del(`/performer/performer-assets/videos/remove-file/${id}`, { type });\n  }\n\n  uploadVideo(\n    files: [{ fieldname: string; file: File }],\n    payload: any,\n    onProgress?: Function\n  ) {\n    return this.upload('/performer/performer-assets/videos/upload', files, {\n      onProgress,\n      customData: payload\n    });\n  }\n\n  getBookmarks(payload) {\n    return this.get(this.buildUrl('/reactions/videos/bookmark', payload));\n  }\n}\n\nexport const videoService = new VideoService();\n"]},"metadata":{},"sourceType":"module"}