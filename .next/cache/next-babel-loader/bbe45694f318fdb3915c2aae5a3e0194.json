{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport cookie from \"js-cookie\";\nimport { isUrl } from \"@lib/string\";\nimport { getGlobalConfig } from \"./config\";\nexport const TOKEN = \"token\";\nexport class APIRequest {\n  setAuthHeaderToken(token) {\n    APIRequest.token = token;\n  }\n  /**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\n\n\n  parseJSON(response) {\n    if (response.status === 204 || response.status === 205) {\n      return null;\n    }\n\n    return response.json();\n  }\n  /**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\n\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    if (response.status === 401) {\n      if (false) {\n        Router.push(\"/login\");\n      }\n\n      throw new Error(\"Please login!\");\n    } // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n\n\n    throw response.clone().json();\n  }\n\n  request(url, method, body, headers) {\n    const verb = (method || \"get\").toUpperCase();\n\n    const updatedHeader = _objectSpread({\n      \"Content-Type\": \"application/json\",\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null\n    }, headers || {});\n\n    const config = getGlobalConfig();\n    const baseUrl = config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT || process.env.API_ENDPOINT;\n    const apiUrl = isUrl(url) ? url : `${baseUrl}${url.startsWith(\"/\") ? url : `/${url}`}`;\n    return fetch(apiUrl, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null\n    }).then(this.checkStatus).then(this.parseJSON);\n  }\n\n  buildUrl(baseUrl, params) {\n    if (!params) {\n      return baseUrl;\n    }\n\n    const queryString = Object.keys(params).map(k => {\n      if (Array.isArray(params[k])) {\n        return params[k].map(param => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`).join(\"&\");\n      }\n\n      return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n    }).join(\"&\");\n    return `${baseUrl}?${queryString}`;\n  }\n\n  get(url, headers) {\n    return this.request(url, \"get\", null, headers);\n  }\n\n  post(url, data, headers) {\n    return this.request(url, \"post\", data, headers);\n  }\n\n  put(url, data, headers) {\n    return this.request(url, \"put\", data, headers);\n  }\n\n  del(url, data, headers) {\n    return this.request(url, \"delete\", data, headers);\n  }\n\n  upload(url, files, options = {\n    onProgress() {},\n\n    method: \"POST\"\n  }) {\n    const config = getGlobalConfig();\n    const uploadUrl = isUrl(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener(\"progress\", event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener(\"load\", () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener(\"error\", () => {\n        reject(req.response);\n      });\n      const formData = new FormData();\n      files.forEach(f => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData && Object.keys(options.customData).forEach(fieldname => {\n        if (typeof options.customData[fieldname] !== \"undefined\" && !Array.isArray(options.customData[fieldname])) formData.append(fieldname, options.customData[fieldname]);\n\n        if (typeof options.customData[fieldname] !== \"undefined\" && Array.isArray(options.customData[fieldname])) {\n          if (options.customData[fieldname].length) {\n            for (let i = 0; i < options.customData[fieldname].length; i += 1) {\n              formData.append(fieldname, options.customData[fieldname][i]);\n            }\n          }\n        }\n      });\n      req.responseType = \"json\";\n      req.open(options.method || \"POST\", uploadUrl);\n      const token = APIRequest.token || cookie.get(TOKEN);\n      req.setRequestHeader(\"Authorization\", token || \"\");\n      req.send(formData);\n    });\n  }\n\n}\n\n_defineProperty(APIRequest, \"token\", \"\");","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/api-request.ts"],"names":["fetch","Router","cookie","isUrl","getGlobalConfig","TOKEN","APIRequest","setAuthHeaderToken","token","parseJSON","response","status","json","checkStatus","push","Error","clone","request","url","method","body","headers","verb","toUpperCase","updatedHeader","Authorization","get","config","baseUrl","API_ENDPOINT","NEXT_PUBLIC_API_ENDPOINT","process","env","apiUrl","startsWith","JSON","stringify","then","buildUrl","params","queryString","Object","keys","map","k","Array","isArray","param","encodeURIComponent","join","post","data","put","del","upload","files","options","onProgress","uploadUrl","Promise","resolve","reject","req","XMLHttpRequest","addEventListener","event","lengthComputable","percentage","loaded","total","success","formData","FormData","forEach","f","append","fieldname","file","name","customData","length","i","responseType","open","setRequestHeader","send"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport cookie from \"js-cookie\";\nimport { isUrl } from \"@lib/string\";\nimport { getGlobalConfig } from \"./config\";\n\nexport interface IResponse<T> {\n  status: number;\n  data: T;\n}\n\nexport const TOKEN = \"token\";\n\nexport abstract class APIRequest {\n  static token: string = \"\";\n\n  setAuthHeaderToken(token: string) {\n    APIRequest.token = token;\n  }\n\n  /**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\n  private parseJSON(response: Response) {\n    if (response.status === 204 || response.status === 205) {\n      return null;\n    }\n    return response.json();\n  }\n\n  /**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\n  private checkStatus(response: Response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    if (response.status === 401) {\n      if (process.browser) {\n        Router.push(\"/login\");\n      }\n\n      throw new Error(\"Please login!\");\n    }\n\n    // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n    throw response.clone().json();\n  }\n\n  request(\n    url: string,\n    method?: string,\n    body?: any,\n    headers?: { [key: string]: string }\n  ): Promise<IResponse<any>> {\n    const verb = (method || \"get\").toUpperCase();\n    const updatedHeader = {\n      \"Content-Type\": \"application/json\",\n      Authorization: APIRequest.token || cookie.get(TOKEN) || null,\n      ...(headers || {}),\n    };\n    const config = getGlobalConfig();\n    const baseUrl =\n      config.API_ENDPOINT ||\n      config.NEXT_PUBLIC_API_ENDPOINT ||\n      process.env.API_ENDPOINT;\n    const apiUrl = isUrl(url)\n      ? url\n      : `${baseUrl}${url.startsWith(\"/\") ? url : `/${url}`}`;\n\n    return fetch(apiUrl, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null,\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  buildUrl(baseUrl: string, params?: { [key: string]: any }) {\n    if (!params) {\n      return baseUrl;\n    }\n\n    const queryString = Object.keys(params)\n      .map((k) => {\n        if (Array.isArray(params[k])) {\n          return params[k]\n            .map(\n              (param) => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`\n            )\n            .join(\"&\");\n        }\n        return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;\n      })\n      .join(\"&\");\n    return `${baseUrl}?${queryString}`;\n  }\n\n  get(url: string, headers?: { [key: string]: string }) {\n    return this.request(url, \"get\", null, headers);\n  }\n\n  post(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, \"post\", data, headers);\n  }\n\n  put(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, \"put\", data, headers);\n  }\n\n  del(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, \"delete\", data, headers);\n  }\n\n  upload(\n    url: string,\n    files: {\n      file: File;\n      fieldname: string;\n    }[],\n    options: {\n      onProgress: Function;\n      customData?: Record<any, any>;\n      method?: string;\n    } = {\n      onProgress() {},\n      method: \"POST\",\n    }\n  ) {\n    const config = getGlobalConfig();\n    const uploadUrl = isUrl(url)\n      ? url\n      : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener(\"progress\", (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100,\n          });\n        }\n      });\n\n      req.addEventListener(\"load\", () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener(\"error\", () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      files.forEach((f) => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData &&\n        Object.keys(options.customData).forEach((fieldname) => {\n          if (\n            typeof options.customData[fieldname] !== \"undefined\" &&\n            !Array.isArray(options.customData[fieldname])\n          )\n            formData.append(fieldname, options.customData[fieldname]);\n          if (\n            typeof options.customData[fieldname] !== \"undefined\" &&\n            Array.isArray(options.customData[fieldname])\n          ) {\n            if (options.customData[fieldname].length) {\n              for (\n                let i = 0;\n                i < options.customData[fieldname].length;\n                i += 1\n              ) {\n                formData.append(fieldname, options.customData[fieldname][i]);\n              }\n            }\n          }\n        });\n\n      req.responseType = \"json\";\n      req.open(options.method || \"POST\", uploadUrl);\n\n      const token: any = APIRequest.token || cookie.get(TOKEN);\n      req.setRequestHeader(\"Authorization\", token || \"\");\n      req.send(formData);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}