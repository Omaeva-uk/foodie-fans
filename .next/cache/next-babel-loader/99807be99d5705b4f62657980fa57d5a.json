{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { commentService } from '@services/index';\nimport { message } from 'antd';\nimport { getComments, getCommentsSuccess, moreCommentSuccess, moreComment, getCommentsFail, moreCommentFail, createComment, createCommentSuccess, createCommentFail, deleteComment, deleteCommentFail, deleteCommentSuccess } from './actions';\nvar commentSagas = [{\n  on: getComments,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return commentService.search(data.payload);\n\n          case 3:\n            resp = _context.sent;\n            _context.next = 6;\n            return put(getCommentsSuccess(resp.data));\n\n          case 6:\n            _context.next = 15;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 12;\n            return Promise.resolve(_context.t0);\n\n          case 12:\n            error = _context.sent;\n            _context.next = 15;\n            return put(getCommentsFail(error));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: moreComment,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return commentService.search(data.payload);\n\n          case 3:\n            resp = _context2.sent;\n            _context2.next = 6;\n            return put(moreCommentSuccess(resp.data));\n\n          case 6:\n            _context2.next = 15;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 12;\n            return Promise.resolve(_context2.t0);\n\n          case 12:\n            error = _context2.sent;\n            _context2.next = 15;\n            return put(moreCommentFail(error));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: createComment,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return commentService.create(data.payload);\n\n          case 3:\n            resp = _context3.sent;\n            _context3.next = 6;\n            return put(createCommentSuccess(resp.data));\n\n          case 6:\n            _context3.next = 8;\n            return message.success('Commented successfully');\n\n          case 8:\n            _context3.next = 19;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 14;\n            return Promise.resolve(_context3.t0);\n\n          case 14:\n            error = _context3.sent;\n            _context3.next = 17;\n            return message.error('Error occured, please try again later');\n\n          case 17:\n            _context3.next = 19;\n            return put(createCommentFail(error));\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: deleteComment,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return commentService[\"delete\"](data.payload);\n\n          case 3:\n            resp = _context4.sent;\n            _context4.next = 6;\n            return put(deleteCommentSuccess(resp.data));\n\n          case 6:\n            _context4.next = 8;\n            return message.success('Removed successfully!');\n\n          case 8:\n            _context4.next = 19;\n            break;\n\n          case 10:\n            _context4.prev = 10;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 14;\n            return Promise.resolve(_context4.t0);\n\n          case 14:\n            error = _context4.sent;\n            _context4.next = 17;\n            return message.error('Error occured, please try again later');\n\n          case 17:\n            _context4.next = 19;\n            return put(deleteCommentFail(error));\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(commentSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/comment/sagas.ts"],"names":["flatten","put","createSagas","commentService","message","getComments","getCommentsSuccess","moreCommentSuccess","moreComment","getCommentsFail","moreCommentFail","createComment","createCommentSuccess","createCommentFail","deleteComment","deleteCommentFail","deleteCommentSuccess","commentSagas","on","worker","data","search","payload","resp","Promise","resolve","error","create","success"],"mappings":"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","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { commentService } from '@services/index';\nimport { IReduxAction } from 'src/interfaces';\nimport { message } from 'antd';\nimport {\n  getComments, getCommentsSuccess, moreCommentSuccess, moreComment, getCommentsFail, moreCommentFail,\n  createComment, createCommentSuccess, createCommentFail, deleteComment, deleteCommentFail, deleteCommentSuccess\n} from './actions';\n\nconst commentSagas = [\n  {\n    on: getComments,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield commentService.search(data.payload);\n        yield put(getCommentsSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(getCommentsFail(error));\n      }\n    }\n  },\n  {\n    on: moreComment,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield commentService.search(data.payload);\n        yield put(moreCommentSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(moreCommentFail(error));\n      }\n    }\n  },\n  {\n    on: createComment,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield commentService.create(data.payload);\n        yield put(createCommentSuccess(resp.data));\n        yield message.success('Commented successfully');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield message.error('Error occured, please try again later');\n        yield put(createCommentFail(error));\n      }\n    }\n  },\n  {\n    on: deleteComment,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield commentService.delete(data.payload);\n        yield put(deleteCommentSuccess(resp.data));\n        yield message.success('Removed successfully!');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield message.error('Error occured, please try again later');\n        yield put(deleteCommentFail(error));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(commentSagas)]);\n"]},"metadata":{},"sourceType":"module"}