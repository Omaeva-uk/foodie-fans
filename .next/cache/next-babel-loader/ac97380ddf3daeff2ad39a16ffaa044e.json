{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, FileAddOutlined, FileDoneOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction beforeUpload(file) {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_FILE || 100);\n\n  if (!isLt2M) {\n    message.error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_FILE || 100}MB or below`);\n  }\n\n  return isLt2M;\n}\n\nexport class FileUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false,\n      fileUrl: ''\n    });\n\n    _defineProperty(this, \"handleChange\", info => {\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      const {\n        onFileReaded,\n        onUploaded\n      } = this.props;\n\n      if (info.file.status === 'done') {\n        onFileReaded && onFileReaded(info.file.originFileObj); // Get this url from response in real world.\n\n        this.setState({\n          loading: false,\n          fileUrl: info.file.response.data ? info.file.response.data.url : 'Done!'\n        });\n        onUploaded && onUploaded({\n          response: info.file.response\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    const {\n      fileUrl\n    } = this.props;\n    this.setState({\n      fileUrl\n    });\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n\n    const uploadButton = __jsx(\"div\", null, loading ? __jsx(LoadingOutlined, null) : __jsx(FileAddOutlined, null));\n\n    const {\n      fileUrl\n    } = this.state;\n    const {\n      headers,\n      uploadUrl,\n      fieldName = 'file',\n      accept\n    } = this.props;\n    return __jsx(Upload, {\n      accept: accept || '*',\n      name: fieldName,\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: uploadUrl,\n      beforeUpload: beforeUpload,\n      onChange: this.handleChange,\n      headers: headers\n    }, fileUrl ? __jsx(FileDoneOutlined, {\n      style: {\n        fontSize: '28px',\n        color: '#00ce00'\n      }\n    }) : uploadButton);\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/file/file-upload.tsx"],"names":["Upload","message","LoadingOutlined","FileAddOutlined","FileDoneOutlined","PureComponent","getGlobalConfig","beforeUpload","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_FILE","error","FileUpload","loading","fileUrl","info","status","setState","onFileReaded","onUploaded","props","originFileObj","response","data","url","componentDidMount","render","state","uploadButton","headers","uploadUrl","fieldName","accept","handleChange","fontSize","color"],"mappings":"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","sourcesContent":["import { Upload, message } from 'antd';\nimport { LoadingOutlined, FileAddOutlined, FileDoneOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction beforeUpload(file) {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_FILE || 100);\n  if (!isLt2M) {\n    message.error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_FILE || 100}MB or below`);\n  }\n  return isLt2M;\n}\n\ninterface IState {\n  loading: boolean;\n  fileUrl: string;\n}\n\ninterface IProps {\n  accept?: string;\n  fieldName?: string;\n  fileUrl?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  onFileReaded?: Function;\n}\n\nexport class FileUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    fileUrl: ''\n  };\n\n  componentDidMount() {\n    const { fileUrl } = this.props;\n    this.setState({ fileUrl });\n  }\n\n  handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    const { onFileReaded, onUploaded } = this.props;\n    if (info.file.status === 'done') {\n      onFileReaded && onFileReaded(info.file.originFileObj);\n      // Get this url from response in real world.\n      this.setState({\n        loading: false,\n        fileUrl: info.file.response.data ? info.file.response.data.url : 'Done!'\n      });\n      onUploaded && onUploaded({\n        response: info.file.response\n      });\n    }\n  };\n\n  render() {\n    const { loading } = this.state;\n    const uploadButton = (\n      <div>\n        {loading ? <LoadingOutlined /> : <FileAddOutlined />}\n      </div>\n    );\n    const { fileUrl } = this.state;\n    const {\n      headers, uploadUrl, fieldName = 'file', accept\n    } = this.props;\n    return (\n      <Upload\n        accept={accept || '*'}\n        name={fieldName}\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={uploadUrl}\n        beforeUpload={beforeUpload}\n        onChange={this.handleChange}\n        headers={headers}\n      >\n        {fileUrl ? (\n          <FileDoneOutlined style={{ fontSize: '28px', color: '#00ce00' }} />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}