{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener('load', function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n}\n\nexport var ImageUploadModel = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ImageUploadModel, _PureComponent);\n\n  var _super = _createSuper(ImageUploadModel);\n\n  function ImageUploadModel() {\n    var _this;\n\n    _classCallCheck(this, ImageUploadModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false,\n      imageUrl: ''\n    });\n\n    return _this;\n  }\n\n  _createClass(ImageUploadModel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var imageUrl = this.props.imageUrl;\n      this.setState({\n        imageUrl: imageUrl\n      });\n    }\n  }, {\n    key: \"beforeUpload\",\n    value: function beforeUpload(file) {\n      var _this2 = this;\n\n      var onFileReaded = this.props.onFileReaded;\n      var config = getGlobalConfig();\n      var isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20);\n\n      if (!isLt5M) {\n        message.error(\"Image is too large please provide an image \".concat(config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20, \"MB or below\"));\n        return false;\n      }\n\n      getBase64(file, function (imageUrl) {\n        _this2.setState({\n          imageUrl: imageUrl\n        });\n      });\n      onFileReaded && onFileReaded(file);\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          _this$props$options = _this$props.options,\n          options = _this$props$options === void 0 ? {} : _this$props$options,\n          accept = _this$props.accept,\n          headers = _this$props.headers,\n          uploadUrl = _this$props.uploadUrl;\n      var _this$state = this.state,\n          imageUrl = _this$state.imageUrl,\n          loading = _this$state.loading;\n\n      var uploadButton = __jsx(\"div\", null, loading ? __jsx(LoadingOutlined, null) : __jsx(CameraOutlined, null));\n\n      return __jsx(Upload, {\n        customRequest: function customRequest() {\n          return false;\n        },\n        accept: accept || 'image/*',\n        name: options.fieldName || 'file',\n        listType: \"picture-card\",\n        className: \"avatar-uploader\",\n        showUploadList: false,\n        action: uploadUrl,\n        beforeUpload: function beforeUpload(file) {\n          return _this3.beforeUpload(file);\n        },\n        headers: headers\n      }, imageUrl ? __jsx(\"img\", {\n        src: imageUrl,\n        alt: \"file\",\n        style: {\n          width: '100%'\n        }\n      }) : uploadButton);\n    }\n  }]);\n\n  return ImageUploadModel;\n}(PureComponent);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/file/image-upload-model.tsx"],"names":["Upload","message","LoadingOutlined","CameraOutlined","PureComponent","getGlobalConfig","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","ImageUploadModel","loading","imageUrl","props","setState","file","onFileReaded","config","isLt5M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","options","accept","headers","uploadUrl","state","uploadButton","fieldName","beforeUpload","width"],"mappings":"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","sourcesContent":["import { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\ninterface IState {\n  loading: boolean;\n  imageUrl: string;\n}\n\ninterface IProps {\n  accept?: string;\n  imageUrl?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  onFileReaded?: Function;\n  options?: any;\n}\n\nexport class ImageUploadModel extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    imageUrl: ''\n  };\n\n  componentDidMount() {\n    const { imageUrl } = this.props;\n    this.setState({ imageUrl });\n  }\n\n  beforeUpload(file) {\n    const { onFileReaded } = this.props;\n    const config = getGlobalConfig();\n    const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20);\n    if (!isLt5M) {\n      message.error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20}MB or below`);\n      return false;\n    }\n    getBase64(file, (imageUrl) => {\n      this.setState({\n        imageUrl\n      });\n    });\n    onFileReaded && onFileReaded(file);\n    return true;\n  }\n\n  render() {\n    const {\n      options = {}, accept, headers, uploadUrl\n    } = this.props;\n    const { imageUrl, loading } = this.state;\n    const uploadButton = (\n      <div>\n        {loading ? <LoadingOutlined /> : <CameraOutlined />}\n      </div>\n    );\n    return (\n      <Upload\n        customRequest={() => false}\n        accept={accept || 'image/*'}\n        name={options.fieldName || 'file'}\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={uploadUrl}\n        beforeUpload={(file) => this.beforeUpload(file)}\n        headers={headers}\n      >\n        {imageUrl ? (\n          <img src={imageUrl} alt=\"file\" style={{ width: '100%' }} />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}