{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { addPrivateRequest, accessPrivateRequest, updateLiveStreamSettings } from './actions';\nconst initialState = {\n  privateRequests: [],\n  settings: {\n    viewerURL: '',\n    publisherURL: '',\n    optionForBroadcast: 'hls',\n    optionForGroup: 'hls',\n    optionForPrivate: 'hls',\n    secureOption: false,\n    agoraEnable: false\n  }\n};\nconst reducers = [{\n  on: addPrivateRequest,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      privateRequests: [...state.privateRequests, action.payload]\n    });\n  }\n\n}, {\n  on: accessPrivateRequest,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      privateRequests: state.privateRequests.filter(p => p.conversationId !== action.payload)\n    });\n  }\n\n}, {\n  on: updateLiveStreamSettings,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      settings: _objectSpread(_objectSpread({}, state.settings), action.payload)\n    });\n  }\n\n}];\nexport default merge({}, createReducers('streaming', [reducers], initialState));","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/streaming/reducers.ts"],"names":["merge","createReducers","addPrivateRequest","accessPrivateRequest","updateLiveStreamSettings","initialState","privateRequests","settings","viewerURL","publisherURL","optionForBroadcast","optionForGroup","optionForPrivate","secureOption","agoraEnable","reducers","on","reducer","state","action","payload","filter","p","conversationId"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,wBAAlD,QAAkF,WAAlF;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,EADE;AAEnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,EADH;AAERC,IAAAA,YAAY,EAAE,EAFN;AAGRC,IAAAA,kBAAkB,EAAE,KAHZ;AAIRC,IAAAA,cAAc,EAAE,KAJR;AAKRC,IAAAA,gBAAgB,EAAE,KALV;AAMRC,IAAAA,YAAY,EAAE,KANN;AAORC,IAAAA,WAAW,EAAE;AAPL;AAFS,CAArB;AAaA,MAAMC,QAAQ,GAAG,CACf;AACEC,EAAAA,EAAE,EAAEd,iBADN;;AAEEe,EAAAA,OAAO,CAACC,KAAD,EAAaC,MAAb,EAAwC;AAC7C,2CACKD,KADL;AAEEZ,MAAAA,eAAe,EAAE,CAAC,GAAGY,KAAK,CAACZ,eAAV,EAA2Ba,MAAM,CAACC,OAAlC;AAFnB;AAID;;AAPH,CADe,EAUf;AACEJ,EAAAA,EAAE,EAAEb,oBADN;;AAEEc,EAAAA,OAAO,CAACC,KAAD,EAAaC,MAAb,EAA2C;AAChD,2CACKD,KADL;AAEEZ,MAAAA,eAAe,EAAEY,KAAK,CAACZ,eAAN,CAAsBe,MAAtB,CAA8BC,CAAD,IAAOA,CAAC,CAACC,cAAF,KAAqBJ,MAAM,CAACC,OAAhE;AAFnB;AAID;;AAPH,CAVe,EAmBf;AACEJ,EAAAA,EAAE,EAAEZ,wBADN;;AAEEa,EAAAA,OAAO,CAACC,KAAD,EAAaC,MAAb,EAAwC;AAC7C,2CACKD,KADL;AAEEX,MAAAA,QAAQ,kCACHW,KAAK,CAACX,QADH,GAEHY,MAAM,CAACC,OAFJ;AAFV;AAOD;;AAVH,CAnBe,CAAjB;AAgCA,eAAepB,KAAK,CAAC,EAAD,EAAKC,cAAc,CAAC,WAAD,EAAc,CAACc,QAAD,CAAd,EAA0BV,YAA1B,CAAnB,CAApB","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction } from 'src/interfaces';\nimport { addPrivateRequest, accessPrivateRequest, updateLiveStreamSettings } from './actions';\n\nconst initialState = {\n  privateRequests: [],\n  settings: {\n    viewerURL: '',\n    publisherURL: '',\n    optionForBroadcast: 'hls',\n    optionForGroup: 'hls',\n    optionForPrivate: 'hls',\n    secureOption: false,\n    agoraEnable: false\n  }\n};\n\nconst reducers = [\n  {\n    on: addPrivateRequest,\n    reducer(state: any, action: IReduxAction<any>) {\n      return {\n        ...state,\n        privateRequests: [...state.privateRequests, action.payload]\n      };\n    }\n  },\n  {\n    on: accessPrivateRequest,\n    reducer(state: any, action: IReduxAction<string>) {\n      return {\n        ...state,\n        privateRequests: state.privateRequests.filter((p) => p.conversationId !== action.payload)\n      };\n    }\n  },\n  {\n    on: updateLiveStreamSettings,\n    reducer(state: any, action: IReduxAction<any>) {\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          ...action.payload\n        }\n      };\n    }\n  }\n];\nexport default merge({}, createReducers('streaming', [reducers], initialState));\n"]},"metadata":{},"sourceType":"module"}