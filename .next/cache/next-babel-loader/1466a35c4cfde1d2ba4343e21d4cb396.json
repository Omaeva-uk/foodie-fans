{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge, uniq } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getConversations, getConversationsSuccess, getConversationsFail, searchConversations, searchConversationsSuccess, searchConversationsFail, setActiveConversationSuccess, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageSuccess, sendMessageFail, getConversationDetailSuccess, receiveMessageSuccess, readMessages, sentFileSuccess, loadMoreMessagesSuccess, deactiveConversation, resetMessageState } from './actions';\nconst initialConversationState = {\n  list: {\n    requesting: false,\n    error: null,\n    data: [],\n    total: 0,\n    success: false\n  },\n  mapping: {},\n  activeConversation: {}\n};\nconst initialMessageState = {\n  // conversationId => { fetching: boolean, items: [] }\n  conversationMap: {},\n  sendMessage: {},\n  receiveMessage: {}\n};\nconst conversationReducer = [{\n  on: resetMessageState,\n\n  reducer(state) {\n    let {\n      list,\n      mapping,\n      activeConversation\n    } = state;\n    list = {\n      requesting: false,\n      error: null,\n      data: [],\n      total: 0,\n      success: false\n    };\n    mapping = {};\n    activeConversation = {};\n    return _objectSpread(_objectSpread({}, state), {}, {\n      list,\n      mapping,\n      activeConversation\n    });\n  }\n\n}, {\n  on: getConversations,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    nextState.list.requesting = true;\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: getConversationsSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = uniq(list.data.concat(Ids));\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: getConversationsFail,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: searchConversations,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: true,\n        error: null,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: searchConversationsSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = Ids;\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: searchConversationsFail,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: setActiveConversationSuccess,\n\n  reducer(state, data) {\n    const conversation = data.payload;\n    const list = state.list.data;\n    const {\n      mapping\n    } = state;\n    const check = list.find(c => c === conversation._id);\n\n    if (!check) {\n      list.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: conversation\n    });\n  }\n\n}, {\n  on: getConversationDetailSuccess,\n\n  reducer(state, data) {\n    const {\n      list,\n      mapping\n    } = state;\n    const conversation = data.payload;\n\n    if (!list.data.includes(conversation._id)) {\n      list.data.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: readMessages,\n\n  reducer(state, data) {\n    const conversationId = data.payload;\n    const {\n      mapping\n    } = state;\n    mapping[conversationId].totalNotSeenMessages = 0;\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: deactiveConversation,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    nextState.activeConversation = {};\n    return _objectSpread({}, nextState);\n  }\n\n}];\nconst messageReducer = [{\n  on: fetchingMessage,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId\n    } = data.payload;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse()],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMoreMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse(), ...(conversationMap[conversationId].items || [])],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: sendMessage,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true\n      }\n    });\n  }\n\n}, {\n  on: sendMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: sendMessageFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n\n}, {\n  on: receiveMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId]) {\n      return _objectSpread({}, nextState);\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n\n}, {\n  on: sentFileSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: deactiveConversation,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const conversationId = data.payload;\n\n    if (conversationId && nextState.conversationMap[conversationId]) {\n      nextState.conversationMap[conversationId] = {\n        items: [],\n        total: 0,\n        requesting: false\n      };\n    }\n\n    return _objectSpread({}, nextState);\n  }\n\n}];\nexport default merge({}, createReducers('conversation', [conversationReducer], initialConversationState), createReducers('message', [messageReducer], initialMessageState));","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/message/reducers.ts"],"names":["merge","uniq","createReducers","getConversations","getConversationsSuccess","getConversationsFail","searchConversations","searchConversationsSuccess","searchConversationsFail","setActiveConversationSuccess","fetchingMessage","loadMessagesSuccess","sendMessage","sendMessageSuccess","sendMessageFail","getConversationDetailSuccess","receiveMessageSuccess","readMessages","sentFileSuccess","loadMoreMessagesSuccess","deactiveConversation","resetMessageState","initialConversationState","list","requesting","error","data","total","success","mapping","activeConversation","initialMessageState","conversationMap","receiveMessage","conversationReducer","on","reducer","state","nextState","items","payload","Ids","map","c","_id","concat","forEach","conversation","check","find","unshift","includes","conversationId","totalNotSeenMessages","messageReducer","fetching","reverse","sending","push"],"mappings":"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","sourcesContent":["import { merge, uniq } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  getConversations,\n  getConversationsSuccess,\n  getConversationsFail,\n  searchConversations,\n  searchConversationsSuccess,\n  searchConversationsFail,\n  setActiveConversationSuccess,\n  fetchingMessage,\n  loadMessagesSuccess,\n  sendMessage,\n  sendMessageSuccess,\n  sendMessageFail,\n  getConversationDetailSuccess,\n  receiveMessageSuccess,\n  readMessages,\n  sentFileSuccess,\n  loadMoreMessagesSuccess,\n  deactiveConversation,\n  resetMessageState\n} from './actions';\n\nconst initialConversationState = {\n  list: {\n    requesting: false,\n    error: null,\n    data: [],\n    total: 0,\n    success: false\n  },\n  mapping: {},\n  activeConversation: {}\n};\n\nconst initialMessageState = {\n  // conversationId => { fetching: boolean, items: [] }\n  conversationMap: {},\n  sendMessage: {},\n  receiveMessage: {}\n};\n\nconst conversationReducer = [\n  {\n    on: resetMessageState,\n    reducer(state: any) {\n      let { list, mapping, activeConversation } = state;\n      list = {\n        requesting: false,\n        error: null,\n        data: [],\n        total: 0,\n        success: false\n      };\n      mapping = {};\n      activeConversation = {};\n      return {\n        ...state,\n        list,\n        mapping,\n        activeConversation\n      };\n    }\n  },\n  {\n    on: getConversations,\n    reducer(state: any) {\n      const nextState = { ...state };\n      nextState.list.requesting = true;\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: getConversationsSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { list, mapping } = nextState;\n      const { data: items, total } = data.payload;\n      const Ids = items.map((c) => c._id);\n      list.data = uniq(list.data.concat(Ids));\n      list.total = total;\n      list.success = true;\n      list.requesting = false;\n      list.error = false;\n      items.forEach((c) => {\n        mapping[c._id] = c;\n      });\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: getConversationsFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        list: {\n          requesting: false,\n          error: data.payload,\n          data: [],\n          total: 0,\n          success: false\n        },\n        mapping: {},\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: searchConversations,\n    reducer(state: any) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        list: {\n          requesting: true,\n          error: null,\n          data: [],\n          total: 0,\n          success: false\n        },\n        mapping: {},\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: searchConversationsSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { list, mapping } = nextState;\n      const { data: items, total } = data.payload;\n      const Ids = items.map((c) => c._id);\n      list.data = Ids;\n      list.total = total;\n      list.success = true;\n      list.requesting = false;\n      list.error = false;\n      items.forEach((c) => {\n        mapping[c._id] = c;\n      });\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: searchConversationsFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        list: {\n          requesting: false,\n          error: data.payload,\n          data: [],\n          total: 0,\n          success: false\n        },\n        mapping: {},\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: setActiveConversationSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const conversation = data.payload;\n      const list = state.list.data;\n      const { mapping } = state;\n      const check = list.find((c) => c === conversation._id);\n      if (!check) {\n        list.unshift(conversation._id);\n        mapping[conversation._id] = conversation;\n      }\n      return {\n        ...state,\n        activeConversation: conversation\n      };\n    }\n  },\n  {\n    on: getConversationDetailSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { list, mapping } = state;\n      const conversation = data.payload;\n      if (!list.data.includes(conversation._id)) {\n        list.data.unshift(conversation._id);\n        mapping[conversation._id] = conversation;\n      }\n\n      return {\n        ...state\n      };\n    }\n  },\n  {\n    on: readMessages,\n    reducer(state: any, data: IReduxAction<any>) {\n      const conversationId = data.payload;\n      const { mapping } = state;\n      mapping[conversationId].totalNotSeenMessages = 0;\n      return {\n        ...state\n      };\n    }\n  },\n  {\n    on: deactiveConversation,\n    reducer(state: any) {\n      const nextState = { ...state };\n      nextState.activeConversation = {};\n      return {\n        ...nextState\n      };\n    }\n  }\n];\n\nconst messageReducer = [\n  {\n    on: fetchingMessage,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId } = data.payload;\n      conversationMap[conversationId] = {\n        ...conversationMap[conversationId],\n        fetching: true\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [...items.reverse()],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadMoreMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [\n          ...items.reverse(),\n          ...conversationMap[conversationId].items || []\n        ],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: sendMessage,\n    reducer(state: any) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: true\n        }\n      };\n    }\n  },\n  {\n    on: sendMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n        nextState.conversationMap[data.payload.conversationId].items = [];\n      }\n      nextState.conversationMap[data.payload.conversationId].items.push(\n        data.payload\n      );\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false,\n          success: true,\n          data: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: sendMessageFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: false,\n          success: false,\n          error: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: receiveMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      if (!nextState.conversationMap[data.payload.conversationId]) {\n        return { ...nextState };\n      }\n      nextState.conversationMap[data.payload.conversationId].items.push(\n        data.payload\n      );\n      return {\n        ...nextState,\n        receiveMessage: data.payload\n      };\n    }\n  },\n  {\n    on: sentFileSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n        nextState.conversationMap[data.payload.conversationId].items = [];\n      }\n      nextState.conversationMap[data.payload.conversationId].items.push(\n        data.payload\n      );\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false,\n          success: true,\n          data: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: deactiveConversation,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const conversationId = data.payload;\n      if (conversationId && nextState.conversationMap[conversationId]) {\n        nextState.conversationMap[conversationId] = {\n          items: [],\n          total: 0,\n          requesting: false\n        };\n      }\n      return {\n        ...nextState\n      };\n    }\n  }\n];\n\nexport default merge(\n  {},\n  createReducers(\n    'conversation',\n    [conversationReducer],\n    initialConversationState\n  ),\n  createReducers('message', [messageReducer], initialMessageState)\n);\n"]},"metadata":{},"sourceType":"module"}