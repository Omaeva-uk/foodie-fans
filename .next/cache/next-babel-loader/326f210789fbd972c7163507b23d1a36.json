{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport BaseLayout from '@layouts/base-layout';\nimport { authService, userService, settingService } from '@services/index';\nimport Router from 'next/router';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport { Socket } from 'src/socket';\nimport Head from 'next/head';\nimport { SETTING_KEYS } from 'src/constants';\nimport { pick } from 'lodash';\nimport { updateLiveStreamSettings } from '@redux/streaming/actions';\nimport { updateSettings } from '@redux/settings/actions';\nimport '../style/index.less';\nimport { setGlobalConfig } from '@services/config';\n\nfunction redirectLogin(ctx) {\n  if (false) {\n    authService.removeToken();\n    Router.push('/');\n    return;\n  } // fix for production build\n\n\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.clearCookie && ctx.res.clearCookie('role');\n  ctx.res.writeHead && ctx.res.writeHead(302, {\n    Location: '/'\n  });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function auth(ctx, noredirect, onlyPerformer) {\n  try {\n    const {\n      store\n    } = ctx;\n    const state = store.getState();\n    const {\n      token\n    } = nextCookie(ctx);\n\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    }\n\n    if (token) {\n      authService.setToken(token);\n      const user = await userService.me({\n        Authorization: token\n      });\n\n      if (!user.data || !user.data._id) {\n        redirectLogin(ctx);\n        return;\n      }\n\n      if (!user.data.isPerformer && onlyPerformer) {\n        redirectLogin(ctx);\n        return;\n      }\n\n      store.dispatch(loginSuccess());\n      store.dispatch(updateCurrentUser(user.data));\n      return;\n    }\n\n    !noredirect && redirectLogin(ctx);\n  } catch (e) {\n    redirectLogin(ctx);\n  }\n}\n\nasync function updateSettingsStore(ctx, settings) {\n  const {\n    store\n  } = ctx;\n  store.dispatch(updateUIValue({\n    logo: settings.logoUrl || '',\n    siteName: settings.siteName || '',\n    favicon: settings.favicon || '',\n    loginPlaceholderImage: settings.loginPlaceholderImage || '',\n    menus: settings.menus || [],\n    footerContent: settings.footerContent || '',\n    countries: settings.countries || [],\n    userBenefit: settings.userBenefit || '',\n    modelBenefit: settings.modelBenefit || ''\n  }));\n  store.dispatch(updateLiveStreamSettings(pick(settings, [SETTING_KEYS.VIEWER_URL, SETTING_KEYS.PUBLISHER_URL, SETTING_KEYS.SUBSCRIBER_URL, SETTING_KEYS.OPTION_FOR_BROADCAST, SETTING_KEYS.OPTION_FOR_PRIVATE, SETTING_KEYS.SECURE_OPTION, SETTING_KEYS.ANT_MEDIA_APPNAME, SETTING_KEYS.AGORA_APPID, SETTING_KEYS.AGORA_ENABLE])));\n  store.dispatch(updateSettings(pick(settings, [SETTING_KEYS.REQUIRE_EMAIL_VERIFICATION, SETTING_KEYS.TOKEN_CONVERSION_RATE, SETTING_KEYS.STRIPE_PUBLISHABLE_KEY, SETTING_KEYS.GOOGLE_RECAPTCHA_SITE_KEY, SETTING_KEYS.ENABLE_GOOGLE_RECAPTCHA, SETTING_KEYS.GOOGLE_CLIENT_ID, SETTING_KEYS.TWITTER_CLIENT_ID, SETTING_KEYS.PAYMENT_GATEWAY, SETTING_KEYS.META_KEYWORDS, SETTING_KEYS.META_DESCRIPTION])));\n}\n\nconst publicConfig = {};\n\nclass Application extends App {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    // load configuration from ENV and put to config\n    if (!false) {\n      // eslint-disable-next-line global-require\n      const dotenv = require('dotenv');\n\n      const myEnv = dotenv.config().parsed; // publish to server config with app\n\n      setGlobalConfig(myEnv); // load public config and api-endpoint?\n\n      Object.keys(myEnv).forEach(key => {\n        if (key.indexOf('NEXT_PUBLIC_') === 0) {\n          publicConfig[key] = myEnv[key];\n        }\n      });\n    } // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n\n\n    const {\n      noredirect,\n      onlyPerformer,\n      authenticate\n    } = Component;\n\n    if (authenticate !== false) {\n      await auth(ctx, noredirect, onlyPerformer);\n    }\n\n    const {\n      token\n    } = nextCookie(ctx);\n    ctx.token = token || ''; // server side to load settings, once time only\n\n    let settings = {};\n\n    if (!false) {\n      const [setting] = await Promise.all([settingService.all('all', true)]);\n      settings = _objectSpread({}, setting.data);\n      await updateSettingsStore(ctx, settings);\n    }\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({\n        ctx\n      });\n    }\n\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout,\n      config: publicConfig\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    setGlobalConfig(this.props.config);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store,\n      settings\n    } = this.props;\n    const {\n      layout\n    } = Component;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"title\", null, settings === null || settings === void 0 ? void 0 : settings.siteName), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1, maximum-scale=1\"\n    }), settings && settings.gaCode && [__jsx(\"script\", {\n      async: true,\n      src: `https://www.googletagmanager.com/gtag/js?id=${settings.gaCode}`\n    }), __jsx(\"script\", {\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML: {\n        __html: `\n                 window.dataLayer = window.dataLayer || [];\n                 function gtag(){dataLayer.push(arguments);}\n                 gtag('js', new Date());\n                 gtag('config', '${settings.gaCode}');\n             `\n      }\n    })], settings && settings.headerScript && // eslint-disable-next-line react/no-danger\n    __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: settings.headerScript\n      }\n    })), __jsx(Socket, null, __jsx(BaseLayout, {\n      layout: layout,\n      maintenance: settings.maintenanceMode\n    }, __jsx(Component, pageProps))), settings && settings.afterBodyScript && // eslint-disable-next-line react/no-danger\n    __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: settings.afterBodyScript\n      }\n    }));\n  }\n\n}\n\nexport default withReduxSaga(Application);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/pages/_app.tsx"],"names":["App","React","Provider","nextCookie","withReduxSaga","BaseLayout","authService","userService","settingService","Router","loginSuccess","updateCurrentUser","updateUIValue","Socket","Head","SETTING_KEYS","pick","updateLiveStreamSettings","updateSettings","setGlobalConfig","redirectLogin","ctx","removeToken","push","res","clearCookie","writeHead","Location","end","auth","noredirect","onlyPerformer","store","state","getState","token","loggedIn","setToken","user","me","Authorization","data","_id","isPerformer","dispatch","e","updateSettingsStore","settings","logo","logoUrl","siteName","favicon","loginPlaceholderImage","menus","footerContent","countries","userBenefit","modelBenefit","VIEWER_URL","PUBLISHER_URL","SUBSCRIBER_URL","OPTION_FOR_BROADCAST","OPTION_FOR_PRIVATE","SECURE_OPTION","ANT_MEDIA_APPNAME","AGORA_APPID","AGORA_ENABLE","REQUIRE_EMAIL_VERIFICATION","TOKEN_CONVERSION_RATE","STRIPE_PUBLISHABLE_KEY","GOOGLE_RECAPTCHA_SITE_KEY","ENABLE_GOOGLE_RECAPTCHA","GOOGLE_CLIENT_ID","TWITTER_CLIENT_ID","PAYMENT_GATEWAY","META_KEYWORDS","META_DESCRIPTION","publicConfig","Application","getInitialProps","Component","dotenv","require","myEnv","config","parsed","Object","keys","forEach","key","indexOf","authenticate","setting","Promise","all","pageProps","layout","constructor","props","render","gaCode","__html","headerScript","maintenanceMode","afterBodyScript"],"mappings":"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","sourcesContent":["import App from 'next/app';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport nextCookie from 'next-cookies';\nimport withReduxSaga from '@redux/withReduxSaga';\nimport { Store } from 'redux';\nimport BaseLayout from '@layouts/base-layout';\nimport {\n  authService, userService, settingService\n} from '@services/index';\nimport Router from 'next/router';\nimport { NextPageContext } from 'next';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateUIValue } from '@redux/ui/actions';\nimport { Socket } from 'src/socket';\nimport Head from 'next/head';\nimport { SETTING_KEYS } from 'src/constants';\nimport { pick } from 'lodash';\nimport { updateLiveStreamSettings } from '@redux/streaming/actions';\nimport { updateSettings } from '@redux/settings/actions';\nimport '../style/index.less';\nimport { setGlobalConfig } from '@services/config';\n\ndeclare global {\n  interface Window {\n    ReactSocketIO: any;\n    _REDUX_DEVTOOLS_EXTENSION_COMPOSE_: any;\n    iframely: any;\n  }\n}\n\nfunction redirectLogin(ctx: any) {\n  if (process.browser) {\n    authService.removeToken();\n    Router.push('/');\n    return;\n  }\n\n  // fix for production build\n  ctx.res.clearCookie && ctx.res.clearCookie('token');\n  ctx.res.clearCookie && ctx.res.clearCookie('role');\n  ctx.res.writeHead && ctx.res.writeHead(302, { Location: '/' });\n  ctx.res.end && ctx.res.end();\n}\n\nasync function auth(\n  ctx: NextPageContext,\n  noredirect: boolean,\n  onlyPerformer: boolean\n) {\n  try {\n    const { store } = ctx;\n    const state = store.getState();\n    const { token } = nextCookie(ctx);\n    if (state.auth && state.auth.loggedIn) {\n      return;\n    }\n    if (token) {\n      authService.setToken(token);\n      const user = await userService.me({\n        Authorization: token\n      });\n      if (!user.data || !user.data._id) {\n        redirectLogin(ctx);\n        return;\n      }\n      if (!user.data.isPerformer && onlyPerformer) {\n        redirectLogin(ctx);\n        return;\n      }\n      store.dispatch(loginSuccess());\n      store.dispatch(updateCurrentUser(user.data));\n      return;\n    }\n\n    !noredirect && redirectLogin(ctx);\n  } catch (e) {\n    redirectLogin(ctx);\n  }\n}\n\nasync function updateSettingsStore(ctx: NextPageContext, settings) {\n  const { store } = ctx;\n  store.dispatch(\n    updateUIValue({\n      logo: settings.logoUrl || '',\n      siteName: settings.siteName || '',\n      favicon: settings.favicon || '',\n      loginPlaceholderImage: settings.loginPlaceholderImage || '',\n      menus: settings.menus || [],\n      footerContent: settings.footerContent || '',\n      countries: settings.countries || [],\n      userBenefit: settings.userBenefit || '',\n      modelBenefit: settings.modelBenefit || ''\n    })\n  );\n  store.dispatch(\n    updateLiveStreamSettings(\n      pick(settings, [\n        SETTING_KEYS.VIEWER_URL,\n        SETTING_KEYS.PUBLISHER_URL,\n        SETTING_KEYS.SUBSCRIBER_URL,\n        SETTING_KEYS.OPTION_FOR_BROADCAST,\n        SETTING_KEYS.OPTION_FOR_PRIVATE,\n        SETTING_KEYS.SECURE_OPTION,\n        SETTING_KEYS.ANT_MEDIA_APPNAME,\n        SETTING_KEYS.AGORA_APPID,\n        SETTING_KEYS.AGORA_ENABLE\n      ])\n    )\n  );\n\n  store.dispatch(\n    updateSettings(\n      pick(settings, [\n        SETTING_KEYS.REQUIRE_EMAIL_VERIFICATION,\n        SETTING_KEYS.TOKEN_CONVERSION_RATE,\n        SETTING_KEYS.STRIPE_PUBLISHABLE_KEY,\n        SETTING_KEYS.GOOGLE_RECAPTCHA_SITE_KEY,\n        SETTING_KEYS.ENABLE_GOOGLE_RECAPTCHA,\n        SETTING_KEYS.GOOGLE_CLIENT_ID,\n        SETTING_KEYS.TWITTER_CLIENT_ID,\n        SETTING_KEYS.PAYMENT_GATEWAY,\n        SETTING_KEYS.META_KEYWORDS,\n        SETTING_KEYS.META_DESCRIPTION\n      ])\n    )\n  );\n}\n\ninterface AppComponent extends NextPageContext {\n  layout: string;\n}\n\ninterface IApp {\n  store: Store;\n  layout: string;\n  Component: AppComponent;\n  settings: any;\n  config: any;\n}\n\nconst publicConfig = {} as any;\nclass Application extends App<IApp> {\n  // TODO - consider if we need to use get static props in children component instead?\n  // or check in render?\n  static async getInitialProps({ Component, ctx }) {\n    // load configuration from ENV and put to config\n    if (!process.browser) {\n      // eslint-disable-next-line global-require\n      const dotenv = require('dotenv');\n      const myEnv = dotenv.config().parsed;\n\n      // publish to server config with app\n      setGlobalConfig(myEnv);\n\n      // load public config and api-endpoint?\n      Object.keys(myEnv).forEach((key) => {\n        if (key.indexOf('NEXT_PUBLIC_') === 0) {\n          publicConfig[key] = myEnv[key];\n        }\n      });\n    }\n\n    // won't check auth for un-authenticated page such as login, register\n    // use static field in the component\n    const { noredirect, onlyPerformer, authenticate } = Component;\n    if (authenticate !== false) {\n      await auth(ctx, noredirect, onlyPerformer);\n    }\n    const { token } = nextCookie(ctx);\n    ctx.token = token || '';\n    // server side to load settings, once time only\n    let settings = {};\n    if (!process.browser) {\n      const [setting] = await Promise.all([\n        settingService.all('all', true)\n      ]);\n      settings = { ...setting.data };\n      await updateSettingsStore(ctx, settings);\n    }\n    let pageProps = {};\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps({ ctx });\n    }\n    return {\n      settings,\n      pageProps,\n      layout: Component.layout,\n      config: publicConfig\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    setGlobalConfig(this.props.config);\n  }\n\n  render() {\n    const {\n      Component, pageProps, store, settings\n    } = this.props;\n    const { layout } = Component;\n    return (\n      <Provider store={store}>\n        <Head>\n          <title>{settings?.siteName}</title>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n          {/* GA code */}\n          {settings && settings.gaCode && [\n            <script async src={`https://www.googletagmanager.com/gtag/js?id=${settings.gaCode}`} />,\n            <script\n              // eslint-disable-next-line react/no-danger\n              dangerouslySetInnerHTML={{\n                __html: `\n                 window.dataLayer = window.dataLayer || [];\n                 function gtag(){dataLayer.push(arguments);}\n                 gtag('js', new Date());\n                 gtag('config', '${settings.gaCode}');\n             `\n              }}\n            />\n          ]}\n          {/* extra script */}\n          {settings && settings.headerScript && (\n            // eslint-disable-next-line react/no-danger\n            <div dangerouslySetInnerHTML={{ __html: settings.headerScript }} />\n          )}\n        </Head>\n        <Socket>\n          <BaseLayout layout={layout} maintenance={settings.maintenanceMode}>\n            <Component {...pageProps} />\n          </BaseLayout>\n        </Socket>\n        {settings && settings.afterBodyScript && (\n          // eslint-disable-next-line react/no-danger\n          <div dangerouslySetInnerHTML={{ __html: settings.afterBodyScript }} />\n        )}\n      </Provider>\n    );\n  }\n}\n\nexport default withReduxSaga(Application);"]},"metadata":{},"sourceType":"module"}