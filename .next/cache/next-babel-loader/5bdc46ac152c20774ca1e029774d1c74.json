{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, EditOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n\n  if (!isLt2M) {\n    message.error(`Cover must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n  }\n\n  return isLt2M;\n}\n\nexport class CoverUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false\n    });\n\n    _defineProperty(this, \"handleChange\", info => {\n      const {\n        onUploaded\n      } = this.props;\n\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, imageUrl => {\n          this.setState({\n            loading: false\n          });\n          onUploaded && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"onPreview\", async file => {\n      let src = file.url;\n\n      if (!src) {\n        src = await new Promise(resolve => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file.originFileObj);\n\n          reader.onload = () => resolve(reader.result);\n        });\n      }\n\n      const image = new Image();\n      image.src = src;\n      const imgWindow = window.open(src);\n      imgWindow.document.write(image.outerHTML);\n    });\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    const {\n      headers,\n      uploadUrl,\n      options\n    } = this.props;\n    return __jsx(ImgCrop, {\n      aspect: 4.5 / 1,\n      shape: \"rect\",\n      quality: 1,\n      modalTitle: \"Edit cover image\",\n      modalWidth: 767\n    }, __jsx(Upload, {\n      accept: \"image/*\",\n      name: options.fieldName || 'file',\n      listType: \"picture-card\",\n      showUploadList: false,\n      action: uploadUrl,\n      beforeUpload: beforeUpload,\n      onChange: this.handleChange,\n      onPreview: this.onPreview,\n      headers: headers\n    }, loading ? __jsx(LoadingOutlined, null) : __jsx(EditOutlined, null), ' ', \"Edit cover\"));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/user/cover-upload.tsx"],"names":["PureComponent","Upload","message","LoadingOutlined","EditOutlined","ImgCrop","getGlobalConfig","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","CoverUpload","loading","info","onUploaded","props","status","setState","originFileObj","imageUrl","response","base64","src","url","Promise","resolve","onload","image","Image","imgWindow","window","open","document","write","outerHTML","render","state","headers","uploadUrl","options","fieldName","handleChange","onPreview"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, EditOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n  if (!isLt2M) {\n    message.error(`Cover must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n  }\n  return isLt2M;\n}\n\ninterface IState {\n  loading: boolean;\n}\n\ninterface IProps {\n  image?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  options?: any;\n}\n\nexport class CoverUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false\n  };\n\n  handleChange = (info) => {\n    const { onUploaded } = this.props;\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, (imageUrl) => {\n        this.setState({\n          loading: false\n        });\n        onUploaded\n          && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n      });\n    }\n  };\n\n  onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  render() {\n    const { loading } = this.state;\n    const { headers, uploadUrl, options } = this.props;\n    return (\n      <ImgCrop aspect={4.5 / 1} shape=\"rect\" quality={1} modalTitle=\"Edit cover image\" modalWidth={767}>\n        <Upload\n          accept=\"image/*\"\n          name={options.fieldName || 'file'}\n          listType=\"picture-card\"\n          showUploadList={false}\n          action={uploadUrl}\n          beforeUpload={beforeUpload}\n          onChange={this.handleChange}\n          onPreview={this.onPreview}\n          headers={headers}\n        >\n          {loading ? <LoadingOutlined /> : <EditOutlined />}\n          {' '}\n          Edit cover\n        </Upload>\n      </ImgCrop>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}