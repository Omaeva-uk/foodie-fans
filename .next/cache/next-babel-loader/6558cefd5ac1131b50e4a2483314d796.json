{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { performerService } from '@services/index';\nimport { getList, getListFail, getListSuccess, getProfile, getProfileFail, getProfileSuccess } from './actions';\nconst performerSagas = [{\n  on: getList,\n\n  *worker(data) {\n    try {\n      const resp = yield performerService.search(data.payload);\n      yield put(getListSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(getListFail(error));\n    }\n  }\n\n}, {\n  on: getProfile,\n\n  *worker(data) {\n    try {\n      const resp = yield performerService.findOne(data.payload);\n      yield put(getProfileSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(getProfileFail(error));\n    }\n  }\n\n}];\nexport default flatten([createSagas(performerSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/performer/sagas.ts"],"names":["flatten","put","createSagas","performerService","getList","getListFail","getListSuccess","getProfile","getProfileFail","getProfileSuccess","performerSagas","on","worker","data","resp","search","payload","e","error","Promise","resolve","findOne"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,SACEC,OADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,UAJF,EAKEC,cALF,EAMEC,iBANF,QAOO,WAPP;AASA,MAAMC,cAAc,GAAG,CACrB;AACEC,EAAAA,EAAE,EAAEP,OADN;;AAEE,GAAEQ,MAAF,CAASC,IAAT,EAAkC;AAChC,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMX,gBAAgB,CAACY,MAAjB,CAAwBF,IAAI,CAACG,OAA7B,CAAnB;AACA,YAAMf,GAAG,CAACK,cAAc,CAACQ,IAAI,CAACD,IAAN,CAAf,CAAT;AACD,KAHD,CAGE,OAAOI,CAAP,EAAU;AACV,YAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,CAAhB,CAApB;AACA,YAAMhB,GAAG,CAACI,WAAW,CAACa,KAAD,CAAZ,CAAT;AACD;AACF;;AAVH,CADqB,EAarB;AACEP,EAAAA,EAAE,EAAEJ,UADN;;AAEE,GAAEK,MAAF,CAASC,IAAT,EAAkC;AAChC,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMX,gBAAgB,CAACkB,OAAjB,CAAyBR,IAAI,CAACG,OAA9B,CAAnB;AACA,YAAMf,GAAG,CAACQ,iBAAiB,CAACK,IAAI,CAACD,IAAN,CAAlB,CAAT;AACD,KAHD,CAGE,OAAOI,CAAP,EAAU;AACV,YAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,CAAhB,CAApB;AACA,YAAMhB,GAAG,CAACO,cAAc,CAACU,KAAD,CAAf,CAAT;AACD;AACF;;AAVH,CAbqB,CAAvB;AA2BA,eAAelB,OAAO,CAAC,CAACE,WAAW,CAACQ,cAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { performerService } from '@services/index';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  getList,\n  getListFail,\n  getListSuccess,\n  getProfile,\n  getProfileFail,\n  getProfileSuccess\n} from './actions';\n\nconst performerSagas = [\n  {\n    on: getList,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield performerService.search(data.payload);\n        yield put(getListSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(getListFail(error));\n      }\n    }\n  },\n  {\n    on: getProfile,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield performerService.findOne(data.payload);\n        yield put(getProfileSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(getProfileFail(error));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(performerSagas)]);\n"]},"metadata":{},"sourceType":"module"}