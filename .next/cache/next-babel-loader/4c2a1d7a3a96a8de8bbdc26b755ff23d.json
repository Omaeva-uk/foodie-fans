{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent, createRef } from 'react';\nimport { Form, Input, Button, message, Popover } from 'antd';\nimport { SendOutlined, SmileOutlined } from '@ant-design/icons';\nimport { Emotions } from '@components/messages/emotions';\nimport Router from 'next/router';\nimport './comment.less';\nconst {\n  TextArea\n} = Input;\nexport class CommentForm extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"formRef\", void 0);\n\n    _defineProperty(this, \"state\", {\n      text: ''\n    });\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = /*#__PURE__*/createRef();\n  }\n\n  onFinish(values) {\n    const {\n      onSubmit: handleComment,\n      objectId,\n      objectType,\n      creator\n    } = this.props;\n    const data = values;\n\n    if (!creator || !creator._id) {\n      message.error('Please login!');\n      return Router.push('/');\n    }\n\n    if (!data.content) {\n      return message.error('Please add a comment!');\n    }\n\n    if (data.content.length > 150) {\n      return message.error('Comment is over 150 characters');\n    }\n\n    data.objectId = objectId;\n    data.objectType = objectType || 'video';\n    this.formRef.resetFields();\n    return handleComment(data);\n  }\n\n  async onEmojiClick(emoji) {\n    const {\n      creator\n    } = this.props;\n    if (!creator || !creator._id) return;\n    const {\n      text\n    } = this.state;\n    const instance = this.formRef;\n    instance.setFieldsValue({\n      content: `${instance.getFieldValue('content')} ${emoji} `\n    });\n    this.setState({\n      text: `${text} ${emoji} `\n    });\n  }\n\n  render() {\n    const {\n      creator,\n      requesting,\n      isReply,\n      siteName,\n      objectId\n    } = this.props;\n    if (!this.formRef) this.formRef = /*#__PURE__*/createRef();\n    return __jsx(Form, {\n      ref: ref => {\n        this.formRef = ref;\n      },\n      name: \"comment-form\",\n      onFinish: this.onFinish.bind(this),\n      initialValues: {\n        content: ''\n      }\n    }, __jsx(\"div\", {\n      className: \"comment-form\"\n    }, __jsx(\"div\", {\n      className: \"cmt-area\"\n    }, __jsx(Form.Item, {\n      name: \"content\"\n    }, __jsx(TextArea, {\n      disabled: !creator || !creator._id,\n      maxLength: 150,\n      showCount: true,\n      minLength: 1,\n      rows: !isReply ? 2 : 1,\n      placeholder: !isReply ? 'Add a comment here' : 'Add a reply here'\n    })), __jsx(Popover, {\n      key: objectId,\n      className: \"emotion-popover\",\n      content: __jsx(Emotions, {\n        onEmojiClick: this.onEmojiClick.bind(this),\n        siteName: siteName\n      }),\n      title: null,\n      trigger: \"click\"\n    }, __jsx(\"div\", {\n      className: \"grp-emotions\"\n    }, __jsx(SmileOutlined, null)))), __jsx(Button, {\n      className: !isReply ? 'submit-btn' : '',\n      htmlType: \"submit\",\n      disabled: requesting\n    }, !isReply ? __jsx(SendOutlined, null) : 'Reply')));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/comment/comment-form.tsx"],"names":["PureComponent","createRef","Form","Input","Button","message","Popover","SendOutlined","SmileOutlined","Emotions","Router","TextArea","CommentForm","text","componentDidMount","formRef","onFinish","values","onSubmit","handleComment","objectId","objectType","creator","props","data","_id","error","push","content","length","resetFields","onEmojiClick","emoji","state","instance","setFieldsValue","getFieldValue","setState","render","requesting","isReply","siteName","ref","bind"],"mappings":"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","sourcesContent":["import { PureComponent, createRef } from 'react';\nimport {\n  Form, Input, Button, message, Popover\n} from 'antd';\nimport {\n  SendOutlined, SmileOutlined\n} from '@ant-design/icons';\nimport { IUser } from 'src/interfaces';\nimport { Emotions } from '@components/messages/emotions';\nimport { FormInstance } from 'antd/lib/form';\nimport { ICreateComment } from 'src/interfaces/comment';\nimport Router from 'next/router';\nimport './comment.less';\n\ninterface IProps {\n  objectId: string;\n  objectType?: string;\n  onSubmit: Function;\n  creator: IUser;\n  requesting: boolean;\n  isReply?: boolean;\n  siteName?: string;\n}\n\nconst { TextArea } = Input;\n\nexport class CommentForm extends PureComponent<IProps> {\n  formRef: any;\n\n  state = {\n    text: ''\n  }\n\n  componentDidMount() {\n    if (!this.formRef) this.formRef = createRef();\n  }\n\n  onFinish(values: ICreateComment) {\n    const {\n      onSubmit: handleComment, objectId, objectType, creator\n    } = this.props;\n    const data = values;\n    if (!creator || !creator._id) {\n      message.error('Please login!');\n      return Router.push('/');\n    }\n    if (!data.content) {\n      return message.error('Please add a comment!');\n    }\n    if (data.content.length > 150) {\n      return message.error('Comment is over 150 characters');\n    }\n    data.objectId = objectId;\n    data.objectType = objectType || 'video';\n    this.formRef.resetFields();\n    return handleComment(data);\n  }\n\n  async onEmojiClick(emoji) {\n    const { creator } = this.props;\n    if (!creator || !creator._id) return;\n    const { text } = this.state;\n    const instance = this.formRef as FormInstance;\n    instance.setFieldsValue({\n      content: `${instance.getFieldValue('content')} ${emoji} `\n    });\n    this.setState({ text: `${text} ${emoji} ` });\n  }\n\n  render() {\n    const {\n      creator, requesting, isReply, siteName, objectId\n    } = this.props;\n    if (!this.formRef) this.formRef = createRef();\n    return (\n      <Form\n        ref={(ref) => { this.formRef = ref; }}\n        name=\"comment-form\"\n        onFinish={this.onFinish.bind(this)}\n        initialValues={{\n          content: ''\n        }}\n      >\n        <div className=\"comment-form\">\n          <div className=\"cmt-area\">\n            <Form.Item\n              name=\"content\"\n            >\n              <TextArea disabled={!creator || !creator._id} maxLength={150} showCount minLength={1} rows={!isReply ? 2 : 1} placeholder={!isReply ? 'Add a comment here' : 'Add a reply here'} />\n            </Form.Item>\n            <Popover key={objectId} className=\"emotion-popover\" content={<Emotions onEmojiClick={this.onEmojiClick.bind(this)} siteName={siteName} />} title={null} trigger=\"click\">\n              <div className=\"grp-emotions\">\n                <SmileOutlined />\n              </div>\n            </Popover>\n          </div>\n          <Button className={!isReply ? 'submit-btn' : ''} htmlType=\"submit\" disabled={requesting}>\n            {!isReply ? <SendOutlined /> : 'Reply'}\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}