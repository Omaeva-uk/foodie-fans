{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { logout } from '@redux/auth/actions';\nimport { updateCurrentUser, updateUserSuccess, setUpdating, updateCurrentUserAvatar, updateUserFail, updatePasswordSuccess, updatePasswordFail, updateCurrentUserCover, updateBalance } from './actions';\nvar initialState = {\n  current: {\n    _id: null,\n    avatar: '/static/no-avatar.png',\n    cover: null,\n    name: '',\n    email: ''\n  },\n  error: null,\n  updateSuccess: false,\n  updating: false\n};\nvar userReducers = [{\n  on: updateCurrentUser,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n}, {\n  on: updateCurrentUserAvatar,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        avatar: data.payload\n      })\n    });\n  }\n}, {\n  on: updateCurrentUserCover,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        cover: data.payload\n      })\n    });\n  }\n}, {\n  on: updateUserSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload,\n      updateSuccess: true,\n      error: null\n    });\n  }\n}, {\n  on: updateUserFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateUser: null,\n      updateSuccess: false,\n      error: data.payload\n    });\n  }\n}, {\n  on: setUpdating,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updating: data.payload\n    });\n  }\n}, {\n  on: updatePasswordSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: true,\n      updatedPassword: data.payload,\n      error: null\n    });\n  }\n}, {\n  on: updatePasswordFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateSuccess: false,\n      updatedPassword: null,\n      error: data.payload\n    });\n  }\n}, {\n  on: updateBalance,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var token = data.payload.token;\n    nextState.current.balance += token;\n    return _objectSpread({}, nextState);\n  }\n}, {\n  on: logout,\n  reducer: function reducer() {\n    return _objectSpread({}, initialState);\n  }\n}];\nexport default merge({}, createReducers('user', [userReducers], initialState));","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/user/reducers.ts"],"names":["merge","createReducers","logout","updateCurrentUser","updateUserSuccess","setUpdating","updateCurrentUserAvatar","updateUserFail","updatePasswordSuccess","updatePasswordFail","updateCurrentUserCover","updateBalance","initialState","current","_id","avatar","cover","name","email","error","updateSuccess","updating","userReducers","on","reducer","state","data","payload","updateUser","updatedPassword","nextState","token","balance"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,WAHF,EAIEC,uBAJF,EAKEC,cALF,EAMEC,qBANF,EAOEC,kBAPF,EAQEC,sBARF,EASEC,aATF,QAUO,WAVP;AAYA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,IADE;AAEPC,IAAAA,MAAM,EAAE,uBAFD;AAGPC,IAAAA,KAAK,EAAE,IAHA;AAIPC,IAAAA,IAAI,EAAE,EAJC;AAKPC,IAAAA,KAAK,EAAE;AALA,GADU;AAQnBC,EAAAA,KAAK,EAAE,IARY;AASnBC,EAAAA,aAAa,EAAE,KATI;AAUnBC,EAAAA,QAAQ,EAAE;AAVS,CAArB;AAaA,IAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAEpB,iBADN;AAEEqB,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEiC;AAC7B,2CACKD,KADL;AAEEZ,MAAAA,OAAO,EAAEa,IAAI,CAACC;AAFhB;AAID;AAPH,CADmB,EAUnB;AACEJ,EAAAA,EAAE,EAAEjB,uBADN;AAEEkB,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEiC;AAC7B,2CACKD,KADL;AAEEZ,MAAAA,OAAO,kCACFY,KAAK,CAACZ,OADJ;AAELE,QAAAA,MAAM,EAAEW,IAAI,CAACC;AAFR;AAFT;AAOD;AAVH,CAVmB,EAsBnB;AACEJ,EAAAA,EAAE,EAAEb,sBADN;AAEEc,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEiC;AAC7B,2CACKD,KADL;AAEEZ,MAAAA,OAAO,kCACFY,KAAK,CAACZ,OADJ;AAELG,QAAAA,KAAK,EAAEU,IAAI,CAACC;AAFP;AAFT;AAOD;AAVH,CAtBmB,EAkCnB;AACEJ,EAAAA,EAAE,EAAEnB,iBADN;AAEEoB,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEiD;AAC7C,2CACKD,KADL;AAEEZ,MAAAA,OAAO,EAAEa,IAAI,CAACC,OAFhB;AAGEP,MAAAA,aAAa,EAAE,IAHjB;AAIED,MAAAA,KAAK,EAAE;AAJT;AAMD;AATH,CAlCmB,EA6CnB;AACEI,EAAAA,EAAE,EAAEhB,cADN;AAEEiB,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAE+C;AAC3C,2CACKD,KADL;AAEEG,MAAAA,UAAU,EAAE,IAFd;AAGER,MAAAA,aAAa,EAAE,KAHjB;AAIED,MAAAA,KAAK,EAAEO,IAAI,CAACC;AAJd;AAMD;AATH,CA7CmB,EAwDnB;AACEJ,EAAAA,EAAE,EAAElB,WADN;AAEEmB,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEmD;AAC/C,2CACKD,KADL;AAEEJ,MAAAA,QAAQ,EAAEK,IAAI,CAACC;AAFjB;AAID;AAPH,CAxDmB,EAiEnB;AACEJ,EAAAA,EAAE,EAAEf,qBADN;AAEEgB,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAE+C;AAC3C,2CACKD,KADL;AAEEL,MAAAA,aAAa,EAAE,IAFjB;AAGES,MAAAA,eAAe,EAAEH,IAAI,CAACC,OAHxB;AAIER,MAAAA,KAAK,EAAE;AAJT;AAMD;AATH,CAjEmB,EA4EnB;AACEI,EAAAA,EAAE,EAAEd,kBADN;AAEEe,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAE+C;AAC3C,2CACKD,KADL;AAEEL,MAAAA,aAAa,EAAE,KAFjB;AAGES,MAAAA,eAAe,EAAE,IAHnB;AAIEV,MAAAA,KAAK,EAAEO,IAAI,CAACC;AAJd;AAMD;AATH,CA5EmB,EAuFnB;AACEJ,EAAAA,EAAE,EAAEZ,aADN;AAEEa,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEiC;AAC7B,QAAMI,SAAS,qBAAQL,KAAR,CAAf;;AACA,QAAQM,KAAR,GAAkBL,IAAI,CAACC,OAAvB,CAAQI,KAAR;AACAD,IAAAA,SAAS,CAACjB,OAAV,CAAkBmB,OAAlB,IAA6BD,KAA7B;AACA,6BACKD,SADL;AAGD;AATH,CAvFmB,EAkGnB;AACEP,EAAAA,EAAE,EAAErB,MADN;AAEEsB,EAAAA,OAFF,qBAEY;AACR,6BACKZ,YADL;AAGD;AANH,CAlGmB,CAArB;AA4GA,eAAeZ,KAAK,CAAC,EAAD,EAAKC,cAAc,CAAC,MAAD,EAAS,CAACqB,YAAD,CAAT,EAAyBV,YAAzB,CAAnB,CAApB","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction, IUser } from 'src/interfaces';\nimport { logout } from '@redux/auth/actions';\nimport {\n  updateCurrentUser,\n  updateUserSuccess,\n  setUpdating,\n  updateCurrentUserAvatar,\n  updateUserFail,\n  updatePasswordSuccess,\n  updatePasswordFail,\n  updateCurrentUserCover,\n  updateBalance\n} from './actions';\n\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/static/no-avatar.png',\n    cover: null,\n    name: '',\n    email: ''\n  },\n  error: null,\n  updateSuccess: false,\n  updating: false\n};\n\nconst userReducers = [\n  {\n    on: updateCurrentUser,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: data.payload\n      };\n    }\n  },\n  {\n    on: updateCurrentUserAvatar,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          avatar: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateCurrentUserCover,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          cover: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateUserSuccess,\n    reducer(state: any, data: IReduxAction<IUser>) {\n      return {\n        ...state,\n        current: data.payload,\n        updateSuccess: true,\n        error: null\n      };\n    }\n  },\n  {\n    on: updateUserFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateUser: null,\n        updateSuccess: false,\n        error: data.payload\n      };\n    }\n  },\n  {\n    on: setUpdating,\n    reducer(state: any, data: IReduxAction<boolean>) {\n      return {\n        ...state,\n        updating: data.payload\n      };\n    }\n  },\n  {\n    on: updatePasswordSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: true,\n        updatedPassword: data.payload,\n        error: null\n      };\n    }\n  },\n  {\n    on: updatePasswordFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        updateSuccess: false,\n        updatedPassword: null,\n        error: data.payload\n      };\n    }\n  },\n  {\n    on: updateBalance,\n    reducer(state: any, data: any) {\n      const nextState = { ...state };\n      const { token } = data.payload;\n      nextState.current.balance += token;\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: logout,\n    reducer() {\n      return {\n        ...initialState\n      };\n    }\n  }\n];\n\nexport default merge({}, createReducers('user', [userReducers], initialState));\n"]},"metadata":{},"sourceType":"module"}