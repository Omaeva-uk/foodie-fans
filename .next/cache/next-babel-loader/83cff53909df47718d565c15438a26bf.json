{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable no-template-curly-in-string */\nimport { PureComponent } from 'react';\nimport { Form, Button, Select } from 'antd';\nconst layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nconst {\n  Option\n} = Select;\nexport class PerformerBlockCountriesForm extends PureComponent {\n  render() {\n    const {\n      onFinish,\n      blockCountries,\n      updating,\n      countries\n    } = this.props;\n    return __jsx(Form, _extends({}, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish.bind(this),\n      validateMessages: validateMessages,\n      initialValues: blockCountries,\n      labelAlign: \"left\",\n      className: \"account-form\"\n    }), __jsx(Form.Item, {\n      name: \"countryCodes\",\n      label: \"Select countries you want to block\"\n    }, __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\",\n      mode: \"multiple\"\n    }, countries && countries.length > 0 && countries.map(c => __jsx(Option, {\n      value: c.code,\n      label: c.name,\n      key: c.code\n    }, __jsx(\"img\", {\n      alt: \"country_flag\",\n      src: c.flag,\n      width: \"25px\"\n    }), ' ', c.name)))), __jsx(Form.Item, {\n      className: \"text-center\"\n    }, __jsx(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"primary\",\n      loading: updating\n    }, \"Save Changes\")));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/performer/block-countries-form.tsx"],"names":["PureComponent","Form","Button","Select","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","Option","PerformerBlockCountriesForm","render","onFinish","blockCountries","updating","countries","props","bind","length","map","c","code","name","flag"],"mappings":";;;;;AAAA;AACA,SAASA,aAAT,QAA8B,OAA9B;AACA,SACEC,IADF,EACQC,MADR,EACgBC,MADhB,QAEO,MAFP;AAKA,MAAMC,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADG;AAEbC,EAAAA,UAAU,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR;AAFC,CAAf;AAKA,MAAME,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,yBADa;AAEvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,uBADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAFgB;AAMvBA,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AADD;AANe,CAAzB;AAkBA,MAAM;AAAEC,EAAAA;AAAF,IAAaX,MAAnB;AAEA,OAAO,MAAMY,2BAAN,SAA0Cf,aAA1C,CAAgE;AACrEgB,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,QADI;AACMC,MAAAA,cADN;AACsBC,MAAAA,QADtB;AACgCC,MAAAA;AADhC,QAEF,KAAKC,KAFT;AAGA,WACE,MAAC,IAAD,eACMjB,MADN;AAEE,MAAA,IAAI,EAAC,eAFP;AAGE,MAAA,QAAQ,EAAEa,QAAQ,CAACK,IAAT,CAAc,IAAd,CAHZ;AAIE,MAAA,gBAAgB,EAAEd,gBAJpB;AAKE,MAAA,aAAa,EAAEU,cALjB;AAME,MAAA,UAAU,EAAC,MANb;AAOE,MAAA,SAAS,EAAC;AAPZ,QASE,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,IAAI,EAAC,cAAhB;AAA+B,MAAA,KAAK,EAAC;AAArC,OACE,MAAC,MAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,gBAAgB,EAAC,OAFnB;AAGE,MAAA,IAAI,EAAC;AAHP,OAKGE,SAAS,IACDA,SAAS,CAACG,MAAV,GAAmB,CAD3B,IAEQH,SAAS,CAACI,GAAV,CAAeC,CAAD,IACf,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAEA,CAAC,CAACC,IAAjB;AAAuB,MAAA,KAAK,EAAED,CAAC,CAACE,IAAhC;AAAsC,MAAA,GAAG,EAAEF,CAAC,CAACC;AAA7C,OACE;AAAK,MAAA,GAAG,EAAC,cAAT;AAAwB,MAAA,GAAG,EAAED,CAAC,CAACG,IAA/B;AAAqC,MAAA,KAAK,EAAC;AAA3C,MADF,EAEG,GAFH,EAGGH,CAAC,CAACE,IAHL,CADC,CAPX,CADF,CATF,EA0BE,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC;AAArB,OACE,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,QAAQ,EAAC,QAAhC;AAAyC,MAAA,SAAS,EAAC,SAAnD;AAA6D,MAAA,OAAO,EAAER;AAAtE,sBADF,CA1BF,CADF;AAkCD;;AAvCoE","sourcesContent":["/* eslint-disable no-template-curly-in-string */\nimport { PureComponent } from 'react';\nimport {\n  Form, Button, Select\n} from 'antd';\nimport { IBlockCountries, ICountry } from 'src/interfaces';\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }\n};\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\n\ninterface IProps {\n  onFinish: Function;\n  blockCountries?: IBlockCountries;\n  updating?: boolean;\n  countries?: ICountry[];\n}\n\nconst { Option } = Select;\n\nexport class PerformerBlockCountriesForm extends PureComponent<IProps> {\n  render() {\n    const {\n      onFinish, blockCountries, updating, countries\n    } = this.props;\n    return (\n      <Form\n        {...layout}\n        name=\"nest-messages\"\n        onFinish={onFinish.bind(this)}\n        validateMessages={validateMessages}\n        initialValues={blockCountries}\n        labelAlign=\"left\"\n        className=\"account-form\"\n      >\n        <Form.Item name=\"countryCodes\" label=\"Select countries you want to block\">\n          <Select\n            showSearch\n            optionFilterProp=\"label\"\n            mode=\"multiple\"\n          >\n            {countries\n                  && countries.length > 0\n                  && countries.map((c) => (\n                    <Option value={c.code} label={c.name} key={c.code}>\n                      <img alt=\"country_flag\" src={c.flag} width=\"25px\" />\n                      {' '}\n                      {c.name}\n                    </Option>\n                  ))}\n          </Select>\n        </Form.Item>\n        <Form.Item className=\"text-center\">\n          <Button type=\"primary\" htmlType=\"submit\" className=\"primary\" loading={updating}>\n            Save Changes\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}