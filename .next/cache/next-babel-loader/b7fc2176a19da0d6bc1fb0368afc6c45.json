{"ast":null,"code":"import cookie from 'js-cookie';\nimport { APIRequest, TOKEN } from './api-request';\nexport class AuthService extends APIRequest {\n  async login(data) {\n    return this.post('/auth/login', data);\n  }\n\n  async loginTwitter() {\n    return this.get(this.buildUrl('/auth/twitter/login'));\n  }\n\n  async loginGoogle(data) {\n    return this.post('/auth/google/login', data);\n  }\n\n  async callbackLoginTwitter(data) {\n    return this.get(this.buildUrl('/auth/twitter/callback', data));\n  }\n\n  async verifyEmail(data) {\n    return this.post('/auth/email-verification', data);\n  }\n\n  setToken(token, remember = true) {\n    const expired = {\n      expires: !remember ? 1 : 365\n    };\n    cookie.set(TOKEN, token, expired);\n    this.setAuthHeaderToken(token);\n  }\n\n  getToken() {\n    return cookie.get(TOKEN);\n  }\n\n  setTwitterToken(data, role) {\n    cookie.set('oauthToken', data.oauthToken, {\n      expires: 1\n    });\n    cookie.set('oauthTokenSecret', data.oauthTokenSecret, {\n      expires: 1\n    });\n    cookie.set('role', role, {\n      expires: 1\n    });\n  }\n\n  getTwitterToken() {\n    const oauthToken = cookie.get('oauthToken');\n    const oauthTokenSecret = cookie.get('oauthTokenSecret');\n    const role = cookie.get('role');\n    return {\n      oauthToken,\n      oauthTokenSecret,\n      role\n    };\n  }\n\n  removeToken() {\n    cookie.remove(TOKEN);\n  }\n\n  updatePassword(password, source) {\n    return this.put('/auth/users/me/password', {\n      password,\n      source\n    });\n  }\n\n  resetPassword(data) {\n    return this.post('/auth/users/forgot', data);\n  }\n\n  register(data) {\n    return this.post('/auth/users/register', data);\n  }\n\n  registerPerformer(documents, data, onProgress) {\n    return this.upload('/auth/performers/register', documents, {\n      onProgress,\n      customData: data\n    });\n  }\n\n  userSwitchToPerformer(userId) {\n    return this.post(`/auth/users/${userId}/switch-to-performer`);\n  }\n\n}\nexport const authService = new AuthService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/auth.service.ts"],"names":["cookie","APIRequest","TOKEN","AuthService","login","data","post","loginTwitter","get","buildUrl","loginGoogle","callbackLoginTwitter","verifyEmail","setToken","token","remember","expired","expires","set","setAuthHeaderToken","getToken","setTwitterToken","role","oauthToken","oauthTokenSecret","getTwitterToken","removeToken","remove","updatePassword","password","source","put","resetPassword","register","registerPerformer","documents","onProgress","upload","customData","userSwitchToPerformer","userId","authService"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie';\nimport {\n  ILogin, IFanRegister, IForgot, IVerifyEmail\n} from 'src/interfaces';\nimport { APIRequest, TOKEN } from './api-request';\n\nexport class AuthService extends APIRequest {\n  public async login(data: ILogin) {\n    return this.post('/auth/login', data);\n  }\n\n  public async loginTwitter() {\n    return this.get(\n      this.buildUrl('/auth/twitter/login')\n    );\n  }\n\n  public async loginGoogle(data: any) {\n    return this.post('/auth/google/login', data);\n  }\n\n  public async callbackLoginTwitter(data) {\n    return this.get(\n      this.buildUrl('/auth/twitter/callback', data)\n    );\n  }\n\n  public async verifyEmail(data: IVerifyEmail) {\n    return this.post('/auth/email-verification', data);\n  }\n\n  setToken(token: string, remember = true): void {\n    const expired = { expires: !remember ? 1 : 365 };\n    cookie.set(TOKEN, token, expired);\n    this.setAuthHeaderToken(token);\n  }\n\n  getToken(): string {\n    return cookie.get(TOKEN);\n  }\n\n  setTwitterToken(data: any, role: string) {\n    cookie.set('oauthToken', data.oauthToken, { expires: 1 });\n    cookie.set('oauthTokenSecret', data.oauthTokenSecret, { expires: 1 });\n    cookie.set('role', role, { expires: 1 });\n  }\n\n  getTwitterToken() {\n    const oauthToken = cookie.get('oauthToken');\n    const oauthTokenSecret = cookie.get('oauthTokenSecret');\n    const role = cookie.get('role');\n    return { oauthToken, oauthTokenSecret, role };\n  }\n\n  removeToken(): void {\n    cookie.remove(TOKEN);\n  }\n\n  updatePassword(password: string, source?: string) {\n    return this.put('/auth/users/me/password', { password, source });\n  }\n\n  resetPassword(data: IForgot) {\n    return this.post('/auth/users/forgot', data);\n  }\n\n  register(data: IFanRegister) {\n    return this.post('/auth/users/register', data);\n  }\n\n  registerPerformer(documents: {\n    file: File;\n    fieldname: string;\n  }[], data: any, onProgress?: Function) {\n    return this.upload('/auth/performers/register', documents, {\n      onProgress,\n      customData: data\n    });\n  }\n\n  userSwitchToPerformer(userId: string) {\n    return this.post(`/auth/users/${userId}/switch-to-performer`);\n  }\n}\n\nexport const authService = new AuthService();\n"]},"metadata":{},"sourceType":"module"}