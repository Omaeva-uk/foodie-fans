{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { PureComponent } from 'react';\nimport { Table, Button, Tag, Tooltip } from 'antd';\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { formatDate } from '@lib/date';\nimport Link from 'next/link';\nimport { ThumbnailVideo } from './thumbnail-video';\nexport class TableListVideo extends PureComponent {\n  render() {\n    const {\n      dataSource,\n      rowKey,\n      loading,\n      pagination,\n      onChange,\n      onDelete\n    } = this.props;\n    const columns = [{\n      title: 'Thumbnail',\n\n      render(record) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/video',\n            query: {\n              id: record.slug || record._id\n            }\n          },\n          as: `/video/${record.slug || record._id}`\n        }, __jsx(\"a\", null, __jsx(ThumbnailVideo, {\n          video: record\n        })));\n      }\n\n    }, {\n      title: 'Title',\n      dataIndex: 'title',\n\n      render(title, record) {\n        return __jsx(Tooltip, {\n          title: title\n        }, __jsx(\"div\", {\n          style: {\n            maxWidth: 150,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap'\n          }\n        }, __jsx(Link, {\n          href: {\n            pathname: '/video',\n            query: {\n              id: record.slug || record._id\n            }\n          },\n          as: `/video/${record.slug || record._id}`\n        }, __jsx(\"a\", null, title))));\n      }\n\n    }, {\n      title: 'Sale?',\n      dataIndex: 'isSale',\n\n      render(isSale) {\n        switch (isSale) {\n          case true:\n            return __jsx(Tag, {\n              color: \"green\"\n            }, \"Y\");\n\n          case false:\n            return __jsx(Tag, {\n              color: \"red\"\n            }, \"N\");\n\n          default:\n            return __jsx(Tag, {\n              color: \"orange\"\n            }, isSale);\n        }\n      }\n\n    }, {\n      title: 'Schedule?',\n      dataIndex: 'isSchedule',\n\n      render(isSchedule) {\n        switch (isSchedule) {\n          case true:\n            return __jsx(Tag, {\n              color: \"green\"\n            }, \"Y\");\n\n          case false:\n            return __jsx(Tag, {\n              color: \"red\"\n            }, \"N\");\n\n          default:\n            return __jsx(Tag, {\n              color: \"orange\"\n            }, isSchedule);\n        }\n      }\n\n    }, {\n      title: 'Status',\n      dataIndex: 'status',\n\n      render(status) {\n        switch (status) {\n          case 'active':\n            return __jsx(Tag, {\n              color: \"success\"\n            }, \"Active\");\n\n          case 'inactive':\n            return __jsx(Tag, {\n              color: \"orange\"\n            }, \"Inactive\");\n\n          default:\n            return __jsx(Tag, {\n              color: \"red\"\n            }, status);\n        }\n      }\n\n    }, {\n      title: 'Updated On',\n      dataIndex: 'updatedAt',\n      sorter: true,\n\n      render(date) {\n        return __jsx(\"span\", null, formatDate(date));\n      }\n\n    }, {\n      title: 'Action',\n      dataIndex: '_id',\n      render: id => __jsx(\"div\", {\n        style: {\n          whiteSpace: 'nowrap'\n        }\n      }, __jsx(Button, {\n        className: \"info\"\n      }, __jsx(Link, {\n        href: {\n          pathname: '/model/my-video/update',\n          query: {\n            id\n          }\n        },\n        as: `/model/my-video/update?id=${id}`\n      }, __jsx(\"a\", null, __jsx(EditOutlined, null)))), __jsx(Button, {\n        onClick: onDelete.bind(this, id),\n        className: \"danger\"\n      }, __jsx(DeleteOutlined, null)))\n    }];\n    return __jsx(\"div\", {\n      className: \"table-responsive\"\n    }, __jsx(Table, {\n      dataSource: dataSource,\n      columns: columns,\n      rowKey: rowKey,\n      loading: loading,\n      pagination: pagination,\n      onChange: onChange.bind(this)\n    }));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/video/table-list.tsx"],"names":["PureComponent","Table","Button","Tag","Tooltip","EditOutlined","DeleteOutlined","formatDate","Link","ThumbnailVideo","TableListVideo","render","dataSource","rowKey","loading","pagination","onChange","onDelete","props","columns","title","record","pathname","query","id","slug","_id","dataIndex","maxWidth","overflow","textOverflow","whiteSpace","isSale","isSchedule","status","sorter","date","bind"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport {\n  Table, Button, Tag, Tooltip\n} from 'antd';\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { formatDate } from '@lib/date';\nimport Link from 'next/link';\nimport { ThumbnailVideo } from './thumbnail-video';\n\ninterface IProps {\n  dataSource: [];\n  rowKey: string;\n  loading: boolean;\n  pagination: {};\n  onChange: Function;\n  onDelete: Function;\n}\n\nexport class TableListVideo extends PureComponent<IProps> {\n  render() {\n    const {\n      dataSource,\n      rowKey,\n      loading,\n      pagination,\n      onChange,\n      onDelete\n    } = this.props;\n    const columns = [\n      {\n        title: 'Thumbnail',\n        render(record: any) {\n          return (\n            <Link href={{ pathname: '/video', query: { id: record.slug || record._id } }} as={`/video/${record.slug || record._id}`}><a><ThumbnailVideo video={record} /></a></Link>\n          );\n        }\n      },\n      {\n        title: 'Title',\n        dataIndex: 'title',\n        render(title: string, record: any) {\n          return (\n            <Tooltip title={title}>\n              <div style={{\n                maxWidth: 150, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'\n              }}\n              >\n                <Link href={{ pathname: '/video', query: { id: record.slug || record._id } }} as={`/video/${record.slug || record._id}`}>\n                  <a>{title}</a>\n                </Link>\n              </div>\n            </Tooltip>\n          );\n        }\n      },\n      {\n        title: 'Sale?',\n        dataIndex: 'isSale',\n        render(isSale: boolean) {\n          switch (isSale) {\n            case true:\n              return <Tag color=\"green\">Y</Tag>;\n            case false:\n              return <Tag color=\"red\">N</Tag>;\n            default: return <Tag color=\"orange\">{isSale}</Tag>;\n          }\n        }\n      },\n      {\n        title: 'Schedule?',\n        dataIndex: 'isSchedule',\n        render(isSchedule: boolean) {\n          switch (isSchedule) {\n            case true:\n              return <Tag color=\"green\">Y</Tag>;\n            case false:\n              return <Tag color=\"red\">N</Tag>;\n            default: return <Tag color=\"orange\">{isSchedule}</Tag>;\n          }\n        }\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        render(status: string) {\n          switch (status) {\n            case 'active':\n              return <Tag color=\"success\">Active</Tag>;\n            case 'inactive':\n              return <Tag color=\"orange\">Inactive</Tag>;\n            default:\n              return <Tag color=\"red\">{status}</Tag>;\n          }\n        }\n      },\n      {\n        title: 'Updated On',\n        dataIndex: 'updatedAt',\n        sorter: true,\n        render(date: Date) {\n          return <span>{formatDate(date)}</span>;\n        }\n      },\n      {\n        title: 'Action',\n        dataIndex: '_id',\n        render: (id: string) => (\n          <div style={{ whiteSpace: 'nowrap' }}>\n            <Button className=\"info\">\n              <Link\n                href={{\n                  pathname: '/model/my-video/update',\n                  query: { id }\n                }}\n                as={`/model/my-video/update?id=${id}`}\n              >\n                <a>\n                  <EditOutlined />\n                </a>\n              </Link>\n            </Button>\n            <Button onClick={onDelete.bind(this, id)} className=\"danger\">\n              <DeleteOutlined />\n            </Button>\n          </div>\n        )\n      }\n    ];\n\n    return (\n      <div className=\"table-responsive\">\n        <Table\n          dataSource={dataSource}\n          columns={columns}\n          rowKey={rowKey}\n          loading={loading}\n          pagination={pagination}\n          onChange={onChange.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}