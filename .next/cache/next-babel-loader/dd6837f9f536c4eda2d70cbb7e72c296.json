{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten, pick } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport { loginSocial, login, loginSuccess, logout, loginFail, registerFanFail, registerFan, registerFanSuccess, registerPerformerFail, registerPerformer, registerPerformerSuccess, forgot, forgotSuccess, forgotFail, getCurrentUser } from './actions';\nvar authSagas = [{\n  on: login,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _userResp$data, _userResp$data2, payload, resp, userResp, error;\n\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            payload = data.payload;\n            _context.next = 4;\n            return authService.login(payload);\n\n          case 4:\n            resp = _context.sent.data;\n            _context.next = 7;\n            return authService.setToken(resp.token, payload === null || payload === void 0 ? void 0 : payload.remember);\n\n          case 7:\n            _context.next = 9;\n            return userService.me();\n\n          case 9:\n            userResp = _context.sent;\n            _context.next = 12;\n            return put(updateCurrentUser(userResp.data));\n\n          case 12:\n            _context.next = 14;\n            return put(loginSuccess());\n\n          case 14:\n            if (!(userResp !== null && userResp !== void 0 && (_userResp$data = userResp.data) !== null && _userResp$data !== void 0 && _userResp$data.isPerformer)) {\n              Router.push(!userResp.data.email || !userResp.data.username ? '/user/account' : '/home');\n            }\n\n            if (userResp !== null && userResp !== void 0 && (_userResp$data2 = userResp.data) !== null && _userResp$data2 !== void 0 && _userResp$data2.isPerformer) {\n              !userResp.data.email || !userResp.data.username ? Router.push('/model/account') : Router.push({\n                pathname: '/model/profile',\n                query: {\n                  username: userResp.data.username || userResp.data._id\n                }\n              }, \"/\".concat(userResp.data.username || userResp.data._id));\n            }\n\n            _context.next = 26;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 22;\n            return Promise.resolve(_context.t0);\n\n          case 22:\n            error = _context.sent;\n            message.error((error === null || error === void 0 ? void 0 : error.message) || 'Incorrect credentials!');\n            _context.next = 26;\n            return put(loginFail(error));\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 18]]);\n  })\n}, {\n  on: loginSocial,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _userResp$data3, _userResp$data4, payload, token, userResp, error;\n\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            payload = data.payload;\n            token = payload.token;\n            _context2.next = 5;\n            return authService.setToken(token);\n\n          case 5:\n            _context2.next = 7;\n            return userService.me();\n\n          case 7:\n            userResp = _context2.sent;\n            _context2.next = 10;\n            return put(updateCurrentUser(userResp.data));\n\n          case 10:\n            _context2.next = 12;\n            return put(loginSuccess());\n\n          case 12:\n            if (!(userResp !== null && userResp !== void 0 && (_userResp$data3 = userResp.data) !== null && _userResp$data3 !== void 0 && _userResp$data3.isPerformer)) {\n              Router.push(!userResp.data.email || !userResp.data.username ? '/user/account' : '/home');\n            }\n\n            if (userResp !== null && userResp !== void 0 && (_userResp$data4 = userResp.data) !== null && _userResp$data4 !== void 0 && _userResp$data4.isPerformer) {\n              !userResp.data.email || !userResp.data.username ? Router.push('/model/account') : Router.push({\n                pathname: '/model/profile',\n                query: {\n                  username: userResp.data.username || userResp.data._id\n                }\n              }, \"/\".concat(userResp.data.username || userResp.data._id));\n            }\n\n            _context2.next = 24;\n            break;\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 20;\n            return Promise.resolve(_context2.t0);\n\n          case 20:\n            error = _context2.sent;\n            message.error((error === null || error === void 0 ? void 0 : error.message) || 'Incorrect credentials!');\n            _context2.next = 24;\n            return put(loginFail(error));\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 16]]);\n  })\n}, {\n  on: registerFan,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            payload = data.payload;\n            _context3.next = 4;\n            return authService.register(payload);\n\n          case 4:\n            resp = _context3.sent.data;\n            message.success((resp === null || resp === void 0 ? void 0 : resp.message) || 'Sign up success!', 10);\n            Router.push('/');\n            _context3.next = 9;\n            return put(registerFanSuccess(resp));\n\n          case 9:\n            _context3.next = 19;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 15;\n            return Promise.resolve(_context3.t0);\n\n          case 15:\n            error = _context3.sent;\n            message.error((error === null || error === void 0 ? void 0 : error.message) || 'This Username or email address has been already taken.', 5);\n            _context3.next = 19;\n            return put(registerFanFail(error));\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 11]]);\n  })\n}, {\n  on: registerPerformer,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var verificationFiles, payload, resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            verificationFiles = [{\n              fieldname: 'idVerification',\n              file: data.payload.idVerificationFile\n            }, {\n              fieldname: 'documentVerification',\n              file: data.payload.documentVerificationFile\n            }];\n            payload = pick(data.payload, ['name', 'username', 'password', 'gender', 'email', 'firstName', 'lastName', 'country', 'dateOfBirth']);\n            _context4.next = 5;\n            return authService.registerPerformer(verificationFiles, payload, function () {});\n\n          case 5:\n            resp = _context4.sent.data;\n            _context4.next = 8;\n            return put(registerPerformerSuccess(resp));\n\n          case 8:\n            _context4.next = 18;\n            break;\n\n          case 10:\n            _context4.prev = 10;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 14;\n            return Promise.resolve(_context4.t0);\n\n          case 14:\n            error = _context4.sent;\n            message.error(error.message || 'An error occured, please try again later');\n            _context4.next = 18;\n            return put(registerPerformerFail(error));\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: logout,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return authService.removeToken();\n\n          case 2:\n            Router.replace('/');\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker);\n  })\n}, {\n  on: forgot,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            payload = data.payload;\n            _context6.next = 4;\n            return authService.resetPassword(payload);\n\n          case 4:\n            resp = _context6.sent.data;\n            message.success('We\\'ve sent an email to reset your password, please check your inbox.', 10);\n            _context6.next = 8;\n            return put(forgotSuccess(resp));\n\n          case 8:\n            _context6.next = 18;\n            break;\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](0);\n            _context6.next = 14;\n            return Promise.resolve(_context6.t0);\n\n          case 14:\n            error = _context6.sent;\n            message.error(error && error.message || 'Something went wrong. Please try again later', 5);\n            _context6.next = 18;\n            return put(forgotFail(error));\n\n          case 18:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getCurrentUser,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    var userResp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return userService.me();\n\n          case 3:\n            userResp = _context7.sent;\n            _context7.next = 6;\n            return put(updateCurrentUser(userResp.data));\n\n          case 6:\n            _context7.next = 14;\n            break;\n\n          case 8:\n            _context7.prev = 8;\n            _context7.t0 = _context7[\"catch\"](0);\n            _context7.next = 12;\n            return Promise.resolve(_context7.t0);\n\n          case 12:\n            error = _context7.sent;\n            // eslint-disable-next-line no-console\n            console.log(error);\n\n          case 14:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}];\nexport default flatten([createSagas(authSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/auth/sagas.ts"],"names":["flatten","pick","put","createSagas","Router","authService","userService","message","updateCurrentUser","loginSocial","login","loginSuccess","logout","loginFail","registerFanFail","registerFan","registerFanSuccess","registerPerformerFail","registerPerformer","registerPerformerSuccess","forgot","forgotSuccess","forgotFail","getCurrentUser","authSagas","on","worker","data","payload","resp","setToken","token","remember","me","userResp","isPerformer","push","email","username","pathname","query","_id","Promise","resolve","error","register","success","verificationFiles","fieldname","file","idVerificationFile","documentVerificationFile","removeToken","replace","resetPassword","console","log"],"mappings":"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","sourcesContent":["import { flatten, pick } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport {\n  ILogin, IFanRegister, IForgot\n} from 'src/interfaces';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport {\n  loginSocial,\n  login,\n  loginSuccess,\n  logout,\n  loginFail,\n  registerFanFail,\n  registerFan,\n  registerFanSuccess,\n  registerPerformerFail,\n  registerPerformer,\n  registerPerformerSuccess,\n  forgot,\n  forgotSuccess,\n  forgotFail,\n  getCurrentUser\n} from './actions';\n\nconst authSagas = [\n  {\n    on: login,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.login(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setToken(resp.token, payload?.remember);\n        const userResp = yield userService.me();\n        yield put(updateCurrentUser(userResp.data));\n        yield put(loginSuccess());\n        if (!userResp?.data?.isPerformer) {\n          Router.push((!userResp.data.email || !userResp.data.username) ? '/user/account' : '/home');\n        }\n        if (userResp?.data?.isPerformer) {\n          (!userResp.data.email || !userResp.data.username) ? Router.push('/model/account') : Router.push({ pathname: '/model/profile', query: { username: userResp.data.username || userResp.data._id } }, `/${userResp.data.username || userResp.data._id}`);\n        }\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Incorrect credentials!');\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: loginSocial,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as any;\n        const { token } = payload;\n        yield authService.setToken(token);\n        const userResp = yield userService.me();\n        yield put(updateCurrentUser(userResp.data));\n        yield put(loginSuccess());\n        if (!userResp?.data?.isPerformer) {\n          Router.push((!userResp.data.email || !userResp.data.username) ? '/user/account' : '/home');\n        }\n        if (userResp?.data?.isPerformer) {\n          (!userResp.data.email || !userResp.data.username) ? Router.push('/model/account') : Router.push({ pathname: '/model/profile', query: { username: userResp.data.username || userResp.data._id } }, `/${userResp.data.username || userResp.data._id}`);\n        }\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Incorrect credentials!');\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: registerFan,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as IFanRegister;\n        const resp = (yield authService.register(payload)).data;\n        message.success(resp?.message || 'Sign up success!', 10);\n        Router.push('/');\n        yield put(registerFanSuccess(resp));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'This Username or email address has been already taken.', 5);\n        yield put(registerFanFail(error));\n      }\n    }\n  },\n  {\n    on: registerPerformer,\n    * worker(data: any) {\n      try {\n        const verificationFiles = [{\n          fieldname: 'idVerification',\n          file: data.payload.idVerificationFile\n        }, {\n          fieldname: 'documentVerification',\n          file: data.payload.documentVerificationFile\n        }];\n        const payload = pick(data.payload, ['name', 'username', 'password',\n          'gender', 'email', 'firstName', 'lastName', 'country', 'dateOfBirth']);\n        const resp = (yield authService.registerPerformer(verificationFiles, payload, () => {})).data;\n        yield put(registerPerformerSuccess(resp));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error.message || 'An error occured, please try again later');\n        yield put(registerPerformerFail(error));\n      }\n    }\n  },\n  {\n    on: logout,\n    * worker() {\n      yield authService.removeToken();\n      Router.replace('/');\n    }\n  },\n  {\n    on: forgot,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as IForgot;\n        const resp = (yield authService.resetPassword(payload)).data;\n        message.success(\n          'We\\'ve sent an email to reset your password, please check your inbox.',\n          10\n        );\n        yield put(forgotSuccess(resp));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error((error && error.message) || 'Something went wrong. Please try again later', 5);\n        yield put(forgotFail(error));\n      }\n    }\n  },\n  {\n    on: getCurrentUser,\n    * worker() {\n      try {\n        const userResp = yield userService.me();\n        yield put(updateCurrentUser(userResp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(authSagas)]);\n"]},"metadata":{},"sourceType":"module"}