{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { updateSettings } from './actions'; // TODO -\n\nvar initialState = {\n  requireEmailVerification: false,\n  googleReCaptchaSiteKey: '',\n  enableGoogleReCaptcha: false,\n  googleClientId: '',\n  tokenConversionRate: 1,\n  stripePublishableKey: '',\n  paymentGateway: 'stripe'\n};\nvar settingReducers = [{\n  on: updateSettings,\n  reducer: function reducer(state, data) {\n    return _objectSpread({}, data.payload);\n  }\n}];\nexport default merge({}, createReducers('settings', [settingReducers], initialState));","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/settings/reducers.ts"],"names":["merge","createReducers","updateSettings","initialState","requireEmailVerification","googleReCaptchaSiteKey","enableGoogleReCaptcha","googleClientId","tokenConversionRate","stripePublishableKey","paymentGateway","settingReducers","on","reducer","state","data","payload"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,cAAT,QAA+B,WAA/B,C,CAEA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,wBAAwB,EAAE,KADP;AAEnBC,EAAAA,sBAAsB,EAAE,EAFL;AAGnBC,EAAAA,qBAAqB,EAAE,KAHJ;AAInBC,EAAAA,cAAc,EAAE,EAJG;AAKnBC,EAAAA,mBAAmB,EAAE,CALF;AAMnBC,EAAAA,oBAAoB,EAAE,EANH;AAOnBC,EAAAA,cAAc,EAAE;AAPG,CAArB;AAUA,IAAMC,eAAe,GAAG,CACtB;AACEC,EAAAA,EAAE,EAAEV,cADN;AAEEW,EAAAA,OAFF,mBAEUC,KAFV,EAEsBC,IAFtB,EAEiC;AAC7B,6BACKA,IAAI,CAACC,OADV;AAGD;AANH,CADsB,CAAxB;AAWA,eAAehB,KAAK,CAAC,EAAD,EAAKC,cAAc,CAAC,UAAD,EAAa,CAACU,eAAD,CAAb,EAAgCR,YAAhC,CAAnB,CAApB","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { updateSettings } from './actions';\n\n// TODO -\nconst initialState = {\n  requireEmailVerification: false,\n  googleReCaptchaSiteKey: '',\n  enableGoogleReCaptcha: false,\n  googleClientId: '',\n  tokenConversionRate: 1,\n  stripePublishableKey: '',\n  paymentGateway: 'stripe'\n};\n\nconst settingReducers = [\n  {\n    on: updateSettings,\n    reducer(state: any, data: any) {\n      return {\n        ...data.payload\n      };\n    }\n  }\n];\n\nexport default merge({}, createReducers('settings', [settingReducers], initialState));\n"]},"metadata":{},"sourceType":"module"}