{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  // const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n  // if (!isJpgOrPng) {\n  //   message.error(\"You can only upload JPG/PNG file!\");\n  // }\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n\n  if (!isLt2M) {\n    message.error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n  }\n\n  return isLt2M;\n}\n\nexport class AvatarUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false,\n      imageUrl: '/static/no-avatar.png'\n    });\n\n    _defineProperty(this, \"handleChange\", info => {\n      const {\n        onUploaded\n      } = this.props;\n\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, imageUrl => {\n          this.setState({\n            imageUrl,\n            loading: false\n          });\n          onUploaded && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"onPreview\", async file => {\n      let src = file.url;\n\n      if (!src) {\n        src = await new Promise(resolve => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file.originFileObj);\n\n          reader.onload = () => resolve(reader.result);\n        });\n      }\n\n      const image = new Image();\n      image.src = src;\n      const imgWindow = window.open(src);\n      imgWindow.document.write(image.outerHTML);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      image\n    } = this.props;\n\n    if (image) {\n      this.setState({\n        imageUrl: image\n      });\n    }\n  }\n\n  render() {\n    const {\n      loading\n    } = this.state;\n    const {\n      imageUrl\n    } = this.state;\n    const {\n      headers,\n      uploadUrl\n    } = this.props;\n    return __jsx(ImgCrop, {\n      rotate: true,\n      shape: \"round\",\n      quality: 1,\n      modalTitle: \"Edit Avatar\",\n      modalWidth: 767\n    }, __jsx(Upload, {\n      accept: \"image/*\",\n      name: \"avatar\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: uploadUrl,\n      beforeUpload: beforeUpload,\n      onChange: this.handleChange,\n      onPreview: this.onPreview,\n      headers: headers\n    }, __jsx(\"img\", {\n      src: imageUrl,\n      alt: \"avatar\",\n      style: {\n        width: '100%',\n        height: '100%',\n        maxWidth: 104,\n        maxHeight: 104\n      }\n    }), loading ? __jsx(LoadingOutlined, null) : __jsx(CameraOutlined, null)));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/user/avatar-upload.tsx"],"names":["PureComponent","Upload","message","LoadingOutlined","CameraOutlined","ImgCrop","getGlobalConfig","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","AvatarUpload","loading","imageUrl","info","onUploaded","props","status","setState","originFileObj","response","base64","src","url","Promise","resolve","onload","image","Image","imgWindow","window","open","document","write","outerHTML","componentDidMount","render","state","headers","uploadUrl","handleChange","onPreview","width","height","maxWidth","maxHeight"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  // const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n  // if (!isJpgOrPng) {\n  //   message.error(\"You can only upload JPG/PNG file!\");\n  // }\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n  if (!isLt2M) {\n    message.error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n  }\n  return isLt2M;\n}\n\ninterface IState {\n  loading: boolean;\n  imageUrl: string;\n}\n\ninterface IProps {\n  image?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n}\n\nexport class AvatarUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    imageUrl: '/static/no-avatar.png'\n  };\n\n  componentDidMount() {\n    const { image } = this.props;\n    if (image) {\n      this.setState({ imageUrl: image });\n    }\n  }\n\n  handleChange = (info) => {\n    const { onUploaded } = this.props;\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, (imageUrl) => {\n        this.setState({\n          imageUrl,\n          loading: false\n        });\n        onUploaded\n          && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n      });\n    }\n  };\n\n  onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  render() {\n    const { loading } = this.state;\n    const { imageUrl } = this.state;\n    const { headers, uploadUrl } = this.props;\n    return (\n      <ImgCrop rotate shape=\"round\" quality={1} modalTitle=\"Edit Avatar\" modalWidth={767}>\n        <Upload\n          accept=\"image/*\"\n          name=\"avatar\"\n          listType=\"picture-card\"\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          action={uploadUrl}\n          beforeUpload={beforeUpload}\n          onChange={this.handleChange}\n          onPreview={this.onPreview}\n          headers={headers}\n        >\n          <img\n            src={imageUrl}\n            alt=\"avatar\"\n            style={{\n              width: '100%', height: '100%', maxWidth: 104, maxHeight: 104\n            }}\n          />\n          {loading ? <LoadingOutlined /> : <CameraOutlined />}\n        </Upload>\n      </ImgCrop>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}