{"ast":null,"code":"var __jsx = React.createElement;\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport { Avatar, message, Modal, Spin, Button } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { paymentService } from '@services/payment.service';\nimport { hideSubscribePerformerModal } from '@redux/subscription/actions';\nimport { CheckSquareOutlined } from '@ant-design/icons';\nimport { TickIcon } from 'src/icons';\nexport const SubscribePerformerModal = ({\n  onSubscribed\n}) => {\n  const {\n    0: performer,\n    1: setPerformer\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: submiting,\n    1: setSubmiting\n  } = useState();\n  const currentUser = useSelector(state => state.user.current);\n  const settings = useSelector(state => state.settings);\n  const subscription = useSelector(state => state.subscription);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetctPerformer = async () => {\n      try {\n        setLoading(true);\n        const resp = await performerService.findOne(subscription.subscribingPerformerId);\n        setPerformer(resp.data);\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    subscription.subscribingPerformerId && fetctPerformer();\n  }, [subscription.subscribingPerformerId]);\n\n  const subscribe = async subscriptionType => {\n    if (!currentUser._id) {\n      message.error('Please log in!');\n      Router.push('/');\n      return;\n    }\n\n    if (settings.paymentGateway === 'stripe' && !currentUser.stripeCardIds.length) {\n      message.error('Please add a payment card');\n      Router.push('/user/cards');\n      return;\n    }\n\n    try {\n      setSubmiting(true);\n      const resp = await paymentService.subscribePerformer({\n        type: subscriptionType,\n        performerId: performer._id,\n        paymentGateway: settings.paymentGateway\n      });\n\n      if (settings.paymentGateway === 'ccbill') {\n        var _resp$data;\n\n        window.location.href = resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.paymentUrl;\n      } else {\n        setSubmiting(false);\n        dispatch(hideSubscribePerformerModal());\n        onSubscribed && onSubscribed((performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id));\n      }\n    } catch (e) {\n      const err = await e;\n      message.error(err.message || 'error occured, please try again later');\n    }\n  };\n\n  const onCancel = () => {\n    dispatch(hideSubscribePerformerModal());\n  };\n\n  return __jsx(Modal, {\n    visible: subscription.showModal,\n    destroyOnClose: true,\n    centered: true,\n    width: 770,\n    footer: null,\n    onCancel: onCancel\n  }, loading && __jsx(\"div\", {\n    style: {\n      margin: 30,\n      textAlign: 'center'\n    }\n  }, __jsx(Spin, null)), __jsx(\"div\", {\n    className: \"confirm-purchase-form\"\n  }, __jsx(\"div\", {\n    className: \"left-col\"\n  }, __jsx(Avatar, {\n    src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'\n  }), __jsx(\"div\", {\n    className: \"p-name\"\n  }, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', ' ', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(TickIcon, {\n    className: \"primary-color\"\n  })), __jsx(\"div\", {\n    className: \"p-username\"\n  }, \"@\", (performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a'), __jsx(\"img\", {\n    className: \"lock-icon\",\n    src: \"/static/lock-icon.png\",\n    alt: \"lock\"\n  })), __jsx(\"div\", {\n    className: \"right-col\"\n  }, __jsx(\"h2\", null, \"Subscribe\", ' ', __jsx(\"span\", {\n    className: \"username\"\n  }, `@${performer === null || performer === void 0 ? void 0 : performer.username}` || 'the model')), __jsx(\"h3\", null, __jsx(\"span\", {\n    className: \"price\"\n  }, ((performer === null || performer === void 0 ? void 0 : performer.monthlyPrice) || 0).toFixed(2)), ' ', \"USD/month\"), __jsx(\"ul\", {\n    className: \"check-list\"\n  }, __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Full access to this model's exclusive content\"), __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Direct message with this model\"), __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Requested personalised Pay Per View content\"), __jsx(\"li\", null, __jsx(CheckSquareOutlined, null), ' ', \"Cancel your subscription at any time\")), __jsx(Button, {\n    className: \"primary\",\n    disabled: submiting,\n    loading: submiting,\n    onClick: () => subscribe('monthly')\n  }, \"SUBSCRIBE\"), __jsx(\"p\", {\n    className: \"sub-text\"\n  }, \"Clicking \\\"Subscribe\\\" will take you to the payment screen to finalize you subscription\"))));\n};\nSubscribePerformerModal.defaultProps = {\n  onSubscribed: null\n};","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/subscription/subscribe-performer-modal.tsx"],"names":["getResponseError","performerService","Avatar","message","Modal","Spin","Button","React","useEffect","useState","useDispatch","useSelector","Router","paymentService","hideSubscribePerformerModal","CheckSquareOutlined","TickIcon","SubscribePerformerModal","onSubscribed","performer","setPerformer","loading","setLoading","submiting","setSubmiting","currentUser","state","user","current","settings","subscription","dispatch","fetctPerformer","resp","findOne","subscribingPerformerId","data","e","error","Promise","resolve","subscribe","subscriptionType","_id","push","paymentGateway","stripeCardIds","length","subscribePerformer","type","performerId","window","location","href","paymentUrl","username","err","onCancel","showModal","margin","textAlign","avatar","name","verifiedAccount","monthlyPrice","toFixed","defaultProps"],"mappings":"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","sourcesContent":["import { IPerformer } from '@interfaces/performer';\nimport { getResponseError } from '@lib/utils';\nimport { performerService } from '@services/performer.service';\nimport {\n  Avatar, message, Modal, Spin, Button\n} from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport { paymentService } from '@services/payment.service';\nimport { hideSubscribePerformerModal } from '@redux/subscription/actions';\nimport { CheckSquareOutlined } from '@ant-design/icons';\nimport { TickIcon } from 'src/icons';\n\ntype Props = {\n  onSubscribed?: Function;\n}\n\nexport const SubscribePerformerModal: React.FC<Props> = ({ onSubscribed }: Props) => {\n  const [performer, setPerformer] = useState<IPerformer>();\n  const [loading, setLoading] = useState(false);\n  const [submiting, setSubmiting] = useState<boolean>();\n  const currentUser = useSelector((state: any) => state.user.current);\n  const settings = useSelector((state: any) => state.settings);\n  const subscription = useSelector((state: any) => state.subscription);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetctPerformer = async () => {\n      try {\n        setLoading(true);\n        const resp = await performerService.findOne(\n          subscription.subscribingPerformerId\n        );\n        setPerformer(resp.data);\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    subscription.subscribingPerformerId && fetctPerformer();\n  }, [subscription.subscribingPerformerId]);\n\n  const subscribe = async (subscriptionType: string) => {\n    if (!currentUser._id) {\n      message.error('Please log in!');\n      Router.push('/');\n      return;\n    }\n    if (settings.paymentGateway === 'stripe' && !currentUser.stripeCardIds.length) {\n      message.error('Please add a payment card');\n      Router.push('/user/cards');\n      return;\n    }\n    try {\n      setSubmiting(true);\n      const resp = await paymentService.subscribePerformer({\n        type: subscriptionType,\n        performerId: performer._id,\n        paymentGateway: settings.paymentGateway\n      });\n      if (settings.paymentGateway === 'ccbill') {\n        window.location.href = resp?.data?.paymentUrl;\n      } else {\n        setSubmiting(false);\n        dispatch(hideSubscribePerformerModal());\n        onSubscribed && onSubscribed(performer?.username || performer?._id);\n      }\n    } catch (e) {\n      const err = await e;\n      message.error(err.message || 'error occured, please try again later');\n    }\n  };\n\n  const onCancel = () => {\n    dispatch(hideSubscribePerformerModal());\n  };\n\n  return (\n    <Modal\n      visible={subscription.showModal}\n      destroyOnClose\n      centered\n      width={770}\n      footer={null}\n      onCancel={onCancel}\n    >\n      {loading && <div style={{ margin: 30, textAlign: 'center' }}><Spin /></div>}\n      <div className=\"confirm-purchase-form\">\n        <div className=\"left-col\">\n          <Avatar src={performer?.avatar || '/static/no-avatar.png'} />\n          <div className=\"p-name\">\n            {performer?.name || 'N/A'}\n            {' '}\n            {performer?.verifiedAccount && <TickIcon className=\"primary-color\" />}\n          </div>\n          <div className=\"p-username\">\n            @\n            {performer?.username || 'n/a'}\n          </div>\n          <img className=\"lock-icon\" src=\"/static/lock-icon.png\" alt=\"lock\" />\n        </div>\n        <div className=\"right-col\">\n          <h2>\n            Subscribe\n            {' '}\n            <span className=\"username\">{`@${performer?.username}` || 'the model'}</span>\n          </h2>\n          <h3>\n            <span className=\"price\">{(performer?.monthlyPrice || 0).toFixed(2)}</span>\n            {' '}\n            USD/month\n          </h3>\n          <ul className=\"check-list\">\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Full access to this model&apos;s exclusive content\n            </li>\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Direct message with this model\n            </li>\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Requested personalised Pay Per View content\n            </li>\n            <li>\n              <CheckSquareOutlined />\n              {' '}\n              Cancel your subscription at any time\n            </li>\n          </ul>\n          <Button\n            className=\"primary\"\n            disabled={submiting}\n            loading={submiting}\n            onClick={() => subscribe('monthly')}\n          >\n            SUBSCRIBE\n          </Button>\n          <p className=\"sub-text\">Clicking &quot;Subscribe&quot; will take you to the payment screen to finalize you subscription</p>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nSubscribePerformerModal.defaultProps = {\n  onSubscribed: null\n};\n"]},"metadata":{},"sourceType":"module"}