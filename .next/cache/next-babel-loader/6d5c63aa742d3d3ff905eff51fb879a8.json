{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nexport var VideoService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(VideoService, _APIRequest);\n\n  var _super = _createSuper(VideoService);\n\n  function VideoService() {\n    _classCallCheck(this, VideoService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VideoService, [{\n    key: \"search\",\n    value: function search(query) {\n      return this.get(this.buildUrl('/performer/performer-assets/videos/search', query));\n    }\n  }, {\n    key: \"userSearch\",\n    value: function userSearch(query) {\n      return this.get(this.buildUrl('/user/performer-assets/videos/search', query));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id) {\n      return this.del(\"/performer/performer-assets/videos/\".concat(id));\n    }\n  }, {\n    key: \"findById\",\n    value: function findById(id, headers) {\n      return this.get(\"/performer/performer-assets/videos/\".concat(id, \"/view\"), headers);\n    }\n  }, {\n    key: \"findOne\",\n    value: function findOne(id, headers) {\n      return this.get(\"/user/performer-assets/videos/\".concat(id), headers);\n    }\n  }, {\n    key: \"update\",\n    value: function update(id, files, payload, onProgress) {\n      return this.upload(\"/performer/performer-assets/videos/edit/\".concat(id), files, {\n        onProgress: onProgress,\n        customData: payload,\n        method: 'PUT'\n      });\n    }\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(id, type) {\n      return this.del(\"/performer/performer-assets/videos/remove-file/\".concat(id), {\n        type: type\n      });\n    }\n  }, {\n    key: \"uploadVideo\",\n    value: function uploadVideo(files, payload, onProgress) {\n      return this.upload('/performer/performer-assets/videos/upload', files, {\n        onProgress: onProgress,\n        customData: payload\n      });\n    }\n  }, {\n    key: \"getBookmarks\",\n    value: function getBookmarks(payload) {\n      return this.get(this.buildUrl('/reactions/videos/bookmark', payload));\n    }\n  }]);\n\n  return VideoService;\n}(APIRequest);\nexport var videoService = new VideoService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/video.service.ts"],"names":["APIRequest","VideoService","query","get","buildUrl","id","del","headers","files","payload","onProgress","upload","customData","method","type","videoService"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA,WAAaC,YAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,gBAAOC,KAAP,EAAuC;AACrC,aAAO,KAAKC,GAAL,CACL,KAAKC,QAAL,CAAc,2CAAd,EAA2DF,KAA3D,CADK,CAAP;AAGD;AALH;AAAA;AAAA,WAOE,oBAAWA,KAAX,EAA2C;AACzC,aAAO,KAAKC,GAAL,CACL,KAAKC,QAAL,CAAc,sCAAd,EAAsDF,KAAtD,CADK,CAAP;AAGD;AAXH;AAAA;AAAA,WAaE,iBAAOG,EAAP,EAAmB;AACjB,aAAO,KAAKC,GAAL,8CAA+CD,EAA/C,EAAP;AACD;AAfH;AAAA;AAAA,WAiBE,kBAASA,EAAT,EAAqBE,OAArB,EAA0D;AACxD,aAAO,KAAKJ,GAAL,8CAA+CE,EAA/C,YAA0DE,OAA1D,CAAP;AACD;AAnBH;AAAA;AAAA,WAqBE,iBAAQF,EAAR,EAAoBE,OAApB,EAAyD;AACvD,aAAO,KAAKJ,GAAL,yCAA0CE,EAA1C,GAAgDE,OAAhD,CAAP;AACD;AAvBH;AAAA;AAAA,WAyBE,gBAAOF,EAAP,EAAmBG,KAAnB,EAA+DC,OAA/D,EAA6EC,UAA7E,EAAoG;AAClG,aAAO,KAAKC,MAAL,mDAAuDN,EAAvD,GAA6DG,KAA7D,EAAoE;AACzEE,QAAAA,UAAU,EAAVA,UADyE;AAEzEE,QAAAA,UAAU,EAAEH,OAF6D;AAGzEI,QAAAA,MAAM,EAAE;AAHiE,OAApE,CAAP;AAKD;AA/BH;AAAA;AAAA,WAiCE,oBAAWR,EAAX,EAAuBS,IAAvB,EAAqC;AACnC,aAAO,KAAKR,GAAL,0DAA2DD,EAA3D,GAAiE;AAAES,QAAAA,IAAI,EAAJA;AAAF,OAAjE,CAAP;AACD;AAnCH;AAAA;AAAA,WAqCE,qBACEN,KADF,EAEEC,OAFF,EAGEC,UAHF,EAIE;AACA,aAAO,KAAKC,MAAL,CAAY,2CAAZ,EAAyDH,KAAzD,EAAgE;AACrEE,QAAAA,UAAU,EAAVA,UADqE;AAErEE,QAAAA,UAAU,EAAEH;AAFyD,OAAhE,CAAP;AAID;AA9CH;AAAA;AAAA,WAgDE,sBAAaA,OAAb,EAAsB;AACpB,aAAO,KAAKN,GAAL,CAAS,KAAKC,QAAL,CAAc,4BAAd,EAA4CK,OAA5C,CAAT,CAAP;AACD;AAlDH;;AAAA;AAAA,EAAkCT,UAAlC;AAqDA,OAAO,IAAMe,YAAY,GAAG,IAAId,YAAJ,EAArB","sourcesContent":["import { APIRequest } from './api-request';\n\nexport class VideoService extends APIRequest {\n  search(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/videos/search', query)\n    );\n  }\n\n  userSearch(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/user/performer-assets/videos/search', query)\n    );\n  }\n\n  delete(id: string) {\n    return this.del(`/performer/performer-assets/videos/${id}`);\n  }\n\n  findById(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);\n  }\n\n  findOne(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/user/performer-assets/videos/${id}`, headers);\n  }\n\n  update(id: string, files: [{ fieldname: string; file: File }], payload: any, onProgress?: Function) {\n    return this.upload(`/performer/performer-assets/videos/edit/${id}`, files, {\n      onProgress,\n      customData: payload,\n      method: 'PUT'\n    });\n  }\n\n  deleteFile(id: string, type: string) {\n    return this.del(`/performer/performer-assets/videos/remove-file/${id}`, { type });\n  }\n\n  uploadVideo(\n    files: [{ fieldname: string; file: File }],\n    payload: any,\n    onProgress?: Function\n  ) {\n    return this.upload('/performer/performer-assets/videos/upload', files, {\n      onProgress,\n      customData: payload\n    });\n  }\n\n  getBookmarks(payload) {\n    return this.get(this.buildUrl('/reactions/videos/bookmark', payload));\n  }\n}\n\nexport const videoService = new VideoService();\n"]},"metadata":{},"sourceType":"module"}