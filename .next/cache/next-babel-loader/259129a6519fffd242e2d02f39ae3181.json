{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-template-curly-in-string */\nimport { PureComponent } from 'react';\nimport { Form, Button, Select } from 'antd';\nvar layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nvar validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nvar Option = Select.Option;\nexport var PerformerBlockCountriesForm = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PerformerBlockCountriesForm, _PureComponent);\n\n  var _super = _createSuper(PerformerBlockCountriesForm);\n\n  function PerformerBlockCountriesForm() {\n    _classCallCheck(this, PerformerBlockCountriesForm);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PerformerBlockCountriesForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onFinish = _this$props.onFinish,\n          blockCountries = _this$props.blockCountries,\n          updating = _this$props.updating,\n          countries = _this$props.countries;\n      return __jsx(Form, _extends({}, layout, {\n        name: \"nest-messages\",\n        onFinish: onFinish.bind(this),\n        validateMessages: validateMessages,\n        initialValues: blockCountries,\n        labelAlign: \"left\",\n        className: \"account-form\"\n      }), __jsx(Form.Item, {\n        name: \"countryCodes\",\n        label: \"Select countries you want to block\"\n      }, __jsx(Select, {\n        showSearch: true,\n        optionFilterProp: \"label\",\n        mode: \"multiple\"\n      }, countries && countries.length > 0 && countries.map(function (c) {\n        return __jsx(Option, {\n          value: c.code,\n          label: c.name,\n          key: c.code\n        }, __jsx(\"img\", {\n          alt: \"country_flag\",\n          src: c.flag,\n          width: \"25px\"\n        }), ' ', c.name);\n      }))), __jsx(Form.Item, {\n        className: \"text-center\"\n      }, __jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        className: \"primary\",\n        loading: updating\n      }, \"Save Changes\")));\n    }\n  }]);\n\n  return PerformerBlockCountriesForm;\n}(PureComponent);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/performer/block-countries-form.tsx"],"names":["PureComponent","Form","Button","Select","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","Option","PerformerBlockCountriesForm","props","onFinish","blockCountries","updating","countries","bind","length","map","c","code","name","flag"],"mappings":";;;;;;;;;;;;;AAAA;AACA,SAASA,aAAT,QAA8B,OAA9B;AACA,SACEC,IADF,EACQC,MADR,EACgBC,MADhB,QAEO,MAFP;AAKA,IAAMC,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADG;AAEbC,EAAAA,UAAU,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR;AAFC,CAAf;AAKA,IAAME,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE,yBADa;AAEvBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,uBADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAFgB;AAMvBA,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AADD;AANe,CAAzB;AAkBA,IAAQC,MAAR,GAAmBX,MAAnB,CAAQW,MAAR;AAEA,WAAaC,2BAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,kBAAS;AACP,wBAEI,KAAKC,KAFT;AAAA,UACEC,QADF,eACEA,QADF;AAAA,UACYC,cADZ,eACYA,cADZ;AAAA,UAC4BC,QAD5B,eAC4BA,QAD5B;AAAA,UACsCC,SADtC,eACsCA,SADtC;AAGA,aACE,MAAC,IAAD,eACMhB,MADN;AAEE,QAAA,IAAI,EAAC,eAFP;AAGE,QAAA,QAAQ,EAAEa,QAAQ,CAACI,IAAT,CAAc,IAAd,CAHZ;AAIE,QAAA,gBAAgB,EAAEb,gBAJpB;AAKE,QAAA,aAAa,EAAEU,cALjB;AAME,QAAA,UAAU,EAAC,MANb;AAOE,QAAA,SAAS,EAAC;AAPZ,UASE,MAAC,IAAD,CAAM,IAAN;AAAW,QAAA,IAAI,EAAC,cAAhB;AAA+B,QAAA,KAAK,EAAC;AAArC,SACE,MAAC,MAAD;AACE,QAAA,UAAU,MADZ;AAEE,QAAA,gBAAgB,EAAC,OAFnB;AAGE,QAAA,IAAI,EAAC;AAHP,SAKGE,SAAS,IACDA,SAAS,CAACE,MAAV,GAAmB,CAD3B,IAEQF,SAAS,CAACG,GAAV,CAAc,UAACC,CAAD;AAAA,eACf,MAAC,MAAD;AAAQ,UAAA,KAAK,EAAEA,CAAC,CAACC,IAAjB;AAAuB,UAAA,KAAK,EAAED,CAAC,CAACE,IAAhC;AAAsC,UAAA,GAAG,EAAEF,CAAC,CAACC;AAA7C,WACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,GAAG,EAAED,CAAC,CAACG,IAA/B;AAAqC,UAAA,KAAK,EAAC;AAA3C,UADF,EAEG,GAFH,EAGGH,CAAC,CAACE,IAHL,CADe;AAAA,OAAd,CAPX,CADF,CATF,EA0BE,MAAC,IAAD,CAAM,IAAN;AAAW,QAAA,SAAS,EAAC;AAArB,SACE,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAyC,QAAA,SAAS,EAAC,SAAnD;AAA6D,QAAA,OAAO,EAAEP;AAAtE,wBADF,CA1BF,CADF;AAkCD;AAvCH;;AAAA;AAAA,EAAiDnB,aAAjD","sourcesContent":["/* eslint-disable no-template-curly-in-string */\nimport { PureComponent } from 'react';\nimport {\n  Form, Button, Select\n} from 'antd';\nimport { IBlockCountries, ICountry } from 'src/interfaces';\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }\n};\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\n\ninterface IProps {\n  onFinish: Function;\n  blockCountries?: IBlockCountries;\n  updating?: boolean;\n  countries?: ICountry[];\n}\n\nconst { Option } = Select;\n\nexport class PerformerBlockCountriesForm extends PureComponent<IProps> {\n  render() {\n    const {\n      onFinish, blockCountries, updating, countries\n    } = this.props;\n    return (\n      <Form\n        {...layout}\n        name=\"nest-messages\"\n        onFinish={onFinish.bind(this)}\n        validateMessages={validateMessages}\n        initialValues={blockCountries}\n        labelAlign=\"left\"\n        className=\"account-form\"\n      >\n        <Form.Item name=\"countryCodes\" label=\"Select countries you want to block\">\n          <Select\n            showSearch\n            optionFilterProp=\"label\"\n            mode=\"multiple\"\n          >\n            {countries\n                  && countries.length > 0\n                  && countries.map((c) => (\n                    <Option value={c.code} label={c.name} key={c.code}>\n                      <img alt=\"country_flag\" src={c.flag} width=\"25px\" />\n                      {' '}\n                      {c.name}\n                    </Option>\n                  ))}\n          </Select>\n        </Form.Item>\n        <Form.Item className=\"text-center\">\n          <Button type=\"primary\" htmlType=\"submit\" className=\"primary\" loading={updating}>\n            Save Changes\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}