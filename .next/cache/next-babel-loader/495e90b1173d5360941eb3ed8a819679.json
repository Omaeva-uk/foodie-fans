{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, EditOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener('load', function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  var config = getGlobalConfig();\n  var isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n\n  if (!isLt2M) {\n    message.error(\"Cover must be less than \".concat(config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5, \"MB\"));\n  }\n\n  return isLt2M;\n}\n\nexport var CoverUpload = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CoverUpload, _PureComponent);\n\n  var _super = _createSuper(CoverUpload);\n\n  function CoverUpload() {\n    var _this;\n\n    _classCallCheck(this, CoverUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      var onUploaded = _this.props.onUploaded;\n\n      if (info.file.status === 'uploading') {\n        _this.setState({\n          loading: true\n        });\n\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, function (imageUrl) {\n          _this.setState({\n            loading: false\n          });\n\n          onUploaded && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPreview\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n        var src, image, imgWindow;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                src = file.url;\n\n                if (src) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return new Promise(function (resolve) {\n                  var reader = new FileReader();\n                  reader.readAsDataURL(file.originFileObj);\n\n                  reader.onload = function () {\n                    return resolve(reader.result);\n                  };\n                });\n\n              case 4:\n                src = _context.sent;\n\n              case 5:\n                image = new Image();\n                image.src = src;\n                imgWindow = window.open(src);\n                imgWindow.document.write(image.outerHTML);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(CoverUpload, [{\n    key: \"render\",\n    value: function render() {\n      var loading = this.state.loading;\n      var _this$props = this.props,\n          headers = _this$props.headers,\n          uploadUrl = _this$props.uploadUrl,\n          options = _this$props.options;\n      return __jsx(ImgCrop, {\n        aspect: 4.5 / 1,\n        shape: \"rect\",\n        quality: 1,\n        modalTitle: \"Edit cover image\",\n        modalWidth: 767\n      }, __jsx(Upload, {\n        accept: \"image/*\",\n        name: options.fieldName || 'file',\n        listType: \"picture-card\",\n        showUploadList: false,\n        action: uploadUrl,\n        beforeUpload: beforeUpload,\n        onChange: this.handleChange,\n        onPreview: this.onPreview,\n        headers: headers\n      }, loading ? __jsx(LoadingOutlined, null) : __jsx(EditOutlined, null), ' ', \"Edit cover\"));\n    }\n  }]);\n\n  return CoverUpload;\n}(PureComponent);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/user/cover-upload.tsx"],"names":["PureComponent","Upload","message","LoadingOutlined","EditOutlined","ImgCrop","getGlobalConfig","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","CoverUpload","loading","info","onUploaded","props","status","setState","originFileObj","imageUrl","response","base64","src","url","Promise","resolve","onload","image","Image","imgWindow","window","open","document","write","outerHTML","state","headers","uploadUrl","options","fieldName","handleChange","onPreview"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, EditOutlined } from '@ant-design/icons';\nimport ImgCrop from 'antd-img-crop';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n  if (!isLt2M) {\n    message.error(`Cover must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);\n  }\n  return isLt2M;\n}\n\ninterface IState {\n  loading: boolean;\n}\n\ninterface IProps {\n  image?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  options?: any;\n}\n\nexport class CoverUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false\n  };\n\n  handleChange = (info) => {\n    const { onUploaded } = this.props;\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, (imageUrl) => {\n        this.setState({\n          loading: false\n        });\n        onUploaded\n          && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n      });\n    }\n  };\n\n  onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  render() {\n    const { loading } = this.state;\n    const { headers, uploadUrl, options } = this.props;\n    return (\n      <ImgCrop aspect={4.5 / 1} shape=\"rect\" quality={1} modalTitle=\"Edit cover image\" modalWidth={767}>\n        <Upload\n          accept=\"image/*\"\n          name={options.fieldName || 'file'}\n          listType=\"picture-card\"\n          showUploadList={false}\n          action={uploadUrl}\n          beforeUpload={beforeUpload}\n          onChange={this.handleChange}\n          onPreview={this.onPreview}\n          headers={headers}\n        >\n          {loading ? <LoadingOutlined /> : <EditOutlined />}\n          {' '}\n          Edit cover\n        </Upload>\n      </ImgCrop>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}