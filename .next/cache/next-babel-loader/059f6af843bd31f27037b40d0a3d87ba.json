{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent } from 'react';\nimport { Carousel, Spin, Image } from 'antd';\nimport { VideoPlayer } from '@components/common/video-player';\nimport { AudioPlayer } from '@components/common/audio-player';\nimport './index.less';\n\nvar FeedSlider = /*#__PURE__*/function (_PureComponent) {\n  _inherits(FeedSlider, _PureComponent);\n\n  var _super = _createSuper(FeedSlider);\n\n  function FeedSlider() {\n    _classCallCheck(this, FeedSlider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FeedSlider, [{\n    key: \"render\",\n    value: function render() {\n      var feed = this.props.feed;\n      var images = feed.files && feed.files.filter(function (f) {\n        return f.type === 'feed-photo';\n      });\n      var videos = feed.files && feed.files.filter(function (f) {\n        return f.type === 'feed-video';\n      });\n      var audios = feed.files && feed.files.filter(function (f) {\n        return f.type === 'feed-audio';\n      });\n      var processing = false;\n      videos && videos.forEach(function (f) {\n        if (f.status !== 'finished') {\n          processing = true;\n        }\n      });\n      audios && audios.forEach(function (f) {\n        if (f.status !== 'finished') {\n          processing = true;\n        }\n      });\n      return __jsx(\"div\", {\n        className: feed.type === 'audio' ? 'feed-slider custom' : 'feed-slider'\n      }, !processing && feed.files && feed.files.length && __jsx(React.Fragment, null, images && images.length > 0 && __jsx(Image.PreviewGroup, null, __jsx(Carousel, {\n        adaptiveHeight: true,\n        effect: \"fade\",\n        draggable: true,\n        swipe: true,\n        swipeToSlide: true,\n        arrows: true,\n        dots: false,\n        infinite: true\n      }, images.map(function (img) {\n        return __jsx(Image, {\n          preview: {\n            maskClosable: false\n          },\n          key: img._id,\n          src: img.url,\n          fallback: \"/static/no-image.jpg\",\n          title: img.name,\n          width: \"100%\",\n          alt: \"img\"\n        });\n      }))), videos && videos.length > 0 && videos.map(function (vid) {\n        var _feed$thumbnail;\n\n        return __jsx(VideoPlayer, {\n          key: vid._id,\n          autoplay: false,\n          controls: true,\n          playsinline: true,\n          poster: feed === null || feed === void 0 ? void 0 : (_feed$thumbnail = feed.thumbnail) === null || _feed$thumbnail === void 0 ? void 0 : _feed$thumbnail.url,\n          fluid: true,\n          sources: [{\n            src: vid.url,\n            type: 'video/mp4'\n          }]\n        });\n      }), audios && audios.length > 0 && audios.map(function (audio) {\n        return __jsx(AudioPlayer, {\n          key: audio._id,\n          source: audio === null || audio === void 0 ? void 0 : audio.url\n        });\n      })), processing && __jsx(\"div\", {\n        className: \"proccessing\"\n      }, __jsx(Spin, null), __jsx(\"p\", null, \"Your media is currently proccessing\")));\n    }\n  }]);\n\n  return FeedSlider;\n}(PureComponent);\n\nexport { FeedSlider as default };","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/post/post-slider.tsx"],"names":["PureComponent","Carousel","Spin","Image","VideoPlayer","AudioPlayer","FeedSlider","feed","props","images","files","filter","f","type","videos","audios","processing","forEach","status","length","map","img","maskClosable","_id","url","name","vid","autoplay","controls","playsinline","poster","thumbnail","fluid","sources","src","audio"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SACEC,QADF,EACYC,IADZ,EACkBC,KADlB,QAEO,MAFP;AAGA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA,OAAO,cAAP;;IAMqBC,U;;;;;;;;;;;;;WACnB,kBAAS;AACP,UAAQC,IAAR,GAAiB,KAAKC,KAAtB,CAAQD,IAAR;AACA,UAAME,MAAM,GAAGF,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACG,KAAL,CAAWC,MAAX,CAAkB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,IAAF,KAAW,YAAlB;AAAA,OAAlB,CAA7B;AACA,UAAMC,MAAM,GAAGP,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACG,KAAL,CAAWC,MAAX,CAAkB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,IAAF,KAAW,YAAlB;AAAA,OAAlB,CAA7B;AACA,UAAME,MAAM,GAAGR,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACG,KAAL,CAAWC,MAAX,CAAkB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,IAAF,KAAW,YAAlB;AAAA,OAAlB,CAA7B;AACA,UAAIG,UAAU,GAAG,KAAjB;AACAF,MAAAA,MAAM,IAAIA,MAAM,CAACG,OAAP,CAAe,UAACL,CAAD,EAAO;AAC9B,YAAIA,CAAC,CAACM,MAAF,KAAa,UAAjB,EAA6B;AAC3BF,UAAAA,UAAU,GAAG,IAAb;AACD;AACF,OAJS,CAAV;AAKAD,MAAAA,MAAM,IAAIA,MAAM,CAACE,OAAP,CAAe,UAACL,CAAD,EAAO;AAC9B,YAAIA,CAAC,CAACM,MAAF,KAAa,UAAjB,EAA6B;AAC3BF,UAAAA,UAAU,GAAG,IAAb;AACD;AACF,OAJS,CAAV;AAMA,aACE;AAAK,QAAA,SAAS,EAAET,IAAI,CAACM,IAAL,KAAc,OAAd,GAAwB,oBAAxB,GAA+C;AAA/D,SACG,CAACG,UAAD,IAAeT,IAAI,CAACG,KAApB,IAA6BH,IAAI,CAACG,KAAL,CAAWS,MAAxC,IACC,4BACGV,MAAM,IAAIA,MAAM,CAACU,MAAP,GAAgB,CAA1B,IACC,MAAC,KAAD,CAAO,YAAP,QACE,MAAC,QAAD;AACE,QAAA,cAAc,MADhB;AAEE,QAAA,MAAM,EAAC,MAFT;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,KAAK,MAJP;AAKE,QAAA,YAAY,MALd;AAME,QAAA,MAAM,MANR;AAOE,QAAA,IAAI,EAAE,KAPR;AAQE,QAAA,QAAQ;AARV,SAUGV,MAAM,CAACW,GAAP,CAAW,UAACC,GAAD;AAAA,eACV,MAAC,KAAD;AACE,UAAA,OAAO,EAAE;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WADX;AAEE,UAAA,GAAG,EAAED,GAAG,CAACE,GAFX;AAGE,UAAA,GAAG,EAAEF,GAAG,CAACG,GAHX;AAIE,UAAA,QAAQ,EAAC,sBAJX;AAKE,UAAA,KAAK,EAAEH,GAAG,CAACI,IALb;AAME,UAAA,KAAK,EAAC,MANR;AAOE,UAAA,GAAG,EAAC;AAPN,UADU;AAAA,OAAX,CAVH,CADF,CAFJ,EA2BGX,MAAM,IAAIA,MAAM,CAACK,MAAP,GAAgB,CAA1B,IAA+BL,MAAM,CAACM,GAAP,CAAW,UAACM,GAAD;AAAA;;AAAA,eACzC,MAAC,WAAD;AACE,UAAA,GAAG,EAAEA,GAAG,CAACH,GADX;AAGII,UAAAA,QAAQ,EAAE,KAHd;AAIIC,UAAAA,QAAQ,EAAE,IAJd;AAKIC,UAAAA,WAAW,EAAE,IALjB;AAMIC,UAAAA,MAAM,EAAEvB,IAAF,aAAEA,IAAF,0CAAEA,IAAI,CAAEwB,SAAR,oDAAE,gBAAiBP,GAN7B;AAOIQ,UAAAA,KAAK,EAAE,IAPX;AAQIC,UAAAA,OAAO,EAAE,CACP;AACEC,YAAAA,GAAG,EAAER,GAAG,CAACF,GADX;AAEEX,YAAAA,IAAI,EAAE;AAFR,WADO;AARb,UADyC;AAAA,OAAX,CA3BlC,EA6CGE,MAAM,IAAIA,MAAM,CAACI,MAAP,GAAgB,CAA1B,IAA+BJ,MAAM,CAACK,GAAP,CAAW,UAACe,KAAD;AAAA,eAAW,MAAC,WAAD;AAAa,UAAA,GAAG,EAAEA,KAAK,CAACZ,GAAxB;AAA6B,UAAA,MAAM,EAAEY,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEX;AAA5C,UAAX;AAAA,OAAX,CA7ClC,CAFJ,EAkDGR,UAAU,IACT;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,IAAD,OADF,EAEE,uDAFF,CAnDJ,CADF;AA2DD;;;;EA7EqChB,a;;SAAnBM,U","sourcesContent":["import { PureComponent } from 'react';\nimport {\n  Carousel, Spin, Image\n} from 'antd';\nimport { VideoPlayer } from '@components/common/video-player';\nimport { AudioPlayer } from '@components/common/audio-player';\nimport { IFeed } from '@interfaces/feed';\nimport './index.less';\n\ninterface IProps {\n  feed: IFeed;\n}\n\nexport default class FeedSlider extends PureComponent<IProps> {\n  render() {\n    const { feed } = this.props;\n    const images = feed.files && feed.files.filter((f) => f.type === 'feed-photo');\n    const videos = feed.files && feed.files.filter((f) => f.type === 'feed-video');\n    const audios = feed.files && feed.files.filter((f) => f.type === 'feed-audio');\n    let processing = false;\n    videos && videos.forEach((f) => {\n      if (f.status !== 'finished') {\n        processing = true;\n      }\n    });\n    audios && audios.forEach((f) => {\n      if (f.status !== 'finished') {\n        processing = true;\n      }\n    });\n\n    return (\n      <div className={feed.type === 'audio' ? 'feed-slider custom' : 'feed-slider'}>\n        {!processing && feed.files && feed.files.length && (\n          <>\n            {images && images.length > 0 && (\n              <Image.PreviewGroup>\n                <Carousel\n                  adaptiveHeight\n                  effect=\"fade\"\n                  draggable\n                  swipe\n                  swipeToSlide\n                  arrows\n                  dots={false}\n                  infinite\n                >\n                  {images.map((img) => (\n                    <Image\n                      preview={{ maskClosable: false }}\n                      key={img._id}\n                      src={img.url}\n                      fallback=\"/static/no-image.jpg\"\n                      title={img.name}\n                      width=\"100%\"\n                      alt=\"img\"\n                    />\n                  ))}\n                </Carousel>\n              </Image.PreviewGroup>\n            )}\n            {videos && videos.length > 0 && videos.map((vid) => (\n              <VideoPlayer\n                key={vid._id}\n                {...{\n                  autoplay: false,\n                  controls: true,\n                  playsinline: true,\n                  poster: feed?.thumbnail?.url,\n                  fluid: true,\n                  sources: [\n                    {\n                      src: vid.url,\n                      type: 'video/mp4'\n                    }\n                  ]\n                }}\n              />\n            ))}\n            {audios && audios.length > 0 && audios.map((audio) => <AudioPlayer key={audio._id} source={audio?.url} />)}\n          </>\n        )}\n        {processing && (\n          <div className=\"proccessing\">\n            <Spin />\n            <p>Your media is currently proccessing</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}