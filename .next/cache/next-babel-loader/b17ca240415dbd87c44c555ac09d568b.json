{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent, createRef } from 'react';\nimport { Form, Input, Button, Row, Col, Select } from 'antd';\nimport { utilsService } from 'src/services';\nconst {\n  Option\n} = Select;\nconst layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    // eslint-disable-next-line no-template-curly-in-string\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nexport class PerformerBankingForm extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      states: [],\n      cities: []\n    });\n\n    _defineProperty(this, \"formRef\", void 0);\n\n    _defineProperty(this, \"handleGetStates\", async countryCode => {\n      const {\n        user\n      } = this.props;\n      const resp = await utilsService.statesList(countryCode);\n      await this.setState({\n        states: resp.data\n      });\n      const eState = resp.data.find(s => {\n        var _user$bankingInformat;\n\n        return s === (user === null || user === void 0 ? void 0 : (_user$bankingInformat = user.bankingInformation) === null || _user$bankingInformat === void 0 ? void 0 : _user$bankingInformat.state);\n      });\n\n      if (eState) {\n        this.formRef.setFieldsValue({\n          state: eState\n        });\n      } else {\n        this.formRef.setFieldsValue({\n          state: '',\n          city: ''\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleGetCities\", async (state, countryCode) => {\n      const {\n        user\n      } = this.props;\n      const resp = await utilsService.citiesList(countryCode, state);\n      await this.setState({\n        cities: resp.data\n      });\n      const eCity = resp.data.find(s => {\n        var _user$bankingInformat2;\n\n        return s === (user === null || user === void 0 ? void 0 : (_user$bankingInformat2 = user.bankingInformation) === null || _user$bankingInformat2 === void 0 ? void 0 : _user$bankingInformat2.city);\n      });\n\n      if (eCity) {\n        this.formRef.setFieldsValue({\n          city: eCity\n        });\n      } else {\n        this.formRef.setFieldsValue({\n          city: ''\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    var _user$bankingInformat3;\n\n    const {\n      user\n    } = this.props;\n\n    if (user !== null && user !== void 0 && (_user$bankingInformat3 = user.bankingInformation) !== null && _user$bankingInformat3 !== void 0 && _user$bankingInformat3.country) {\n      var _user$bankingInformat4, _user$bankingInformat5;\n\n      this.handleGetStates(user === null || user === void 0 ? void 0 : (_user$bankingInformat4 = user.bankingInformation) === null || _user$bankingInformat4 === void 0 ? void 0 : _user$bankingInformat4.country);\n\n      if (user !== null && user !== void 0 && (_user$bankingInformat5 = user.bankingInformation) !== null && _user$bankingInformat5 !== void 0 && _user$bankingInformat5.state) {\n        var _user$bankingInformat6, _user$bankingInformat7;\n\n        this.handleGetCities(user === null || user === void 0 ? void 0 : (_user$bankingInformat6 = user.bankingInformation) === null || _user$bankingInformat6 === void 0 ? void 0 : _user$bankingInformat6.state, user === null || user === void 0 ? void 0 : (_user$bankingInformat7 = user.bankingInformation) === null || _user$bankingInformat7 === void 0 ? void 0 : _user$bankingInformat7.country);\n      }\n    }\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = /*#__PURE__*/createRef();\n    const {\n      onFinish,\n      user,\n      updating,\n      countries\n    } = this.props;\n    const {\n      states,\n      cities\n    } = this.state;\n    return __jsx(Form, _extends({}, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish.bind(this),\n      validateMessages: validateMessages,\n      initialValues: user === null || user === void 0 ? void 0 : user.bankingInformation,\n      labelAlign: \"left\",\n      className: \"account-form\",\n      ref: ref => {\n        this.formRef = ref;\n      }\n    }), __jsx(Row, null, __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      label: \"First name\",\n      name: \"firstName\",\n      rules: [{\n        required: true,\n        message: 'Please input your first name!'\n      }]\n    }, __jsx(Input, {\n      placeholder: \"First name\"\n    }))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"lastName\",\n      label: \"Last name\",\n      rules: [{\n        required: true,\n        message: 'Please input your last name!'\n      }]\n    }, __jsx(Input, {\n      placeholder: \"Last name\"\n    }))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"bankName\",\n      label: \"Bank name\",\n      rules: [{\n        required: true,\n        message: 'Please input your bank name!'\n      }]\n    }, __jsx(Input, {\n      placeholder: \"Bank name\"\n    }))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"bankAccount\",\n      label: \"Bank Account\",\n      rules: [{\n        required: true,\n        message: 'Please input your bank account!'\n      }]\n    }, __jsx(Input, {\n      placeholder: \"Bank account\"\n    }))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"country\",\n      label: \"Country\",\n      rules: [{\n        required: true,\n        message: 'Please choose country!'\n      }]\n    }, __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\",\n      onChange: val => this.handleGetStates(val)\n    }, countries.map(c => __jsx(Option, {\n      key: c.code,\n      value: c.code,\n      label: c.name\n    }, __jsx(\"img\", {\n      alt: \"flag\",\n      src: c === null || c === void 0 ? void 0 : c.flag,\n      width: \"20px\"\n    }), ' ', c.name))))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"state\",\n      label: \"State\"\n    }, __jsx(Select, {\n      placeholder: \"Select your state\",\n      optionFilterProp: \"label\",\n      showSearch: true,\n      onChange: val => this.handleGetCities(val, this.formRef.getFieldValue('country'))\n    }, states.map(state => __jsx(Option, {\n      value: state,\n      label: state,\n      key: state\n    }, state))))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"city\",\n      label: \"City\"\n    }, __jsx(Select, {\n      placeholder: \"Select your city\",\n      showSearch: true,\n      optionFilterProp: \"label\"\n    }, cities.map(city => __jsx(Option, {\n      value: city,\n      label: city,\n      key: city\n    }, city))))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"address\",\n      label: \"Address\"\n    }, __jsx(Input, {\n      placeholder: \"Address\"\n    }))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"bankRouting\",\n      label: \"Bank Routing\"\n    }, __jsx(Input, {\n      placeholder: \"Bank routing\"\n    }))), __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 12\n    }, __jsx(Form.Item, {\n      name: \"bankSwiftCode\",\n      label: \"Bank swift code\"\n    }, __jsx(Input, {\n      placeholder: \"Bank swift code\"\n    })))), __jsx(Form.Item, {\n      className: \"text-center\"\n    }, __jsx(Button, {\n      className: \"primary\",\n      htmlType: \"submit\",\n      loading: updating,\n      disabled: updating\n    }, \"Save Changes\")));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/performer/banking-form.tsx"],"names":["PureComponent","createRef","Form","Input","Button","Row","Col","Select","utilsService","Option","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","PerformerBankingForm","states","cities","countryCode","user","props","resp","statesList","setState","data","eState","find","s","bankingInformation","state","formRef","setFieldsValue","city","citiesList","eCity","componentDidMount","country","handleGetStates","handleGetCities","render","onFinish","updating","countries","bind","ref","message","val","map","c","code","name","flag","getFieldValue"],"mappings":"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","sourcesContent":["import { PureComponent, createRef } from 'react';\nimport {\n  Form, Input, Button, Row, Col, Select\n} from 'antd';\nimport { utilsService } from 'src/services';\nimport { IPerformer, ICountry } from 'src/interfaces';\n\nconst { Option } = Select;\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }\n};\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    // eslint-disable-next-line no-template-curly-in-string\n    range: 'Must be between ${min} and ${max}'\n  }\n};\n\ninterface IProps {\n  onFinish: Function;\n  user: IPerformer;\n  updating?: boolean;\n  countries?: ICountry[];\n}\n\nexport class PerformerBankingForm extends PureComponent<IProps> {\n  state = {\n    states: [],\n    cities: []\n  }\n\n  formRef: any;\n\n  componentDidMount() {\n    const { user } = this.props;\n    if (user?.bankingInformation?.country) {\n      this.handleGetStates(user?.bankingInformation?.country);\n      if (user?.bankingInformation?.state) {\n        this.handleGetCities(user?.bankingInformation?.state, user?.bankingInformation?.country);\n      }\n    }\n  }\n\n  handleGetStates = async (countryCode: string) => {\n    const { user } = this.props;\n    const resp = await utilsService.statesList(countryCode);\n    await this.setState({ states: resp.data });\n    const eState = resp.data.find((s) => s === user?.bankingInformation?.state);\n    if (eState) {\n      this.formRef.setFieldsValue({ state: eState });\n    } else {\n      this.formRef.setFieldsValue({ state: '', city: '' });\n    }\n  }\n\n  handleGetCities = async (state: string, countryCode: string) => {\n    const { user } = this.props;\n    const resp = await utilsService.citiesList(countryCode, state);\n    await this.setState({ cities: resp.data });\n    const eCity = resp.data.find((s) => s === user?.bankingInformation?.city);\n    if (eCity) {\n      this.formRef.setFieldsValue({ city: eCity });\n    } else {\n      this.formRef.setFieldsValue({ city: '' });\n    }\n  }\n\n  render() {\n    if (!this.formRef) this.formRef = createRef();\n    const {\n      onFinish, user, updating, countries\n    } = this.props;\n    const { states, cities } = this.state;\n    return (\n      <Form\n        {...layout}\n        name=\"nest-messages\"\n        onFinish={onFinish.bind(this)}\n        validateMessages={validateMessages}\n        initialValues={user?.bankingInformation}\n        labelAlign=\"left\"\n        className=\"account-form\"\n        ref={(ref) => { this.formRef = ref; }}\n      >\n        <Row>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item\n              label=\"First name\"\n              name=\"firstName\"\n              rules={[\n                { required: true, message: 'Please input your first name!' }\n              ]}\n            >\n              <Input placeholder=\"First name\" />\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item\n              name=\"lastName\"\n              label=\"Last name\"\n              rules={[\n                { required: true, message: 'Please input your last name!' }\n              ]}\n            >\n              <Input placeholder=\"Last name\" />\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item\n              name=\"bankName\"\n              label=\"Bank name\"\n              rules={[\n                { required: true, message: 'Please input your bank name!' }\n              ]}\n            >\n              <Input placeholder=\"Bank name\" />\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item\n              name=\"bankAccount\"\n              label=\"Bank Account\"\n              rules={[\n                { required: true, message: 'Please input your bank account!' }\n              ]}\n            >\n              <Input placeholder=\"Bank account\" />\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item\n              name=\"country\"\n              label=\"Country\"\n              rules={[{ required: true, message: 'Please choose country!' }]}\n            >\n              <Select\n                showSearch\n                optionFilterProp=\"label\"\n                onChange={(val: string) => this.handleGetStates(val)}\n              >\n                {countries.map((c) => (\n                  <Option key={c.code} value={c.code} label={c.name}>\n                    <img alt=\"flag\" src={c?.flag} width=\"20px\" />\n                    {' '}\n                    {c.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item name=\"state\" label=\"State\">\n              <Select\n                placeholder=\"Select your state\"\n                optionFilterProp=\"label\"\n                showSearch\n                onChange={(val: string) => this.handleGetCities(val, this.formRef.getFieldValue('country'))}\n              >\n                {states.map((state) => (\n                  <Option value={state} label={state} key={state}>\n                    {state}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item\n              name=\"city\"\n              label=\"City\"\n            >\n              <Select\n                placeholder=\"Select your city\"\n                showSearch\n                optionFilterProp=\"label\"\n              >\n                {cities.map((city) => (\n                  <Option value={city} label={city} key={city}>\n                    {city}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item name=\"address\" label=\"Address\">\n              <Input placeholder=\"Address\" />\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item name=\"bankRouting\" label=\"Bank Routing\">\n              <Input placeholder=\"Bank routing\" />\n            </Form.Item>\n          </Col>\n          <Col xl={12} md={12} xs={12}>\n            <Form.Item name=\"bankSwiftCode\" label=\"Bank swift code\">\n              <Input placeholder=\"Bank swift code\" />\n            </Form.Item>\n          </Col>\n          {/* <Col xl={12} md={12} xs={12}>\n            <Form.Item name=\"SSN\" label=\"SSN\">\n              <Input placeholder=\"SSN\" />\n            </Form.Item>\n          </Col> */}\n        </Row>\n        <Form.Item className=\"text-center\">\n          <Button\n            className=\"primary\"\n            htmlType=\"submit\"\n            loading={updating}\n            disabled={updating}\n          >\n            Save Changes\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}