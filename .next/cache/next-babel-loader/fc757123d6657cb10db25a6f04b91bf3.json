{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-template-curly-in-string */\nimport { PureComponent } from 'react';\nimport { Form, Input, Button, Row, Col, Select, DatePicker, Upload, Progress, message, Checkbox, Popover, Modal } from 'antd';\nimport { AvatarUpload } from '@components/user/avatar-upload';\nimport { CoverUpload } from '@components/user/cover-upload';\nimport { UploadOutlined, TwitterOutlined, GoogleOutlined } from '@ant-design/icons';\nimport { getGlobalConfig } from '@services/config';\nimport { VideoPlayer } from '@components/common';\nimport moment from 'moment';\nconst {\n  Option\n} = Select;\nconst layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nconst {\n  TextArea\n} = Input;\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\nexport class PerformerAccountForm extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isUploadingVideo: false,\n      uploadVideoPercentage: 0,\n      previewVideoUrl: null,\n      previewVideoName: null,\n      isShowPreview: false\n    });\n\n    _defineProperty(this, \"handleVideoChange\", info => {\n      info.file && info.file.percent && this.setState({\n        uploadVideoPercentage: info.file.percent\n      });\n\n      if (info.file.status === 'uploading') {\n        this.setState({\n          isUploadingVideo: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        var _info$file, _info$file$response, _info$file2, _info$file2$response;\n\n        message.success('Intro video was uploaded');\n        this.setState({\n          isUploadingVideo: false,\n          previewVideoUrl: info === null || info === void 0 ? void 0 : (_info$file = info.file) === null || _info$file === void 0 ? void 0 : (_info$file$response = _info$file.response) === null || _info$file$response === void 0 ? void 0 : _info$file$response.data.url,\n          previewVideoName: info === null || info === void 0 ? void 0 : (_info$file2 = info.file) === null || _info$file2 === void 0 ? void 0 : (_info$file2$response = _info$file2.response) === null || _info$file2$response === void 0 ? void 0 : _info$file2$response.data.name\n        });\n      }\n    });\n\n    _defineProperty(this, \"beforeUploadVideo\", file => {\n      const isValid = file.size / 1024 / 1024 < (getGlobalConfig().NEXT_PUBLIC_MAX_SIZE_TEASER || 200);\n\n      if (!isValid) {\n        message.error(`File is too large please provide an file ${getGlobalConfig().NEXT_PUBLIC_MAX_SIZE_TEASER || 200}MB or below`);\n        return false;\n      }\n\n      this.setState({\n        previewVideoName: file.name\n      });\n      return true;\n    });\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    this.setState({\n      previewVideoUrl: user === null || user === void 0 ? void 0 : user.welcomeVideoPath,\n      previewVideoName: user === null || user === void 0 ? void 0 : user.welcomeVideoName\n    });\n  }\n\n  render() {\n    const {\n      onFinish,\n      user,\n      updating,\n      countries,\n      options,\n      bodyInfo,\n      onVerifyEmail,\n      countTime = 60\n    } = this.props;\n    const {\n      heights = [],\n      weights = [],\n      bodyTypes = [],\n      genders = [],\n      sexualOrientations = [],\n      ethnicities = [],\n      hairs = [],\n      eyes = [],\n      butts = []\n    } = bodyInfo;\n    const {\n      uploadHeaders,\n      avatarUploadUrl,\n      onAvatarUploaded,\n      coverUploadUrl,\n      onCoverUploaded,\n      videoUploadUrl\n    } = options;\n    const {\n      isUploadingVideo,\n      uploadVideoPercentage,\n      previewVideoUrl,\n      previewVideoName,\n      isShowPreview\n    } = this.state;\n    return __jsx(Form, _extends({}, layout, {\n      name: \"nest-messages\",\n      onFinish: onFinish.bind(this),\n      validateMessages: validateMessages,\n      initialValues: _objectSpread(_objectSpread({}, user), {}, {\n        dateOfBirth: user.dateOfBirth && moment(user.dateOfBirth) || ''\n      }),\n      scrollToFirstError: true,\n      className: \"account-form\"\n    }), __jsx(\"div\", {\n      className: \"top-profile\",\n      style: {\n        position: 'relative',\n        marginBottom: 25,\n        backgroundImage: user !== null && user !== void 0 && user.cover ? `url('${user.cover}')` : \"url('/static/banner-image.jpg')\"\n      }\n    }, __jsx(\"div\", {\n      className: \"avatar-upload\"\n    }, __jsx(AvatarUpload, {\n      headers: uploadHeaders,\n      uploadUrl: avatarUploadUrl,\n      onUploaded: onAvatarUploaded,\n      image: user.avatar\n    })), __jsx(\"div\", {\n      className: \"cover-upload\"\n    }, __jsx(CoverUpload, {\n      headers: uploadHeaders,\n      uploadUrl: coverUploadUrl,\n      onUploaded: onCoverUploaded,\n      image: user.cover,\n      options: {\n        fieldName: 'cover'\n      }\n    }))), __jsx(Row, null, __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"firstName\",\n      label: \"First Name\",\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        message: 'Please input your first name!'\n      }, {\n        pattern: new RegExp(/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u),\n        message: 'First name can not contain number and special character'\n      }]\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"lastName\",\n      label: \"Last Name\",\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        message: 'Please input your last name!'\n      }, {\n        pattern: new RegExp(/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u),\n        message: 'Last name can not contain number and special character'\n      }]\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"name\",\n      label: \"Display Name\",\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        message: 'Please input your display name!'\n      }, {\n        pattern: new RegExp(/^(?=.*\\S).+$/g),\n        message: 'Display name can not contain only whitespace'\n      }, {\n        min: 3,\n        message: 'Display name must containt at least 3 characters'\n      }],\n      hasFeedback: true\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"username\",\n      label: \"Username\",\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }, {\n        pattern: new RegExp(/^[a-z0-9]+$/g),\n        message: 'Username must contain lowercase alphanumerics only'\n      }, {\n        min: 3,\n        message: 'Username must containt at least 3 characters'\n      }],\n      hasFeedback: true\n    }, __jsx(Input, {\n      placeholder: \"user1, john99,...\"\n    }))), __jsx(Col, {\n      lg: 24,\n      md: 24,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"email\",\n      label: __jsx(\"span\", {\n        style: {\n          fontSize: 10\n        }\n      }, \"Email Address\", '  ', user.verifiedEmail ? __jsx(Popover, {\n        title: \"Your email address is verified\",\n        content: null\n      }, __jsx(\"a\", {\n        className: \"success-color\"\n      }, \"Verified!\")) : __jsx(Popover, {\n        title: \"Your email address is not verified\",\n        content: __jsx(Button, {\n          type: \"primary\",\n          onClick: () => onVerifyEmail(),\n          disabled: updating || countTime < 60,\n          loading: updating || countTime < 60\n        }, \"Click here to\", ' ', countTime < 60 ? 'resend' : 'send', ' ', \"the verification link\", ' ', countTime < 60 && `${countTime}s`)\n      }, __jsx(\"a\", {\n        className: \"error-color\"\n      }, \"Not verified!\"))),\n      rules: [{\n        type: 'email'\n      }, {\n        required: true,\n        message: 'Please input your email address!'\n      }],\n      hasFeedback: true,\n      validateTrigger: ['onChange', 'onBlur']\n    }, __jsx(Input, {\n      disabled: user.googleConnected\n    }))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"gender\",\n      label: \"Gender\",\n      rules: [{\n        required: true,\n        message: 'Please select your gender!'\n      }]\n    }, __jsx(Select, null, genders.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"sexualOrientation\",\n      label: \"Sexual orientation\"\n    }, __jsx(Select, null, sexualOrientations.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"country\",\n      label: \"Country\",\n      rules: [{\n        required: true\n      }]\n    }, __jsx(Select, {\n      showSearch: true,\n      optionFilterProp: \"label\"\n    }, countries.map(c => __jsx(Option, {\n      value: c.code,\n      label: c.name,\n      key: c.code\n    }, __jsx(\"img\", {\n      alt: \"country_flag\",\n      src: c.flag,\n      width: \"25px\"\n    }), ' ', c.name))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      label: \"Date of Birth\",\n      name: \"dateOfBirth\",\n      validateTrigger: ['onChange', 'onBlur'],\n      hasFeedback: true,\n      rules: [{\n        required: true,\n        message: 'Select your date of birth'\n      }]\n    }, __jsx(DatePicker, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"DD/MM/YYYY\",\n      format: \"DD/MM/YYYY\",\n      disabledDate: currentDate => currentDate && currentDate > moment().subtract(18, 'year').endOf('day')\n    }))), __jsx(Col, {\n      span: 24\n    }, __jsx(Form.Item, {\n      name: \"bio\",\n      label: \"Bio\",\n      rules: [{\n        required: true,\n        message: 'Please enter your bio!'\n      }]\n    }, __jsx(TextArea, {\n      rows: 3,\n      placeholder: \"Tell people something about you...\"\n    }))), __jsx(Col, {\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      label: \"New Password\",\n      name: \"password\",\n      hasFeedback: true,\n      rules: [{\n        pattern: new RegExp(/^(?=.{8,})(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[^\\w\\d]).*$/g),\n        message: 'Password must have minimum 8 characters, at least 1 number, 1 uppercase letter, 1 lowercase letter & 1 special character'\n      }]\n    }, __jsx(Input.Password, {\n      placeholder: \"New password\"\n    }))), __jsx(Col, {\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      label: \"Confirm new Password\",\n      name: \"confirm\",\n      dependencies: ['password'],\n      hasFeedback: true,\n      rules: [({\n        getFieldValue\n      }) => ({\n        validator(rule, value) {\n          if (!value || getFieldValue('password') === value) {\n            return Promise.resolve();\n          } // eslint-disable-next-line prefer-promise-reject-errors\n\n\n          return Promise.reject('Passwords do not match together!');\n        }\n\n      })]\n    }, __jsx(Input.Password, {\n      placeholder: \"Confirm new password\"\n    }))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"state\",\n      label: \"State\"\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"city\",\n      label: \"City\"\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 24,\n      md: 24,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"address\",\n      label: \"Address\"\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"zipcode\",\n      label: \"Zip Code\"\n    }, __jsx(Input, null))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"ethnicity\",\n      label: \"Ethnicity\"\n    }, __jsx(Select, null, ethnicities.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"height\",\n      label: \"Height\"\n    }, __jsx(Select, {\n      showSearch: true\n    }, heights.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"weight\",\n      label: \"Weight\"\n    }, __jsx(Select, {\n      showSearch: true\n    }, weights.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"bodyType\",\n      label: \"Body Type\"\n    }, __jsx(Select, null, bodyTypes.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"eyes\",\n      label: \"Eye color\"\n    }, __jsx(Select, null, eyes.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"hair\",\n      label: \"Hair color\"\n    }, __jsx(Select, null, hairs.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"butt\",\n      label: \"Butt size\"\n    }, __jsx(Select, null, butts.map(s => __jsx(Select.Option, {\n      key: s.value,\n      value: s.value\n    }, s.text))))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      label: \"Intro Video\"\n    }, __jsx(Upload, {\n      accept: 'video/*',\n      name: \"welcome-video\",\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: videoUploadUrl,\n      headers: uploadHeaders,\n      beforeUpload: file => this.beforeUploadVideo(file),\n      onChange: this.handleVideoChange.bind(this)\n    }, __jsx(UploadOutlined, null)), __jsx(\"div\", {\n      className: \"ant-form-item-explain\",\n      style: {\n        textAlign: 'left'\n      }\n    }, (previewVideoUrl || previewVideoName) && __jsx(\"a\", {\n      \"aria-hidden\": true,\n      onClick: () => this.setState({\n        isShowPreview: true\n      })\n    }, previewVideoName || previewVideoUrl || 'Click here to preview') || __jsx(\"a\", null, \"Intro video is\", ' ', getGlobalConfig().NEXT_PUBLIC_MAX_SIZE_TEASER || 200, \"MB or below\")), uploadVideoPercentage ? __jsx(Progress, {\n      percent: Math.round(uploadVideoPercentage)\n    }) : null), __jsx(Form.Item, {\n      name: \"activateWelcomeVideo\",\n      valuePropName: \"checked\"\n    }, __jsx(Checkbox, null, \"Activate intro video\"))), __jsx(Col, {\n      lg: 12,\n      md: 12,\n      xs: 24\n    }, user.twitterConnected && __jsx(Form.Item, null, __jsx(\"p\", null, __jsx(TwitterOutlined, {\n      style: {\n        color: '#1ea2f1',\n        fontSize: '30px'\n      }\n    }), ' ', \"Signup/login via Twitter\")), user.googleConnected && __jsx(Form.Item, null, __jsx(\"p\", null, __jsx(GoogleOutlined, {\n      style: {\n        color: '#d64b40',\n        fontSize: '30px'\n      }\n    }), ' ', \"Signup/login via Google\")))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      })\n    }, __jsx(Button, {\n      className: \"primary\",\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: updating || isUploadingVideo,\n      disabled: updating || isUploadingVideo\n    }, \"Save Changes\")), __jsx(Modal, {\n      width: 767,\n      footer: null,\n      onOk: () => this.setState({\n        isShowPreview: false\n      }),\n      onCancel: () => this.setState({\n        isShowPreview: false\n      }),\n      visible: isShowPreview,\n      destroyOnClose: true,\n      centered: true\n    }, __jsx(VideoPlayer, {\n      autoplay: true,\n      controls: true,\n      playsinline: true,\n      fluid: true,\n      sources: [{\n        src: previewVideoUrl,\n        type: 'video/mp4'\n      }]\n    })));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/performer/accountForm.tsx"],"names":["PureComponent","Form","Input","Button","Row","Col","Select","DatePicker","Upload","Progress","message","Checkbox","Popover","Modal","AvatarUpload","CoverUpload","UploadOutlined","TwitterOutlined","GoogleOutlined","getGlobalConfig","VideoPlayer","moment","Option","layout","labelCol","span","wrapperCol","TextArea","validateMessages","required","types","email","number","range","PerformerAccountForm","isUploadingVideo","uploadVideoPercentage","previewVideoUrl","previewVideoName","isShowPreview","info","file","percent","setState","status","success","response","data","url","name","isValid","size","NEXT_PUBLIC_MAX_SIZE_TEASER","error","componentDidMount","user","props","welcomeVideoPath","welcomeVideoName","render","onFinish","updating","countries","options","bodyInfo","onVerifyEmail","countTime","heights","weights","bodyTypes","genders","sexualOrientations","ethnicities","hairs","eyes","butts","uploadHeaders","avatarUploadUrl","onAvatarUploaded","coverUploadUrl","onCoverUploaded","videoUploadUrl","state","bind","dateOfBirth","position","marginBottom","backgroundImage","cover","avatar","fieldName","pattern","RegExp","min","fontSize","verifiedEmail","type","googleConnected","map","s","value","text","c","code","flag","width","currentDate","subtract","endOf","getFieldValue","validator","rule","Promise","resolve","reject","beforeUploadVideo","handleVideoChange","textAlign","Math","round","twitterConnected","color","offset","autoplay","controls","playsinline","fluid","sources","src"],"mappings":"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","sourcesContent":["/* eslint-disable no-template-curly-in-string */\nimport { PureComponent } from 'react';\nimport {\n  Form, Input, Button, Row, Col, Select, DatePicker,\n  Upload, Progress, message, Checkbox, Popover, Modal\n} from 'antd';\nimport {\n  IPerformer, ICountry, IBody\n} from 'src/interfaces';\nimport { AvatarUpload } from '@components/user/avatar-upload';\nimport { CoverUpload } from '@components/user/cover-upload';\nimport {\n  UploadOutlined, TwitterOutlined, GoogleOutlined\n} from '@ant-design/icons';\nimport { getGlobalConfig } from '@services/config';\nimport { VideoPlayer } from '@components/common';\nimport moment from 'moment';\n\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }\n};\n\nconst { TextArea } = Input;\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  },\n  number: {\n    range: 'Must be between ${min} and ${max}'\n  }\n};\n\ninterface IProps {\n  onFinish: Function;\n  onVerifyEmail: Function;\n  countTime: number;\n  user: IPerformer;\n  updating: boolean;\n  options?: {\n    uploadHeaders?: any;\n    avatarUploadUrl?: string;\n    onAvatarUploaded?: Function;\n    coverUploadUrl?: string;\n    onCoverUploaded?: Function;\n    beforeUpload?: Function;\n    videoUploadUrl?: string;\n    onVideoUploaded?: Function;\n    uploadPercentage?: number;\n  };\n  countries: ICountry[];\n  bodyInfo: IBody;\n}\n\nexport class PerformerAccountForm extends PureComponent<IProps> {\n  state = {\n    isUploadingVideo: false,\n    uploadVideoPercentage: 0,\n    previewVideoUrl: null,\n    previewVideoName: null,\n    isShowPreview: false\n  }\n\n  componentDidMount() {\n    const { user } = this.props;\n    this.setState({\n      previewVideoUrl: user?.welcomeVideoPath,\n      previewVideoName: user?.welcomeVideoName\n    });\n  }\n\n  handleVideoChange = (info: any) => {\n    info.file && info.file.percent && this.setState({ uploadVideoPercentage: info.file.percent });\n    if (info.file.status === 'uploading') {\n      this.setState({ isUploadingVideo: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      message.success('Intro video was uploaded');\n      this.setState({\n        isUploadingVideo: false,\n        previewVideoUrl: info?.file?.response?.data.url,\n        previewVideoName: info?.file?.response?.data.name\n      });\n    }\n  };\n\n  beforeUploadVideo = (file) => {\n    const isValid = file.size / 1024 / 1024 < (getGlobalConfig().NEXT_PUBLIC_MAX_SIZE_TEASER || 200);\n    if (!isValid) {\n      message.error(`File is too large please provide an file ${getGlobalConfig().NEXT_PUBLIC_MAX_SIZE_TEASER || 200}MB or below`);\n      return false;\n    }\n    this.setState({ previewVideoName: file.name });\n    return true;\n  }\n\n  render() {\n    const {\n      onFinish, user, updating, countries, options, bodyInfo, onVerifyEmail, countTime = 60\n    } = this.props;\n    const {\n      heights = [], weights = [], bodyTypes = [], genders = [], sexualOrientations = [], ethnicities = [],\n      hairs = [], eyes = [], butts = []\n    } = bodyInfo;\n    const {\n      uploadHeaders,\n      avatarUploadUrl,\n      onAvatarUploaded,\n      coverUploadUrl,\n      onCoverUploaded,\n      videoUploadUrl\n    } = options;\n    const {\n      isUploadingVideo, uploadVideoPercentage, previewVideoUrl, previewVideoName, isShowPreview\n    } = this.state;\n    return (\n      <Form\n        {...layout}\n        name=\"nest-messages\"\n        onFinish={onFinish.bind(this)}\n        validateMessages={validateMessages}\n        initialValues={{\n          ...user,\n          dateOfBirth: (user.dateOfBirth && moment(user.dateOfBirth)) || ''\n        }}\n        scrollToFirstError\n        className=\"account-form\"\n      >\n        <div\n          className=\"top-profile\"\n          style={{\n            position: 'relative',\n            marginBottom: 25,\n            backgroundImage:\n              user?.cover\n                ? `url('${user.cover}')`\n                : \"url('/static/banner-image.jpg')\"\n          }}\n        >\n          <div className=\"avatar-upload\">\n            <AvatarUpload\n              headers={uploadHeaders}\n              uploadUrl={avatarUploadUrl}\n              onUploaded={onAvatarUploaded}\n              image={user.avatar}\n            />\n          </div>\n          <div className=\"cover-upload\">\n            <CoverUpload\n              headers={uploadHeaders}\n              uploadUrl={coverUploadUrl}\n              onUploaded={onCoverUploaded}\n              image={user.cover}\n              options={{ fieldName: 'cover' }}\n            />\n          </div>\n        </div>\n        <Row>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"firstName\"\n              label=\"First Name\"\n              validateTrigger={['onChange', 'onBlur']}\n              rules={[\n                { required: true, message: 'Please input your first name!' },\n                {\n                  pattern: new RegExp(\n                    /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n                  ),\n                  message:\n                    'First name can not contain number and special character'\n                }\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"lastName\"\n              label=\"Last Name\"\n              validateTrigger={['onChange', 'onBlur']}\n              rules={[\n                { required: true, message: 'Please input your last name!' },\n                {\n                  pattern: new RegExp(\n                    /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n                  ),\n                  message:\n                    'Last name can not contain number and special character'\n                }\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"name\"\n              label=\"Display Name\"\n              validateTrigger={['onChange', 'onBlur']}\n              rules={[\n                { required: true, message: 'Please input your display name!' },\n                {\n                  pattern: new RegExp(/^(?=.*\\S).+$/g),\n                  message:\n                    'Display name can not contain only whitespace'\n                },\n                {\n                  min: 3,\n                  message: 'Display name must containt at least 3 characters'\n                }\n              ]}\n              hasFeedback\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"username\"\n              label=\"Username\"\n              validateTrigger={['onChange', 'onBlur']}\n              rules={[\n                { required: true, message: 'Please input your username!' },\n                {\n                  pattern: new RegExp(/^[a-z0-9]+$/g),\n                  message:\n                    'Username must contain lowercase alphanumerics only'\n                },\n                { min: 3, message: 'Username must containt at least 3 characters' }\n              ]}\n              hasFeedback\n            >\n              <Input placeholder=\"user1, john99,...\" />\n            </Form.Item>\n          </Col>\n          <Col lg={24} md={24} xs={24}>\n            <Form.Item\n              name=\"email\"\n              label={(\n                <span style={{ fontSize: 10 }}>\n                  Email Address\n                  {'  '}\n                  {user.verifiedEmail ? (\n                    <Popover title=\"Your email address is verified\" content={null}>\n                      <a className=\"success-color\">Verified!</a>\n                    </Popover>\n                  ) : (\n                    <Popover\n                      title=\"Your email address is not verified\"\n                      content={(\n                        <Button\n                          type=\"primary\"\n                          onClick={() => onVerifyEmail()}\n                          disabled={updating || countTime < 60}\n                          loading={updating || countTime < 60}\n                        >\n                          Click here to\n                          {' '}\n                          {countTime < 60 ? 'resend' : 'send'}\n                          {' '}\n                          the verification link\n                          {' '}\n                          {countTime < 60 && `${countTime}s`}\n                        </Button>\n                      )}\n                    >\n                      <a className=\"error-color\">Not verified!</a>\n                    </Popover>\n                  )}\n                </span>\n              )}\n              rules={[{ type: 'email' }, { required: true, message: 'Please input your email address!' }]}\n              hasFeedback\n              validateTrigger={['onChange', 'onBlur']}\n            >\n              <Input disabled={user.googleConnected} />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"gender\"\n              label=\"Gender\"\n              rules={[\n                { required: true, message: 'Please select your gender!' }]}\n            >\n              <Select>\n                {genders.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"sexualOrientation\"\n              label=\"Sexual orientation\"\n            >\n              <Select>\n                {sexualOrientations.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              name=\"country\"\n              label=\"Country\"\n              rules={[{ required: true }]}\n            >\n              <Select\n                showSearch\n                optionFilterProp=\"label\"\n              >\n                {countries.map((c) => (\n                  <Option value={c.code} label={c.name} key={c.code}>\n                    <img alt=\"country_flag\" src={c.flag} width=\"25px\" />\n                    {' '}\n                    {c.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item\n              label=\"Date of Birth\"\n              name=\"dateOfBirth\"\n              validateTrigger={['onChange', 'onBlur']}\n              hasFeedback\n              rules={[\n                {\n                  required: true,\n                  message: 'Select your date of birth'\n                }\n              ]}\n            >\n              <DatePicker\n                style={{ width: '100%' }}\n                placeholder=\"DD/MM/YYYY\"\n                format=\"DD/MM/YYYY\"\n                disabledDate={(currentDate) => currentDate && currentDate > moment().subtract(18, 'year').endOf('day')}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              name=\"bio\"\n              label=\"Bio\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please enter your bio!'\n                }\n              ]}\n            >\n              <TextArea rows={3} placeholder=\"Tell people something about you...\" />\n            </Form.Item>\n          </Col>\n          <Col md={12} xs={24}>\n            <Form.Item\n              label=\"New Password\"\n              name=\"password\"\n              hasFeedback\n              rules={[\n                {\n                  pattern: new RegExp(/^(?=.{8,})(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[^\\w\\d]).*$/g),\n                  message: 'Password must have minimum 8 characters, at least 1 number, 1 uppercase letter, 1 lowercase letter & 1 special character'\n                }\n              ]}\n            >\n              <Input.Password placeholder=\"New password\" />\n            </Form.Item>\n          </Col>\n          <Col md={12} xs={24}>\n            <Form.Item\n              label=\"Confirm new Password\"\n              name=\"confirm\"\n              dependencies={['password']}\n              hasFeedback\n              rules={[\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                      return Promise.resolve();\n                    }\n                    // eslint-disable-next-line prefer-promise-reject-errors\n                    return Promise.reject('Passwords do not match together!');\n                  }\n                })\n              ]}\n            >\n              <Input.Password placeholder=\"Confirm new password\" />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"state\" label=\"State\">\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"city\" label=\"City\">\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={24} md={24} xs={24}>\n            <Form.Item name=\"address\" label=\"Address\">\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"zipcode\" label=\"Zip Code\">\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"ethnicity\" label=\"Ethnicity\">\n              <Select>\n                {ethnicities.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"height\" label=\"Height\">\n              <Select showSearch>\n                {heights.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"weight\" label=\"Weight\">\n              <Select showSearch>\n                {weights.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"bodyType\" label=\"Body Type\">\n              <Select>\n                {bodyTypes.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"eyes\" label=\"Eye color\">\n              <Select>\n                {eyes.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"hair\" label=\"Hair color\">\n              <Select>\n                {hairs.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item name=\"butt\" label=\"Butt size\">\n              <Select>\n                {butts.map((s) => (\n                  <Select.Option key={s.value} value={s.value}>\n                    {s.text}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            <Form.Item label=\"Intro Video\">\n              <Upload\n                accept={'video/*'}\n                name=\"welcome-video\"\n                listType=\"picture-card\"\n                className=\"avatar-uploader\"\n                showUploadList={false}\n                action={videoUploadUrl}\n                headers={uploadHeaders}\n                beforeUpload={(file) => this.beforeUploadVideo(file)}\n                onChange={this.handleVideoChange.bind(this)}\n              >\n                <UploadOutlined />\n              </Upload>\n              <div className=\"ant-form-item-explain\" style={{ textAlign: 'left' }}>\n                {((previewVideoUrl || previewVideoName) && <a aria-hidden onClick={() => this.setState({ isShowPreview: true })}>{previewVideoName || previewVideoUrl || 'Click here to preview'}</a>)\n                  || (\n                    <a>\n                      Intro video is\n                      {' '}\n                      {getGlobalConfig().NEXT_PUBLIC_MAX_SIZE_TEASER || 200}\n                      MB or below\n                    </a>\n                  )}\n              </div>\n              {uploadVideoPercentage ? (\n                <Progress percent={Math.round(uploadVideoPercentage)} />\n              ) : null}\n            </Form.Item>\n            <Form.Item name=\"activateWelcomeVideo\" valuePropName=\"checked\">\n              <Checkbox>Activate intro video</Checkbox>\n            </Form.Item>\n          </Col>\n          <Col lg={12} md={12} xs={24}>\n            {user.twitterConnected && (\n              <Form.Item>\n                <p>\n                  <TwitterOutlined style={{ color: '#1ea2f1', fontSize: '30px' }} />\n                  {' '}\n                  Signup/login via Twitter\n                </p>\n              </Form.Item>\n            )}\n            {user.googleConnected && (\n              <Form.Item>\n                <p>\n                  <GoogleOutlined style={{ color: '#d64b40', fontSize: '30px' }} />\n                  {' '}\n                  Signup/login via Google\n                </p>\n              </Form.Item>\n            )}\n          </Col>\n        </Row>\n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 4 }}>\n          <Button className=\"primary\" type=\"primary\" htmlType=\"submit\" loading={updating || isUploadingVideo} disabled={updating || isUploadingVideo}>\n            Save Changes\n          </Button>\n        </Form.Item>\n        <Modal\n          width={767}\n          footer={null}\n          onOk={() => this.setState({ isShowPreview: false })}\n          onCancel={() => this.setState({ isShowPreview: false })}\n          visible={isShowPreview}\n          destroyOnClose\n          centered\n        >\n          <VideoPlayer\n            {...{\n              autoplay: true,\n              controls: true,\n              playsinline: true,\n              fluid: true,\n              sources: [\n                {\n                  src: previewVideoUrl,\n                  type: 'video/mp4'\n                }\n              ]\n            }}\n          />\n        </Modal>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}