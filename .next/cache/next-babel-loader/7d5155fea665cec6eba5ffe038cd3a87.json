{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { loadScript } from 'static/lib/load-script';\nimport { removeScript } from 'static/lib/remove-script';\n\nconst useGoogleLogin = ({\n  onSuccess = Function,\n  onFailure = Function,\n  onScriptLoadFailure,\n  clientId,\n  autoLoad,\n  jsSrc = 'https://accounts.google.com/gsi/client'\n}) => {\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n\n  function handleSigninSuccess(res) {\n    onSuccess(res);\n  }\n\n  function signIn(e = null) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (loaded) {\n      const google = window.google;\n      google.accounts.id.prompt();\n    }\n  }\n\n  function renderButtonSignIn(e = null) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    if (loaded) {\n      const google = window.google;\n      google.accounts.id.renderButton(document.getElementById('btnLoginWithGoogle'), // Ensure the element exist and it is a div to display correcctly\n      {\n        theme: 'outline',\n        size: 'large'\n      } // Customization attributes\n      );\n    }\n  }\n\n  useEffect(() => {\n    let unmounted = false;\n    const onLoadFailure = onScriptLoadFailure || onFailure;\n    loadScript(document, 'script', 'google-login', jsSrc, () => {\n      const google = window.google;\n      google.accounts.id.initialize({\n        client_id: clientId,\n        callback: data => {\n          handleSigninSuccess(data);\n        }\n      });\n\n      if (!unmounted) {\n        setLoaded(true);\n      }\n    }, err => {\n      onLoadFailure(err);\n    });\n    return () => {\n      unmounted = true;\n      removeScript(document, 'google-login');\n    };\n  }, []);\n  useEffect(() => {\n    if (autoLoad) {\n      signIn();\n    }\n  }, [loaded]);\n  return {\n    signIn,\n    loaded,\n    renderButtonSignIn\n  };\n};\n\nexport default useGoogleLogin;","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/lib/hook/use-google-login.ts"],"names":["useState","useEffect","loadScript","removeScript","useGoogleLogin","onSuccess","Function","onFailure","onScriptLoadFailure","clientId","autoLoad","jsSrc","loaded","setLoaded","handleSigninSuccess","res","signIn","e","preventDefault","google","window","accounts","id","prompt","renderButtonSignIn","renderButton","document","getElementById","theme","size","unmounted","onLoadFailure","initialize","client_id","callback","data","err"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAWA,MAAMC,cAAc,GAAG,CAAC;AACtBC,EAAAA,SAAS,GAAGC,QADU;AAEtBC,EAAAA,SAAS,GAAGD,QAFU;AAGtBE,EAAAA,mBAHsB;AAItBC,EAAAA,QAJsB;AAKtBC,EAAAA,QALsB;AAMtBC,EAAAA,KAAK,GAAG;AANc,CAAD,KAOT;AACZ,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBb,QAAQ,CAAC,KAAD,CAApC;;AAEA,WAASc,mBAAT,CAA6BC,GAA7B,EAAkC;AAChCV,IAAAA,SAAS,CAACU,GAAD,CAAT;AACD;;AAED,WAASC,MAAT,CAAgBC,CAAC,GAAG,IAApB,EAA0B;AACxB,QAAIA,CAAJ,EAAO;AACLA,MAAAA,CAAC,CAACC,cAAF;AACD;;AACD,QAAIN,MAAJ,EAAY;AACV,YAAMO,MAAM,GAAIC,MAAD,CAAgBD,MAA/B;AACAA,MAAAA,MAAM,CAACE,QAAP,CAAgBC,EAAhB,CAAmBC,MAAnB;AACD;AACF;;AAED,WAASC,kBAAT,CAA4BP,CAAC,GAAG,IAAhC,EAAsC;AACpC,QAAIA,CAAJ,EAAO;AACLA,MAAAA,CAAC,CAACC,cAAF;AACD;;AACD,QAAIN,MAAJ,EAAY;AACV,YAAMO,MAAM,GAAIC,MAAD,CAAgBD,MAA/B;AACAA,MAAAA,MAAM,CAACE,QAAP,CAAgBC,EAAhB,CAAmBG,YAAnB,CACEC,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CADF,EACiD;AAC/C;AAAEC,QAAAA,KAAK,EAAE,SAAT;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAFF,CAEsC;AAFtC;AAID;AACF;;AAED5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6B,SAAS,GAAG,KAAhB;AACA,UAAMC,aAAa,GAAGvB,mBAAmB,IAAID,SAA7C;AACAL,IAAAA,UAAU,CACRwB,QADQ,EAER,QAFQ,EAGR,cAHQ,EAIRf,KAJQ,EAKR,MAAM;AACJ,YAAMQ,MAAM,GAAIC,MAAD,CAAgBD,MAA/B;AACAA,MAAAA,MAAM,CAACE,QAAP,CAAgBC,EAAhB,CAAmBU,UAAnB,CAA8B;AAC5BC,QAAAA,SAAS,EAAExB,QADiB;AAE5ByB,QAAAA,QAAQ,EAAEC,IAAI,IAAI;AAChBrB,UAAAA,mBAAmB,CAACqB,IAAD,CAAnB;AACD;AAJ2B,OAA9B;;AAMA,UAAI,CAACL,SAAL,EAAgB;AACdjB,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,KAhBO,EAiBRuB,GAAG,IAAI;AACLL,MAAAA,aAAa,CAACK,GAAD,CAAb;AACD,KAnBO,CAAV;AAsBA,WAAO,MAAM;AACXN,MAAAA,SAAS,GAAG,IAAZ;AACA3B,MAAAA,YAAY,CAACuB,QAAD,EAAW,cAAX,CAAZ;AACD,KAHD;AAID,GA7BQ,EA6BN,EA7BM,CAAT;AA+BAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAJ,EAAc;AACZM,MAAAA,MAAM;AACP;AACF,GAJQ,EAIN,CAACJ,MAAD,CAJM,CAAT;AAMA,SAAO;AAAEI,IAAAA,MAAF;AAAUJ,IAAAA,MAAV;AAAkBY,IAAAA;AAAlB,GAAP;AACD,CA3ED;;AA6EA,eAAepB,cAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { loadScript } from 'static/lib/load-script';\nimport { removeScript } from 'static/lib/remove-script';\n\ninterface IProps {\n  clientId: string;\n  onSuccess: Function;\n  onFailure: Function;\n  onScriptLoadFailure?: Function;\n  autoLoad?: boolean;\n  jsSrc?: string;\n}\n\nconst useGoogleLogin = ({\n  onSuccess = Function,\n  onFailure = Function,\n  onScriptLoadFailure,\n  clientId,\n  autoLoad,\n  jsSrc = 'https://accounts.google.com/gsi/client'\n}: IProps) => {\n  const [loaded, setLoaded] = useState(false);\n\n  function handleSigninSuccess(res) {\n    onSuccess(res);\n  }\n\n  function signIn(e = null) {\n    if (e) {\n      e.preventDefault();\n    }\n    if (loaded) {\n      const google = (window as any).google;\n      google.accounts.id.prompt();\n    }\n  }\n\n  function renderButtonSignIn(e = null) {\n    if (e) {\n      e.preventDefault();\n    }\n    if (loaded) {\n      const google = (window as any).google;\n      google.accounts.id.renderButton(\n        document.getElementById('btnLoginWithGoogle'), // Ensure the element exist and it is a div to display correcctly\n        { theme: 'outline', size: 'large' } // Customization attributes\n      );\n    }\n  }\n\n  useEffect(() => {\n    let unmounted = false;\n    const onLoadFailure = onScriptLoadFailure || onFailure;\n    loadScript(\n      document,\n      'script',\n      'google-login',\n      jsSrc,\n      () => {\n        const google = (window as any).google;\n        google.accounts.id.initialize({\n          client_id: clientId,\n          callback: data => {\n            handleSigninSuccess(data);\n          }\n        });\n        if (!unmounted) {\n          setLoaded(true);\n        }\n      },\n      err => {\n        onLoadFailure(err);\n      }\n    );\n\n    return () => {\n      unmounted = true;\n      removeScript(document, 'google-login');\n    };\n  }, []);\n\n  useEffect(() => {\n    if (autoLoad) {\n      signIn();\n    }\n  }, [loaded]);\n\n  return { signIn, loaded, renderButtonSignIn };\n};\n\nexport default useGoogleLogin;\n"]},"metadata":{},"sourceType":"module"}