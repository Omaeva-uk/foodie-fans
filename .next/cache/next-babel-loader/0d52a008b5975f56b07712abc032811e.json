{"ast":null,"code":"import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport class PerformerService extends APIRequest {\n  search(query) {\n    return this.get(this.buildUrl('/performers/user/search', query));\n  }\n\n  randomSearch(query) {\n    return this.get(this.buildUrl('/performers/search/random', query));\n  }\n\n  me(headers) {\n    return this.get('/performers/me', headers);\n  }\n\n  findOne(id, headers) {\n    return this.get(`/performers/${id}`, headers);\n  }\n\n  getAvatarUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/avatar/upload`;\n  }\n\n  getCoverUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/cover/upload`;\n  }\n\n  getVideoUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/welcome-video/upload`;\n  }\n\n  getDocumentUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/documents/upload`;\n  }\n\n  updateMe(id, payload) {\n    return this.put(`/performers/${id}`, payload);\n  }\n\n  getTopPerformer(query) {\n    return this.get(this.buildUrl('/performers/top', query));\n  }\n\n  updateBanking(id, payload) {\n    return this.put(`/performers/${id}/banking-settings`, payload);\n  }\n\n  updatePaymentGateway(id, payload) {\n    return this.put(`/performers/${id}/payment-gateway-settings`, payload);\n  }\n\n  getBookmarked(payload) {\n    return this.get(this.buildUrl('/reactions/performers/bookmark', payload));\n  }\n\n  uploadDocuments(documents, onProgress) {\n    return this.upload('/performers/documents/upload', documents, {\n      onProgress\n    });\n  }\n\n}\nexport const performerService = new PerformerService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/performer.service.ts"],"names":["APIRequest","getGlobalConfig","PerformerService","search","query","get","buildUrl","randomSearch","me","headers","findOne","id","getAvatarUploadUrl","config","NEXT_PUBLIC_API_ENDPOINT","getCoverUploadUrl","getVideoUploadUrl","getDocumentUploadUrl","updateMe","payload","put","getTopPerformer","updateBanking","updatePaymentGateway","getBookmarked","uploadDocuments","documents","onProgress","upload","performerService"],"mappings":"AACA,SAASA,UAAT,QAAsC,eAAtC;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,MAAMC,gBAAN,SAA+BF,UAA/B,CAA0C;AAC/CG,EAAAA,MAAM,CAACC,KAAD,EAAiC;AACrC,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,yBAAd,EAAyCF,KAAzC,CAAT,CAAP;AACD;;AAEDG,EAAAA,YAAY,CAACH,KAAD,EAAiC;AAC3C,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,2BAAd,EAA2CF,KAA3C,CAAT,CAAP;AACD;;AAEDI,EAAAA,EAAE,CAACC,OAAD,EAAsE;AACtE,WAAO,KAAKJ,GAAL,CAAS,gBAAT,EAA2BI,OAA3B,CAAP;AACD;;AAEDC,EAAAA,OAAO,CAACC,EAAD,EAAaF,OAAb,EAAkD;AACvD,WAAO,KAAKJ,GAAL,CAAU,eAAcM,EAAG,EAA3B,EAA8BF,OAA9B,CAAP;AACD;;AAEDG,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,MAAM,GAAGZ,eAAe,EAA9B;AACA,WAAQ,GAAEY,MAAM,CAACC,wBAAyB,2BAA1C;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMF,MAAM,GAAGZ,eAAe,EAA9B;AACA,WAAQ,GAAEY,MAAM,CAACC,wBAAyB,0BAA1C;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,UAAMH,MAAM,GAAGZ,eAAe,EAA9B;AACA,WAAQ,GAAEY,MAAM,CAACC,wBAAyB,kCAA1C;AACD;;AAEDG,EAAAA,oBAAoB,GAAG;AACrB,UAAMJ,MAAM,GAAGZ,eAAe,EAA9B;AACA,WAAQ,GAAEY,MAAM,CAACC,wBAAyB,8BAA1C;AACD;;AAEDI,EAAAA,QAAQ,CAACP,EAAD,EAAaQ,OAAb,EAA2B;AACjC,WAAO,KAAKC,GAAL,CAAU,eAAcT,EAAG,EAA3B,EAA8BQ,OAA9B,CAAP;AACD;;AAEDE,EAAAA,eAAe,CAACjB,KAAD,EAAiC;AAC9C,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,iBAAd,EAAiCF,KAAjC,CAAT,CAAP;AACD;;AAEDkB,EAAAA,aAAa,CAACX,EAAD,EAAaQ,OAAb,EAAsB;AACjC,WAAO,KAAKC,GAAL,CAAU,eAAcT,EAAG,mBAA3B,EAA+CQ,OAA/C,CAAP;AACD;;AAEDI,EAAAA,oBAAoB,CAACZ,EAAD,EAAKQ,OAAL,EAAc;AAChC,WAAO,KAAKC,GAAL,CAAU,eAAcT,EAAG,2BAA3B,EAAuDQ,OAAvD,CAAP;AACD;;AAEDK,EAAAA,aAAa,CAACL,OAAD,EAAU;AACrB,WAAO,KAAKd,GAAL,CAAS,KAAKC,QAAL,CAAc,gCAAd,EAAgDa,OAAhD,CAAT,CAAP;AACD;;AAEDM,EAAAA,eAAe,CAACC,SAAD,EAGVC,UAHU,EAGa;AAC1B,WAAO,KAAKC,MAAL,CAAY,8BAAZ,EAA4CF,SAA5C,EAAuD;AAC5DC,MAAAA;AAD4D,KAAvD,CAAP;AAGD;;AAhE8C;AAmEjD,OAAO,MAAME,gBAAgB,GAAG,IAAI3B,gBAAJ,EAAzB","sourcesContent":["import { IPerformer } from 'src/interfaces';\nimport { APIRequest, IResponse } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class PerformerService extends APIRequest {\n  search(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/performers/user/search', query));\n  }\n\n  randomSearch(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/performers/search/random', query));\n  }\n\n  me(headers?: { [key: string]: string }): Promise<IResponse<IPerformer>> {\n    return this.get('/performers/me', headers);\n  }\n\n  findOne(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/performers/${id}`, headers);\n  }\n\n  getAvatarUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/avatar/upload`;\n  }\n\n  getCoverUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/cover/upload`;\n  }\n\n  getVideoUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/welcome-video/upload`;\n  }\n\n  getDocumentUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/documents/upload`;\n  }\n\n  updateMe(id: string, payload: any) {\n    return this.put(`/performers/${id}`, payload);\n  }\n\n  getTopPerformer(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/performers/top', query));\n  }\n\n  updateBanking(id: string, payload) {\n    return this.put(`/performers/${id}/banking-settings`, payload);\n  }\n\n  updatePaymentGateway(id, payload) {\n    return this.put(`/performers/${id}/payment-gateway-settings`, payload);\n  }\n\n  getBookmarked(payload) {\n    return this.get(this.buildUrl('/reactions/performers/bookmark', payload));\n  }\n\n  uploadDocuments(documents: {\n    file: File;\n    fieldname: string;\n  }[], onProgress?: Function) {\n    return this.upload('/performers/documents/upload', documents, {\n      onProgress\n    });\n  }\n}\n\nexport const performerService = new PerformerService();\n"]},"metadata":{},"sourceType":"module"}