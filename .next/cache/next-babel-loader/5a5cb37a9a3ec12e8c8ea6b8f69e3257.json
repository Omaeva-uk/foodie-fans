{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { blockService } from '@services/index';\nimport BlankLayout from './blank-layout';\nimport PrimaryLayout from './primary-layout';\nimport MaintenaceLayout from './maintenance-layout';\nimport GEOLayout from './geoBlocked-layout';\nimport PublicLayout from './public-layout';\nconst LayoutMap = {\n  geoBlock: GEOLayout,\n  maintenance: MaintenaceLayout,\n  primary: PrimaryLayout,\n  public: PublicLayout,\n  blank: BlankLayout\n};\nexport default class BaseLayout extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      geoBlocked: false\n    });\n  }\n\n  componentDidMount() {\n    false && document.addEventListener('contextmenu', event => event.preventDefault());\n    this.clientCheckBlockByIp();\n  }\n\n  componentWillUnmount() {\n    false && document.removeEventListener('contextmenu', event => event.preventDefault());\n  }\n\n  async clientCheckBlockByIp() {\n    var _checkBlock$data;\n\n    const checkBlock = await blockService.checkCountryBlock();\n\n    if (checkBlock !== null && checkBlock !== void 0 && (_checkBlock$data = checkBlock.data) !== null && _checkBlock$data !== void 0 && _checkBlock$data.blocked) {\n      this.setState({\n        geoBlocked: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      children,\n      layout,\n      maintenance = false\n    } = this.props;\n    const {\n      geoBlocked\n    } = this.state; // eslint-disable-next-line no-nested-ternary\n\n    const Container = maintenance ? LayoutMap.maintenance : geoBlocked ? LayoutMap.geoBlock : layout && LayoutMap[layout] ? LayoutMap[layout] : LayoutMap.primary;\n    return __jsx(Container, null, children);\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/layouts/base-layout.tsx"],"names":["PureComponent","blockService","BlankLayout","PrimaryLayout","MaintenaceLayout","GEOLayout","PublicLayout","LayoutMap","geoBlock","maintenance","primary","public","blank","BaseLayout","geoBlocked","componentDidMount","document","addEventListener","event","preventDefault","clientCheckBlockByIp","componentWillUnmount","removeEventListener","checkBlock","checkCountryBlock","data","blocked","setState","render","children","layout","props","state","Container"],"mappings":";;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAQA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAEH,SADM;AAEhBI,EAAAA,WAAW,EAAEL,gBAFG;AAGhBM,EAAAA,OAAO,EAAEP,aAHO;AAIhBQ,EAAAA,MAAM,EAAEL,YAJQ;AAKhBM,EAAAA,KAAK,EAAEV;AALS,CAAlB;AAQA,eAAe,MAAMW,UAAN,SAAyBb,aAAzB,CAAqD;AAAA;AAAA;;AAAA,mCAC1D;AACNc,MAAAA,UAAU,EAAE;AADN,KAD0D;AAAA;;AAKlEC,EAAAA,iBAAiB,GAAG;AAClB,aAAyCC,QAAQ,CAACC,gBAAT,CAA0B,aAA1B,EAA0CC,KAAD,IAAWA,KAAK,CAACC,cAAN,EAApD,CAAzC;AACA,SAAKC,oBAAL;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,aAAyCL,QAAQ,CAACM,mBAAT,CAA6B,aAA7B,EAA6CJ,KAAD,IAAWA,KAAK,CAACC,cAAN,EAAvD,CAAzC;AACD;;AAEyB,QAApBC,oBAAoB,GAAG;AAAA;;AAC3B,UAAMG,UAAU,GAAG,MAAMtB,YAAY,CAACuB,iBAAb,EAAzB;;AACA,QAAID,UAAJ,aAAIA,UAAJ,mCAAIA,UAAU,CAAEE,IAAhB,6CAAI,iBAAkBC,OAAtB,EAA+B;AAC7B,WAAKC,QAAL,CAAc;AAAEb,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD;AACF;;AAEDc,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,QADI;AACMC,MAAAA,MADN;AACcrB,MAAAA,WAAW,GAAG;AAD5B,QAEF,KAAKsB,KAFT;AAGA,UAAM;AAAEjB,MAAAA;AAAF,QAAiB,KAAKkB,KAA5B,CAJO,CAKP;;AACA,UAAMC,SAAS,GAAGxB,WAAW,GAAGF,SAAS,CAACE,WAAb,GAA2BK,UAAU,GAAGP,SAAS,CAACC,QAAb,GAAwBsB,MAAM,IAAIvB,SAAS,CAACuB,MAAD,CAAnB,GAA8BvB,SAAS,CAACuB,MAAD,CAAvC,GAAkDvB,SAAS,CAACG,OAAtJ;AACA,WACE,MAAC,SAAD,QAAYmB,QAAZ,CADF;AAGD;;AA/BiE","sourcesContent":["import { PureComponent } from 'react';\nimport { blockService } from '@services/index';\nimport BlankLayout from './blank-layout';\nimport PrimaryLayout from './primary-layout';\nimport MaintenaceLayout from './maintenance-layout';\nimport GEOLayout from './geoBlocked-layout';\nimport PublicLayout from './public-layout';\n\ninterface DefaultProps {\n  children: any;\n  layout: string;\n  maintenance: boolean;\n}\n\nconst LayoutMap = {\n  geoBlock: GEOLayout,\n  maintenance: MaintenaceLayout,\n  primary: PrimaryLayout,\n  public: PublicLayout,\n  blank: BlankLayout\n};\n\nexport default class BaseLayout extends PureComponent<DefaultProps> {\n  state = {\n    geoBlocked: false\n  }\n\n  componentDidMount() {\n    process.env.NODE_ENV === 'production' && document.addEventListener('contextmenu', (event) => event.preventDefault());\n    this.clientCheckBlockByIp();\n  }\n\n  componentWillUnmount() {\n    process.env.NODE_ENV === 'production' && document.removeEventListener('contextmenu', (event) => event.preventDefault());\n  }\n\n  async clientCheckBlockByIp() {\n    const checkBlock = await blockService.checkCountryBlock();\n    if (checkBlock?.data?.blocked) {\n      this.setState({ geoBlocked: true });\n    }\n  }\n\n  render() {\n    const {\n      children, layout, maintenance = false\n    } = this.props;\n    const { geoBlocked } = this.state;\n    // eslint-disable-next-line no-nested-ternary\n    const Container = maintenance ? LayoutMap.maintenance : geoBlocked ? LayoutMap.geoBlock : layout && LayoutMap[layout] ? LayoutMap[layout] : LayoutMap.primary;\n    return (\n      <Container>{children}</Container>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}