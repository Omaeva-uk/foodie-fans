{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Dropdown, Button, Menu } from 'antd';\nexport class DropdownAction extends PureComponent {\n  render() {\n    const {\n      menuOptions = [],\n      buttonStyle,\n      dropdownProps,\n      nameButtonMain\n    } = this.props;\n    const menu = menuOptions.map(item => __jsx(Menu.Item, {\n      key: item.key,\n      onClick: () => item.onClick && item.onClick()\n    }, item.children || item.name));\n    return __jsx(Dropdown, _extends({\n      overlay: __jsx(Menu, null, menu)\n    }, dropdownProps), __jsx(Button, {\n      style: _objectSpread({}, buttonStyle)\n    }, nameButtonMain || 'Action', __jsx(DownOutlined, null)));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/common/dropdown-action.tsx"],"names":["PureComponent","DownOutlined","Dropdown","Button","Menu","DropdownAction","render","menuOptions","buttonStyle","dropdownProps","nameButtonMain","props","menu","map","item","key","onClick","children","name"],"mappings":";;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,IAA3B,QAAuC,MAAvC;AAgBA,OAAO,MAAMC,cAAN,SAA6BL,aAA7B,CAAmD;AACxDM,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,WAAW,GAAG,EADV;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,aAHI;AAIJC,MAAAA;AAJI,QAKF,KAAKC,KALT;AAMA,UAAMC,IAAI,GAAGL,WAAW,CAACM,GAAZ,CAAiBC,IAAD,IAC3B,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA,IAAI,CAACC,GAArB;AAA0B,MAAA,OAAO,EAAE,MAAMD,IAAI,CAACE,OAAL,IAAgBF,IAAI,CAACE,OAAL;AAAzD,OACGF,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACI,IADzB,CADW,CAAb;AAKA,WACE,MAAC,QAAD;AAAU,MAAA,OAAO,EAAE,MAAC,IAAD,QAAON,IAAP;AAAnB,OAA4CH,aAA5C,GACE,MAAC,MAAD;AAAQ,MAAA,KAAK,oBAAOD,WAAP;AAAb,OACGE,cAAc,IAAI,QADrB,EAEE,MAAC,YAAD,OAFF,CADF,CADF;AAQD;;AArBuD","sourcesContent":["import { PureComponent } from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Dropdown, Button, Menu } from 'antd';\n\ninterface IMenuOption {\n  key: string;\n  name: string;\n  onClick?: Function;\n  children?: any;\n}\n\ninterface IProps {\n  menuOptions?: IMenuOption[];\n  buttonStyle?: any;\n  dropdownProps?: any;\n  nameButtonMain?: string;\n}\n\nexport class DropdownAction extends PureComponent<IProps> {\n  render() {\n    const {\n      menuOptions = [],\n      buttonStyle,\n      dropdownProps,\n      nameButtonMain\n    } = this.props;\n    const menu = menuOptions.map((item) => (\n      <Menu.Item key={item.key} onClick={() => item.onClick && item.onClick()}>\n        {item.children || item.name}\n      </Menu.Item>\n    ));\n    return (\n      <Dropdown overlay={<Menu>{menu}</Menu>} {...dropdownProps}>\n        <Button style={{ ...buttonStyle }}>\n          {nameButtonMain || 'Action'}\n          <DownOutlined />\n        </Button>\n      </Dropdown>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}