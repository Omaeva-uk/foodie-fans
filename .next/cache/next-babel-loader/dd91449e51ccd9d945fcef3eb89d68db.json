{"ast":null,"code":"import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport class MessageService extends APIRequest {\n  getConversations(query) {\n    return this.get(this.buildUrl('/conversations', query));\n  }\n\n  searchConversations(query) {\n    return this.get(this.buildUrl('/conversations/search', query));\n  }\n\n  createConversation(data) {\n    return this.post('/conversations', data);\n  }\n\n  getConversationDetail(id) {\n    return this.get(`/conversations/${id}`);\n  }\n\n  getMessages(conversationId, query) {\n    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));\n  }\n\n  sendMessage(conversationId, data) {\n    return this.post(`/messages/conversations/${conversationId}`, data);\n  }\n\n  countTotalNotRead() {\n    return this.get('/messages/counting-not-read-messages');\n  }\n\n  readAllInConversation(conversationId) {\n    return this.post(`/messages/read-all/${conversationId}`);\n  }\n\n  getMessageUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;\n  }\n\n  getConversationByStreamId(streamId) {\n    return this.get(`/conversations/stream/${streamId}`);\n  }\n\n  getPublicMessages(conversationId, query) {\n    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));\n  }\n\n  sendStreamMessage(conversationId, data) {\n    return this.post(`/messages/stream/conversations/${conversationId}`, data);\n  }\n\n  sendPublicStreamMessage(conversationId, data) {\n    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);\n  }\n\n  findPublicConversationPerformer(performerId) {\n    return this.get(`/conversations/stream/public/${performerId}`);\n  }\n\n  deleteMessage(id) {\n    return this.del(`/messages/${id}`);\n  }\n\n  deleteAllMessageInConversation(conversationId) {\n    return this.del(`/messages/${conversationId}/remove-all-message`);\n  }\n\n  updateConversationName(conversationId, data) {\n    return this.put(`/conversations/${conversationId}/update`, data);\n  }\n\n}\nexport const messageService = new MessageService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/message.service.ts"],"names":["APIRequest","getGlobalConfig","MessageService","getConversations","query","get","buildUrl","searchConversations","createConversation","data","post","getConversationDetail","id","getMessages","conversationId","sendMessage","countTotalNotRead","readAllInConversation","getMessageUploadUrl","config","NEXT_PUBLIC_API_ENDPOINT","getConversationByStreamId","streamId","getPublicMessages","sendStreamMessage","sendPublicStreamMessage","findPublicConversationPerformer","performerId","deleteMessage","del","deleteAllMessageInConversation","updateConversationName","put","messageService"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,MAAMC,cAAN,SAA6BF,UAA7B,CAAwC;AAC7CG,EAAAA,gBAAgB,CAACC,KAAD,EAA8B;AAC5C,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,gBAAd,EAAgCF,KAAhC,CAAT,CAAP;AACD;;AAEDG,EAAAA,mBAAmB,CAACH,KAAD,EAA8B;AAC/C,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,uBAAd,EAAuCF,KAAvC,CAAT,CAAP;AACD;;AAEDI,EAAAA,kBAAkB,CAACC,IAAD,EAA+B;AAC/C,WAAO,KAAKC,IAAL,CAAU,gBAAV,EAA4BD,IAA5B,CAAP;AACD;;AAEDE,EAAAA,qBAAqB,CAACC,EAAD,EAAa;AAChC,WAAO,KAAKP,GAAL,CAAU,kBAAiBO,EAAG,EAA9B,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACC,cAAD,EAAyBV,KAAzB,EAAsD;AAC/D,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAe,2BAA0BQ,cAAe,EAAxD,EAA2DV,KAA3D,CAAT,CAAP;AACD;;AAEDW,EAAAA,WAAW,CAACD,cAAD,EAAyBL,IAAzB,EAAoD;AAC7D,WAAO,KAAKC,IAAL,CAAW,2BAA0BI,cAAe,EAApD,EAAuDL,IAAvD,CAAP;AACD;;AAEDO,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKX,GAAL,CAAS,sCAAT,CAAP;AACD;;AAEDY,EAAAA,qBAAqB,CAACH,cAAD,EAAyB;AAC5C,WAAO,KAAKJ,IAAL,CAAW,sBAAqBI,cAAe,EAA/C,CAAP;AACD;;AAEDI,EAAAA,mBAAmB,GAAG;AACpB,UAAMC,MAAM,GAAGlB,eAAe,EAA9B;AACA,WAAQ,GAAEkB,MAAM,CAACC,wBAAyB,wBAA1C;AACD;;AAEDC,EAAAA,yBAAyB,CAACC,QAAD,EAAmB;AAC1C,WAAO,KAAKjB,GAAL,CAAU,yBAAwBiB,QAAS,EAA3C,CAAP;AACD;;AAEDC,EAAAA,iBAAiB,CAACT,cAAD,EAAyBV,KAAzB,EAAsD;AACrE,WAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAe,kCAAiCQ,cAAe,EAA/D,EAAkEV,KAAlE,CAAT,CAAP;AACD;;AAEDoB,EAAAA,iBAAiB,CAACV,cAAD,EAAyBL,IAAzB,EAAoD;AACnE,WAAO,KAAKC,IAAL,CAAW,kCAAiCI,cAAe,EAA3D,EAA8DL,IAA9D,CAAP;AACD;;AAEDgB,EAAAA,uBAAuB,CAACX,cAAD,EAAyBL,IAAzB,EAAoD;AACzE,WAAO,KAAKC,IAAL,CAAW,yCAAwCI,cAAe,EAAlE,EAAqEL,IAArE,CAAP;AACD;;AAEDiB,EAAAA,+BAA+B,CAACC,WAAD,EAAsB;AACnD,WAAO,KAAKtB,GAAL,CAAU,gCAA+BsB,WAAY,EAArD,CAAP;AACD;;AAEDC,EAAAA,aAAa,CAAChB,EAAD,EAAK;AAChB,WAAO,KAAKiB,GAAL,CAAU,aAAYjB,EAAG,EAAzB,CAAP;AACD;;AAEDkB,EAAAA,8BAA8B,CAAChB,cAAD,EAAiB;AAC7C,WAAO,KAAKe,GAAL,CAAU,aAAYf,cAAe,qBAArC,CAAP;AACD;;AAEDiB,EAAAA,sBAAsB,CAACjB,cAAD,EAAiBL,IAAjB,EAAuB;AAC3C,WAAO,KAAKuB,GAAL,CAAU,kBAAiBlB,cAAe,SAA1C,EAAoDL,IAApD,CAAP;AACD;;AApE4C;AAuE/C,OAAO,MAAMwB,cAAc,GAAG,IAAI/B,cAAJ,EAAvB","sourcesContent":["import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class MessageService extends APIRequest {\n  getConversations(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/conversations', query));\n  }\n\n  searchConversations(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/conversations/search', query));\n  }\n\n  createConversation(data: Record<string, string>) {\n    return this.post('/conversations', data);\n  }\n\n  getConversationDetail(id: string) {\n    return this.get(`/conversations/${id}`);\n  }\n\n  getMessages(conversationId: string, query?: Record<string, any>) {\n    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));\n  }\n\n  sendMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/conversations/${conversationId}`, data);\n  }\n\n  countTotalNotRead() {\n    return this.get('/messages/counting-not-read-messages');\n  }\n\n  readAllInConversation(conversationId: string) {\n    return this.post(`/messages/read-all/${conversationId}`);\n  }\n\n  getMessageUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;\n  }\n\n  getConversationByStreamId(streamId: string) {\n    return this.get(`/conversations/stream/${streamId}`);\n  }\n\n  getPublicMessages(conversationId: string, query?: Record<string, any>) {\n    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));\n  }\n\n  sendStreamMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/stream/conversations/${conversationId}`, data);\n  }\n\n  sendPublicStreamMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);\n  }\n\n  findPublicConversationPerformer(performerId: string) {\n    return this.get(`/conversations/stream/public/${performerId}`);\n  }\n\n  deleteMessage(id) {\n    return this.del(`/messages/${id}`);\n  }\n\n  deleteAllMessageInConversation(conversationId) {\n    return this.del(`/messages/${conversationId}/remove-all-message`);\n  }\n\n  updateConversationName(conversationId, data) {\n    return this.put(`/conversations/${conversationId}/update`, data);\n  }\n}\n\nexport const messageService = new MessageService();\n"]},"metadata":{},"sourceType":"module"}