{"ast":null,"code":"import { flatten, pick } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport { loginSocial, login, loginSuccess, logout, loginFail, registerFanFail, registerFan, registerFanSuccess, registerPerformerFail, registerPerformer, registerPerformerSuccess, forgot, forgotSuccess, forgotFail, getCurrentUser } from './actions';\nconst authSagas = [{\n  on: login,\n\n  *worker(data) {\n    try {\n      var _userResp$data, _userResp$data2;\n\n      const payload = data.payload;\n      const resp = (yield authService.login(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setToken(resp.token, payload === null || payload === void 0 ? void 0 : payload.remember);\n      const userResp = yield userService.me();\n      yield put(updateCurrentUser(userResp.data));\n      yield put(loginSuccess());\n\n      if (!(userResp !== null && userResp !== void 0 && (_userResp$data = userResp.data) !== null && _userResp$data !== void 0 && _userResp$data.isPerformer)) {\n        Router.push(!userResp.data.email || !userResp.data.username ? '/user/account' : '/home');\n      }\n\n      if (userResp !== null && userResp !== void 0 && (_userResp$data2 = userResp.data) !== null && _userResp$data2 !== void 0 && _userResp$data2.isPerformer) {\n        !userResp.data.email || !userResp.data.username ? Router.push('/model/account') : Router.push({\n          pathname: '/model/profile',\n          query: {\n            username: userResp.data.username || userResp.data._id\n          }\n        }, `/${userResp.data.username || userResp.data._id}`);\n      }\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Incorrect credentials!');\n      yield put(loginFail(error));\n    }\n  }\n\n}, {\n  on: loginSocial,\n\n  *worker(data) {\n    try {\n      var _userResp$data3, _userResp$data4;\n\n      const payload = data.payload;\n      const {\n        token\n      } = payload;\n      yield authService.setToken(token);\n      const userResp = yield userService.me();\n      yield put(updateCurrentUser(userResp.data));\n      yield put(loginSuccess());\n\n      if (!(userResp !== null && userResp !== void 0 && (_userResp$data3 = userResp.data) !== null && _userResp$data3 !== void 0 && _userResp$data3.isPerformer)) {\n        Router.push(!userResp.data.email || !userResp.data.username ? '/user/account' : '/home');\n      }\n\n      if (userResp !== null && userResp !== void 0 && (_userResp$data4 = userResp.data) !== null && _userResp$data4 !== void 0 && _userResp$data4.isPerformer) {\n        !userResp.data.email || !userResp.data.username ? Router.push('/model/account') : Router.push({\n          pathname: '/model/profile',\n          query: {\n            username: userResp.data.username || userResp.data._id\n          }\n        }, `/${userResp.data.username || userResp.data._id}`);\n      }\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Incorrect credentials!');\n      yield put(loginFail(error));\n    }\n  }\n\n}, {\n  on: registerFan,\n\n  *worker(data) {\n    try {\n      const payload = data.payload;\n      const resp = (yield authService.register(payload)).data;\n      message.success((resp === null || resp === void 0 ? void 0 : resp.message) || 'Sign up success!', 10);\n      Router.push('/');\n      yield put(registerFanSuccess(resp));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'This Username or email address has been already taken.', 5);\n      yield put(registerFanFail(error));\n    }\n  }\n\n}, {\n  on: registerPerformer,\n\n  *worker(data) {\n    try {\n      const verificationFiles = [{\n        fieldname: 'idVerification',\n        file: data.payload.idVerificationFile\n      }, {\n        fieldname: 'documentVerification',\n        file: data.payload.documentVerificationFile\n      }];\n      const payload = pick(data.payload, ['name', 'username', 'password', 'gender', 'email', 'firstName', 'lastName', 'country', 'dateOfBirth']);\n      const resp = (yield authService.registerPerformer(verificationFiles, payload, () => {})).data;\n      yield put(registerPerformerSuccess(resp));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error(error.message || 'An error occured, please try again later');\n      yield put(registerPerformerFail(error));\n    }\n  }\n\n}, {\n  on: logout,\n\n  *worker() {\n    yield authService.removeToken();\n    Router.replace('/');\n  }\n\n}, {\n  on: forgot,\n\n  *worker(data) {\n    try {\n      const payload = data.payload;\n      const resp = (yield authService.resetPassword(payload)).data;\n      message.success('We\\'ve sent an email to reset your password, please check your inbox.', 10);\n      yield put(forgotSuccess(resp));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      message.error(error && error.message || 'Something went wrong. Please try again later', 5);\n      yield put(forgotFail(error));\n    }\n  }\n\n}, {\n  on: getCurrentUser,\n\n  *worker() {\n    try {\n      const userResp = yield userService.me();\n      yield put(updateCurrentUser(userResp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e); // eslint-disable-next-line no-console\n\n      console.log(error);\n    }\n  }\n\n}];\nexport default flatten([createSagas(authSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/auth/sagas.ts"],"names":["flatten","pick","put","createSagas","Router","authService","userService","message","updateCurrentUser","loginSocial","login","loginSuccess","logout","loginFail","registerFanFail","registerFan","registerFanSuccess","registerPerformerFail","registerPerformer","registerPerformerSuccess","forgot","forgotSuccess","forgotFail","getCurrentUser","authSagas","on","worker","data","payload","resp","setToken","token","remember","userResp","me","isPerformer","push","email","username","pathname","query","_id","e","error","Promise","resolve","register","success","verificationFiles","fieldname","file","idVerificationFile","documentVerificationFile","removeToken","replace","resetPassword","console","log"],"mappings":"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","sourcesContent":["import { flatten, pick } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService } from 'src/services';\nimport {\n  ILogin, IFanRegister, IForgot\n} from 'src/interfaces';\nimport { message } from 'antd';\nimport { updateCurrentUser } from '../user/actions';\nimport {\n  loginSocial,\n  login,\n  loginSuccess,\n  logout,\n  loginFail,\n  registerFanFail,\n  registerFan,\n  registerFanSuccess,\n  registerPerformerFail,\n  registerPerformer,\n  registerPerformerSuccess,\n  forgot,\n  forgotSuccess,\n  forgotFail,\n  getCurrentUser\n} from './actions';\n\nconst authSagas = [\n  {\n    on: login,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.login(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setToken(resp.token, payload?.remember);\n        const userResp = yield userService.me();\n        yield put(updateCurrentUser(userResp.data));\n        yield put(loginSuccess());\n        if (!userResp?.data?.isPerformer) {\n          Router.push((!userResp.data.email || !userResp.data.username) ? '/user/account' : '/home');\n        }\n        if (userResp?.data?.isPerformer) {\n          (!userResp.data.email || !userResp.data.username) ? Router.push('/model/account') : Router.push({ pathname: '/model/profile', query: { username: userResp.data.username || userResp.data._id } }, `/${userResp.data.username || userResp.data._id}`);\n        }\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Incorrect credentials!');\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: loginSocial,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as any;\n        const { token } = payload;\n        yield authService.setToken(token);\n        const userResp = yield userService.me();\n        yield put(updateCurrentUser(userResp.data));\n        yield put(loginSuccess());\n        if (!userResp?.data?.isPerformer) {\n          Router.push((!userResp.data.email || !userResp.data.username) ? '/user/account' : '/home');\n        }\n        if (userResp?.data?.isPerformer) {\n          (!userResp.data.email || !userResp.data.username) ? Router.push('/model/account') : Router.push({ pathname: '/model/profile', query: { username: userResp.data.username || userResp.data._id } }, `/${userResp.data.username || userResp.data._id}`);\n        }\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'Incorrect credentials!');\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: registerFan,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as IFanRegister;\n        const resp = (yield authService.register(payload)).data;\n        message.success(resp?.message || 'Sign up success!', 10);\n        Router.push('/');\n        yield put(registerFanSuccess(resp));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error?.message || 'This Username or email address has been already taken.', 5);\n        yield put(registerFanFail(error));\n      }\n    }\n  },\n  {\n    on: registerPerformer,\n    * worker(data: any) {\n      try {\n        const verificationFiles = [{\n          fieldname: 'idVerification',\n          file: data.payload.idVerificationFile\n        }, {\n          fieldname: 'documentVerification',\n          file: data.payload.documentVerificationFile\n        }];\n        const payload = pick(data.payload, ['name', 'username', 'password',\n          'gender', 'email', 'firstName', 'lastName', 'country', 'dateOfBirth']);\n        const resp = (yield authService.registerPerformer(verificationFiles, payload, () => {})).data;\n        yield put(registerPerformerSuccess(resp));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error(error.message || 'An error occured, please try again later');\n        yield put(registerPerformerFail(error));\n      }\n    }\n  },\n  {\n    on: logout,\n    * worker() {\n      yield authService.removeToken();\n      Router.replace('/');\n    }\n  },\n  {\n    on: forgot,\n    * worker(data: any) {\n      try {\n        const payload = data.payload as IForgot;\n        const resp = (yield authService.resetPassword(payload)).data;\n        message.success(\n          'We\\'ve sent an email to reset your password, please check your inbox.',\n          10\n        );\n        yield put(forgotSuccess(resp));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        message.error((error && error.message) || 'Something went wrong. Please try again later', 5);\n        yield put(forgotFail(error));\n      }\n    }\n  },\n  {\n    on: getCurrentUser,\n    * worker() {\n      try {\n        const userResp = yield userService.me();\n        yield put(updateCurrentUser(userResp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(authSagas)]);\n"]},"metadata":{},"sourceType":"module"}