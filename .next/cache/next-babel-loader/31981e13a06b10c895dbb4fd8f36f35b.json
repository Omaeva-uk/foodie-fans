{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\n\nvar StreamService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(StreamService, _APIRequest);\n\n  var _super = _createSuper(StreamService);\n\n  function StreamService() {\n    _classCallCheck(this, StreamService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StreamService, [{\n    key: \"updateStreamInfo\",\n    value: function updateStreamInfo(payload) {\n      return this.put('/streaming/update', payload);\n    }\n  }, {\n    key: \"updateStreamDuration\",\n    value: function updateStreamDuration(payload) {\n      return this.put('/streaming/set-duration', payload);\n    }\n  }, {\n    key: \"goLive\",\n    value: function goLive(data) {\n      return this.post('/streaming/live', data);\n    }\n  }, {\n    key: \"editLive\",\n    value: function editLive(id, data) {\n      return this.put(\"/streaming/live/\".concat(id), data);\n    }\n  }, {\n    key: \"joinPublicChat\",\n    value: function joinPublicChat(performerId, headers) {\n      return this.post(\"/streaming/join/\".concat(performerId), headers);\n    }\n  }, {\n    key: \"fetchAgoraAppToken\",\n    value: function fetchAgoraAppToken(data) {\n      return this.post('/streaming/agora/token', data);\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      return this.get(this.buildUrl('/streaming/user/search', query));\n    }\n  }]);\n\n  return StreamService;\n}(APIRequest);\n\nexport var streamService = new StreamService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/stream.service.tsx"],"names":["APIRequest","StreamService","payload","put","data","post","id","performerId","headers","query","get","buildUrl","streamService"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;;IAEMC,a;;;;;;;;;;;;;WACJ,0BAAiBC,OAAjB,EAA0B;AACxB,aAAO,KAAKC,GAAL,CAAS,mBAAT,EAA8BD,OAA9B,CAAP;AACD;;;WAED,8BAAqBA,OAArB,EAA8B;AAC5B,aAAO,KAAKC,GAAL,CAAS,yBAAT,EAAoCD,OAApC,CAAP;AACD;;;WAED,gBAAOE,IAAP,EAAa;AACX,aAAO,KAAKC,IAAL,CAAU,iBAAV,EAA6BD,IAA7B,CAAP;AACD;;;WAED,kBAASE,EAAT,EAAaF,IAAb,EAAmB;AACjB,aAAO,KAAKD,GAAL,2BAA4BG,EAA5B,GAAkCF,IAAlC,CAAP;AACD;;;WAED,wBAAeG,WAAf,EAAoCC,OAApC,EAAmD;AACjD,aAAO,KAAKH,IAAL,2BAA6BE,WAA7B,GAA4CC,OAA5C,CAAP;AACD;;;WAED,4BAAmBJ,IAAnB,EAAyB;AACvB,aAAO,KAAKC,IAAL,CAAU,wBAAV,EAAoCD,IAApC,CAAP;AACD;;;WAED,gBAAOK,KAAP,EAAsC;AACpC,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,wBAAd,EAAwCF,KAAxC,CAAT,CAAP;AACD;;;;EA3ByBT,U;;AA8B5B,OAAO,IAAMY,aAAa,GAAG,IAAIX,aAAJ,EAAtB","sourcesContent":["import { APIRequest } from './api-request';\n\nclass StreamService extends APIRequest {\n  updateStreamInfo(payload) {\n    return this.put('/streaming/update', payload);\n  }\n\n  updateStreamDuration(payload) {\n    return this.put('/streaming/set-duration', payload);\n  }\n\n  goLive(data) {\n    return this.post('/streaming/live', data);\n  }\n\n  editLive(id, data) {\n    return this.put(`/streaming/live/${id}`, data);\n  }\n\n  joinPublicChat(performerId: string, headers?: any) {\n    return this.post(`/streaming/join/${performerId}`, headers);\n  }\n\n  fetchAgoraAppToken(data) {\n    return this.post('/streaming/agora/token', data);\n  }\n\n  search(query: { [key: string]: any }) {\n    return this.get(this.buildUrl('/streaming/user/search', query));\n  }\n}\n\nexport const streamService = new StreamService();\n"]},"metadata":{},"sourceType":"module"}