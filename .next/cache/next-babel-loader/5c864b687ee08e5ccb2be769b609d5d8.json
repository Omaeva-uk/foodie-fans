{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { APIRequest } from './api-request';\nexport class SettingService extends APIRequest {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_settings\", {});\n  }\n\n  async all(group = '', forceReload = false) {\n    const settingGroup = group || 'all';\n\n    if (this._settings[settingGroup] && !forceReload) {\n      return this._settings[settingGroup];\n    }\n\n    const resp = await this.get(this.buildUrl('/settings/public', {\n      group\n    }));\n    this._settings[settingGroup] = resp;\n    return resp;\n  }\n\n  contact(data) {\n    return this.post('/contact', data);\n  }\n\n}\nexport const settingService = new SettingService();","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/services/setting.service.ts"],"names":["APIRequest","SettingService","all","group","forceReload","settingGroup","_settings","resp","get","buildUrl","contact","data","post","settingService"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,cAAN,SAA6BD,UAA7B,CAAwC;AAAA;AAAA;;AAAA,uCACzB,EADyB;AAAA;;AAGpC,QAAHE,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,WAAW,GAAG,KAA3B,EAAkC;AACzC,UAAMC,YAAY,GAAGF,KAAK,IAAI,KAA9B;;AACA,QAAI,KAAKG,SAAL,CAAeD,YAAf,KAAgC,CAACD,WAArC,EAAkD;AAChD,aAAO,KAAKE,SAAL,CAAeD,YAAf,CAAP;AACD;;AACD,UAAME,IAAI,GAAG,MAAM,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,kBAAd,EAAkC;AAAEN,MAAAA;AAAF,KAAlC,CAAT,CAAnB;AACA,SAAKG,SAAL,CAAeD,YAAf,IAA+BE,IAA/B;AACA,WAAOA,IAAP;AACD;;AAEDG,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,WAAO,KAAKC,IAAL,CAAU,UAAV,EAAsBD,IAAtB,CAAP;AACD;;AAf4C;AAkB/C,OAAO,MAAME,cAAc,GAAG,IAAIZ,cAAJ,EAAvB","sourcesContent":["import { APIRequest } from './api-request';\n\nexport class SettingService extends APIRequest {\n  private _settings = {} as any;\n\n  async all(group = '', forceReload = false) {\n    const settingGroup = group || 'all';\n    if (this._settings[settingGroup] && !forceReload) {\n      return this._settings[settingGroup];\n    }\n    const resp = await this.get(this.buildUrl('/settings/public', { group }));\n    this._settings[settingGroup] = resp;\n    return resp;\n  }\n\n  contact(data) {\n    return this.post('/contact', data);\n  }\n}\n\nexport const settingService = new SettingService();\n"]},"metadata":{},"sourceType":"module"}