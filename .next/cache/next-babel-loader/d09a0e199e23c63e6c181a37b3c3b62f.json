{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, FileAddOutlined, FileDoneOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction beforeUpload(file) {\n  var config = getGlobalConfig();\n  var isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_FILE || 100);\n\n  if (!isLt2M) {\n    message.error(\"File is too large please provide an file \".concat(config.NEXT_PUBLIC_MAX_SIZE_FILE || 100, \"MB or below\"));\n  }\n\n  return isLt2M;\n}\n\nexport var FileUpload = /*#__PURE__*/function (_PureComponent) {\n  _inherits(FileUpload, _PureComponent);\n\n  var _super = _createSuper(FileUpload);\n\n  function FileUpload() {\n    var _this;\n\n    _classCallCheck(this, FileUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false,\n      fileUrl: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      if (info.file.status === 'uploading') {\n        _this.setState({\n          loading: true\n        });\n\n        return;\n      }\n\n      var _this$props = _this.props,\n          onFileReaded = _this$props.onFileReaded,\n          onUploaded = _this$props.onUploaded;\n\n      if (info.file.status === 'done') {\n        onFileReaded && onFileReaded(info.file.originFileObj); // Get this url from response in real world.\n\n        _this.setState({\n          loading: false,\n          fileUrl: info.file.response.data ? info.file.response.data.url : 'Done!'\n        });\n\n        onUploaded && onUploaded({\n          response: info.file.response\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(FileUpload, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fileUrl = this.props.fileUrl;\n      this.setState({\n        fileUrl: fileUrl\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.state.loading;\n\n      var uploadButton = __jsx(\"div\", null, loading ? __jsx(LoadingOutlined, null) : __jsx(FileAddOutlined, null));\n\n      var fileUrl = this.state.fileUrl;\n      var _this$props2 = this.props,\n          headers = _this$props2.headers,\n          uploadUrl = _this$props2.uploadUrl,\n          _this$props2$fieldNam = _this$props2.fieldName,\n          fieldName = _this$props2$fieldNam === void 0 ? 'file' : _this$props2$fieldNam,\n          accept = _this$props2.accept;\n      return __jsx(Upload, {\n        accept: accept || '*',\n        name: fieldName,\n        listType: \"picture-card\",\n        className: \"avatar-uploader\",\n        showUploadList: false,\n        action: uploadUrl,\n        beforeUpload: beforeUpload,\n        onChange: this.handleChange,\n        headers: headers\n      }, fileUrl ? __jsx(FileDoneOutlined, {\n        style: {\n          fontSize: '28px',\n          color: '#00ce00'\n        }\n      }) : uploadButton);\n    }\n  }]);\n\n  return FileUpload;\n}(PureComponent);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/file/file-upload.tsx"],"names":["Upload","message","LoadingOutlined","FileAddOutlined","FileDoneOutlined","PureComponent","getGlobalConfig","beforeUpload","file","config","isLt2M","size","NEXT_PUBLIC_MAX_SIZE_FILE","error","FileUpload","loading","fileUrl","info","status","setState","props","onFileReaded","onUploaded","originFileObj","response","data","url","state","uploadButton","headers","uploadUrl","fieldName","accept","handleChange","fontSize","color"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,gBAA3C,QAAmE,mBAAnE;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,eAAT,QAAgC,kBAAhC;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAMC,MAAM,GAAGH,eAAe,EAA9B;AACA,MAAMI,MAAM,GAAGF,IAAI,CAACG,IAAL,GAAY,IAAZ,GAAmB,IAAnB,IAA2BF,MAAM,CAACG,yBAAP,IAAoC,GAA/D,CAAf;;AACA,MAAI,CAACF,MAAL,EAAa;AACXT,IAAAA,OAAO,CAACY,KAAR,oDAA0DJ,MAAM,CAACG,yBAAP,IAAoC,GAA9F;AACD;;AACD,SAAOF,MAAP;AACD;;AAiBD,WAAaI,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,4DACU;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,OAAO,EAAE;AAFH,KADV;;AAAA,mEAWiB,UAACC,IAAD,EAAU;AACvB,UAAIA,IAAI,CAACT,IAAL,CAAUU,MAAV,KAAqB,WAAzB,EAAsC;AACpC,cAAKC,QAAL,CAAc;AAAEJ,UAAAA,OAAO,EAAE;AAAX,SAAd;;AACA;AACD;;AACD,wBAAqC,MAAKK,KAA1C;AAAA,UAAQC,YAAR,eAAQA,YAAR;AAAA,UAAsBC,UAAtB,eAAsBA,UAAtB;;AACA,UAAIL,IAAI,CAACT,IAAL,CAAUU,MAAV,KAAqB,MAAzB,EAAiC;AAC/BG,QAAAA,YAAY,IAAIA,YAAY,CAACJ,IAAI,CAACT,IAAL,CAAUe,aAAX,CAA5B,CAD+B,CAE/B;;AACA,cAAKJ,QAAL,CAAc;AACZJ,UAAAA,OAAO,EAAE,KADG;AAEZC,UAAAA,OAAO,EAAEC,IAAI,CAACT,IAAL,CAAUgB,QAAV,CAAmBC,IAAnB,GAA0BR,IAAI,CAACT,IAAL,CAAUgB,QAAV,CAAmBC,IAAnB,CAAwBC,GAAlD,GAAwD;AAFrD,SAAd;;AAIAJ,QAAAA,UAAU,IAAIA,UAAU,CAAC;AACvBE,UAAAA,QAAQ,EAAEP,IAAI,CAACT,IAAL,CAAUgB;AADG,SAAD,CAAxB;AAGD;AACF,KA5BH;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAME,6BAAoB;AAClB,UAAQR,OAAR,GAAoB,KAAKI,KAAzB,CAAQJ,OAAR;AACA,WAAKG,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACD;AATH;AAAA;AAAA,WA8BE,kBAAS;AACP,UAAQD,OAAR,GAAoB,KAAKY,KAAzB,CAAQZ,OAAR;;AACA,UAAMa,YAAY,GAChB,mBACGb,OAAO,GAAG,MAAC,eAAD,OAAH,GAAyB,MAAC,eAAD,OADnC,CADF;;AAKA,UAAQC,OAAR,GAAoB,KAAKW,KAAzB,CAAQX,OAAR;AACA,yBAEI,KAAKI,KAFT;AAAA,UACES,OADF,gBACEA,OADF;AAAA,UACWC,SADX,gBACWA,SADX;AAAA,+CACsBC,SADtB;AAAA,UACsBA,SADtB,sCACkC,MADlC;AAAA,UAC0CC,MAD1C,gBAC0CA,MAD1C;AAGA,aACE,MAAC,MAAD;AACE,QAAA,MAAM,EAAEA,MAAM,IAAI,GADpB;AAEE,QAAA,IAAI,EAAED,SAFR;AAGE,QAAA,QAAQ,EAAC,cAHX;AAIE,QAAA,SAAS,EAAC,iBAJZ;AAKE,QAAA,cAAc,EAAE,KALlB;AAME,QAAA,MAAM,EAAED,SANV;AAOE,QAAA,YAAY,EAAEvB,YAPhB;AAQE,QAAA,QAAQ,EAAE,KAAK0B,YARjB;AASE,QAAA,OAAO,EAAEJ;AATX,SAWGb,OAAO,GACN,MAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE;AAAEkB,UAAAA,QAAQ,EAAE,MAAZ;AAAoBC,UAAAA,KAAK,EAAE;AAA3B;AAAzB,QADM,GAGNP,YAdJ,CADF;AAmBD;AA5DH;;AAAA;AAAA,EAAgCvB,aAAhC","sourcesContent":["import { Upload, message } from 'antd';\nimport { LoadingOutlined, FileAddOutlined, FileDoneOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction beforeUpload(file) {\n  const config = getGlobalConfig();\n  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_FILE || 100);\n  if (!isLt2M) {\n    message.error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_FILE || 100}MB or below`);\n  }\n  return isLt2M;\n}\n\ninterface IState {\n  loading: boolean;\n  fileUrl: string;\n}\n\ninterface IProps {\n  accept?: string;\n  fieldName?: string;\n  fileUrl?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  onFileReaded?: Function;\n}\n\nexport class FileUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    fileUrl: ''\n  };\n\n  componentDidMount() {\n    const { fileUrl } = this.props;\n    this.setState({ fileUrl });\n  }\n\n  handleChange = (info) => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    const { onFileReaded, onUploaded } = this.props;\n    if (info.file.status === 'done') {\n      onFileReaded && onFileReaded(info.file.originFileObj);\n      // Get this url from response in real world.\n      this.setState({\n        loading: false,\n        fileUrl: info.file.response.data ? info.file.response.data.url : 'Done!'\n      });\n      onUploaded && onUploaded({\n        response: info.file.response\n      });\n    }\n  };\n\n  render() {\n    const { loading } = this.state;\n    const uploadButton = (\n      <div>\n        {loading ? <LoadingOutlined /> : <FileAddOutlined />}\n      </div>\n    );\n    const { fileUrl } = this.state;\n    const {\n      headers, uploadUrl, fieldName = 'file', accept\n    } = this.props;\n    return (\n      <Upload\n        accept={accept || '*'}\n        name={fieldName}\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={uploadUrl}\n        beforeUpload={beforeUpload}\n        onChange={this.handleChange}\n        headers={headers}\n      >\n        {fileUrl ? (\n          <FileDoneOutlined style={{ fontSize: '28px', color: '#00ce00' }} />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}