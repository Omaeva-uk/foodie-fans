{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nexport class ImageUploadModel extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false,\n      imageUrl: ''\n    });\n  }\n\n  componentDidMount() {\n    const {\n      imageUrl\n    } = this.props;\n    this.setState({\n      imageUrl\n    });\n  }\n\n  beforeUpload(file) {\n    const {\n      onFileReaded\n    } = this.props;\n    const config = getGlobalConfig();\n    const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20);\n\n    if (!isLt5M) {\n      message.error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20}MB or below`);\n      return false;\n    }\n\n    getBase64(file, imageUrl => {\n      this.setState({\n        imageUrl\n      });\n    });\n    onFileReaded && onFileReaded(file);\n    return true;\n  }\n\n  render() {\n    const {\n      options = {},\n      accept,\n      headers,\n      uploadUrl\n    } = this.props;\n    const {\n      imageUrl,\n      loading\n    } = this.state;\n\n    const uploadButton = __jsx(\"div\", null, loading ? __jsx(LoadingOutlined, null) : __jsx(CameraOutlined, null));\n\n    return __jsx(Upload, {\n      customRequest: () => false,\n      accept: accept || 'image/*',\n      name: options.fieldName || 'file',\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: uploadUrl,\n      beforeUpload: file => this.beforeUpload(file),\n      headers: headers\n    }, imageUrl ? __jsx(\"img\", {\n      src: imageUrl,\n      alt: \"file\",\n      style: {\n        width: '100%'\n      }\n    }) : uploadButton);\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/file/image-upload-model.tsx"],"names":["Upload","message","LoadingOutlined","CameraOutlined","PureComponent","getGlobalConfig","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","ImageUploadModel","loading","imageUrl","componentDidMount","props","setState","beforeUpload","file","onFileReaded","config","isLt5M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","render","options","accept","headers","uploadUrl","state","uploadButton","fieldName","width"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,MAAhC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,mBAAhD;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,eAAT,QAAgC,kBAAhC;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,QAAxB,EAAkC;AAChC,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,MAAMH,QAAQ,CAACC,MAAM,CAACG,MAAR,CAA9C;AACAH,EAAAA,MAAM,CAACI,aAAP,CAAqBN,GAArB;AACD;;AAiBD,OAAO,MAAMO,gBAAN,SAA+BV,aAA/B,CAA6D;AAAA;AAAA;;AAAA,mCAC1D;AACNW,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAD0D;AAAA;;AAMlEC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAED,MAAAA;AAAF,QAAe,KAAKE,KAA1B;AACA,SAAKC,QAAL,CAAc;AAAEH,MAAAA;AAAF,KAAd;AACD;;AAEDI,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,UAAM;AAAEC,MAAAA;AAAF,QAAmB,KAAKJ,KAA9B;AACA,UAAMK,MAAM,GAAGlB,eAAe,EAA9B;AACA,UAAMmB,MAAM,GAAGH,IAAI,CAACI,IAAL,GAAY,IAAZ,GAAmB,IAAnB,IAA2BF,MAAM,CAACG,0BAAP,IAAqC,EAAhE,CAAf;;AACA,QAAI,CAACF,MAAL,EAAa;AACXvB,MAAAA,OAAO,CAAC0B,KAAR,CAAe,8CAA6CJ,MAAM,CAACG,0BAAP,IAAqC,EAAG,aAApG;AACA,aAAO,KAAP;AACD;;AACDpB,IAAAA,SAAS,CAACe,IAAD,EAAQL,QAAD,IAAc;AAC5B,WAAKG,QAAL,CAAc;AACZH,QAAAA;AADY,OAAd;AAGD,KAJQ,CAAT;AAKAM,IAAAA,YAAY,IAAIA,YAAY,CAACD,IAAD,CAA5B;AACA,WAAO,IAAP;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,OAAO,GAAG,EADN;AACUC,MAAAA,MADV;AACkBC,MAAAA,OADlB;AAC2BC,MAAAA;AAD3B,QAEF,KAAKd,KAFT;AAGA,UAAM;AAAEF,MAAAA,QAAF;AAAYD,MAAAA;AAAZ,QAAwB,KAAKkB,KAAnC;;AACA,UAAMC,YAAY,GAChB,mBACGnB,OAAO,GAAG,MAAC,eAAD,OAAH,GAAyB,MAAC,cAAD,OADnC,CADF;;AAKA,WACE,MAAC,MAAD;AACE,MAAA,aAAa,EAAE,MAAM,KADvB;AAEE,MAAA,MAAM,EAAEe,MAAM,IAAI,SAFpB;AAGE,MAAA,IAAI,EAAED,OAAO,CAACM,SAAR,IAAqB,MAH7B;AAIE,MAAA,QAAQ,EAAC,cAJX;AAKE,MAAA,SAAS,EAAC,iBALZ;AAME,MAAA,cAAc,EAAE,KANlB;AAOE,MAAA,MAAM,EAAEH,SAPV;AAQE,MAAA,YAAY,EAAGX,IAAD,IAAU,KAAKD,YAAL,CAAkBC,IAAlB,CAR1B;AASE,MAAA,OAAO,EAAEU;AATX,OAWGf,QAAQ,GACP;AAAK,MAAA,GAAG,EAAEA,QAAV;AAAoB,MAAA,GAAG,EAAC,MAAxB;AAA+B,MAAA,KAAK,EAAE;AAAEoB,QAAAA,KAAK,EAAE;AAAT;AAAtC,MADO,GAGPF,YAdJ,CADF;AAmBD;;AAzDiE","sourcesContent":["import { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\ninterface IState {\n  loading: boolean;\n  imageUrl: string;\n}\n\ninterface IProps {\n  accept?: string;\n  imageUrl?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  onFileReaded?: Function;\n  options?: any;\n}\n\nexport class ImageUploadModel extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    imageUrl: ''\n  };\n\n  componentDidMount() {\n    const { imageUrl } = this.props;\n    this.setState({ imageUrl });\n  }\n\n  beforeUpload(file) {\n    const { onFileReaded } = this.props;\n    const config = getGlobalConfig();\n    const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20);\n    if (!isLt5M) {\n      message.error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20}MB or below`);\n      return false;\n    }\n    getBase64(file, (imageUrl) => {\n      this.setState({\n        imageUrl\n      });\n    });\n    onFileReaded && onFileReaded(file);\n    return true;\n  }\n\n  render() {\n    const {\n      options = {}, accept, headers, uploadUrl\n    } = this.props;\n    const { imageUrl, loading } = this.state;\n    const uploadButton = (\n      <div>\n        {loading ? <LoadingOutlined /> : <CameraOutlined />}\n      </div>\n    );\n    return (\n      <Upload\n        customRequest={() => false}\n        accept={accept || 'image/*'}\n        name={options.fieldName || 'file'}\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={uploadUrl}\n        beforeUpload={(file) => this.beforeUpload(file)}\n        headers={headers}\n      >\n        {imageUrl ? (\n          <img src={imageUrl} alt=\"file\" style={{ width: '100%' }} />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}