{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file, uploadImmediately = true) {\n  const config = getGlobalConfig();\n  const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n\n  if (!isLt5M) {\n    message.error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB or below`);\n  }\n\n  return uploadImmediately;\n}\n\nexport class ImageUpload extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false,\n      imageUrl: ''\n    });\n\n    _defineProperty(this, \"handleChange\", info => {\n      const {\n        onFileReaded,\n        onUploaded\n      } = this.props;\n\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        onFileReaded && onFileReaded(info.file.originFileObj); // Get this url from response in real world.\n\n        getBase64(info.file.originFileObj, imageUrl => {\n          this.setState({\n            imageUrl,\n            loading: false\n          });\n          onUploaded && onUploaded({\n            response: info.file.response,\n            base64: imageUrl\n          });\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    const {\n      imageUrl\n    } = this.props;\n    this.setState({\n      imageUrl\n    });\n  }\n\n  render() {\n    const {\n      options = {},\n      accept,\n      headers,\n      uploadUrl,\n      uploadImmediately\n    } = this.props;\n    const {\n      imageUrl,\n      loading\n    } = this.state;\n\n    const uploadButton = __jsx(\"div\", null, loading ? __jsx(LoadingOutlined, null) : __jsx(CameraOutlined, null));\n\n    return __jsx(Upload, {\n      accept: accept || 'image/*',\n      name: options.fieldName || 'file',\n      listType: \"picture-card\",\n      className: \"avatar-uploader\",\n      showUploadList: false,\n      action: uploadUrl,\n      beforeUpload: file => beforeUpload(file, typeof uploadImmediately === 'boolean' ? uploadImmediately : true),\n      onChange: this.handleChange,\n      headers: headers\n    }, imageUrl ? __jsx(\"img\", {\n      src: imageUrl,\n      alt: \"file\",\n      style: {\n        width: '100%'\n      }\n    }) : uploadButton);\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/file/image-upload.tsx"],"names":["Upload","message","LoadingOutlined","CameraOutlined","PureComponent","getGlobalConfig","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","uploadImmediately","config","isLt5M","size","NEXT_PUBLIC_MAX_SIZE_IMAGE","error","ImageUpload","loading","imageUrl","info","onFileReaded","onUploaded","props","status","setState","originFileObj","response","base64","componentDidMount","render","options","accept","headers","uploadUrl","state","uploadButton","fieldName","handleChange","width"],"mappings":"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","sourcesContent":["import { Upload, message } from 'antd';\nimport { LoadingOutlined, CameraOutlined } from '@ant-design/icons';\nimport { PureComponent } from 'react';\nimport { getGlobalConfig } from '@services/config';\n\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file, uploadImmediately = true) {\n  const config = getGlobalConfig();\n  const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);\n  if (!isLt5M) {\n    message.error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB or below`);\n  }\n  return uploadImmediately;\n}\n\ninterface IState {\n  loading: boolean;\n  imageUrl: string;\n}\n\ninterface IProps {\n  accept?: string;\n  imageUrl?: string;\n  uploadUrl?: string;\n  headers?: any;\n  onUploaded?: Function;\n  onFileReaded?: Function;\n  options?: any;\n  uploadImmediately?: boolean;\n}\n\nexport class ImageUpload extends PureComponent<IProps, IState> {\n  state = {\n    loading: false,\n    imageUrl: ''\n  };\n\n  componentDidMount() {\n    const { imageUrl } = this.props;\n    this.setState({ imageUrl });\n  }\n\n  handleChange = (info: any) => {\n    const { onFileReaded, onUploaded } = this.props;\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      onFileReaded && onFileReaded(info.file.originFileObj);\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, (imageUrl) => {\n        this.setState({\n          imageUrl,\n          loading: false\n        });\n        onUploaded && onUploaded({\n          response: info.file.response,\n          base64: imageUrl\n        });\n      });\n    }\n  };\n\n  render() {\n    const {\n      options = {}, accept, headers, uploadUrl, uploadImmediately\n    } = this.props;\n    const { imageUrl, loading } = this.state;\n    const uploadButton = (\n      <div>\n        {loading ? <LoadingOutlined /> : <CameraOutlined />}\n      </div>\n    );\n    return (\n      <Upload\n        accept={accept || 'image/*'}\n        name={options.fieldName || 'file'}\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={uploadUrl}\n        beforeUpload={(file) => beforeUpload(file, typeof uploadImmediately === 'boolean' ? uploadImmediately : true)}\n        onChange={this.handleChange}\n        headers={headers}\n      >\n        {imageUrl ? (\n          <img src={imageUrl} alt=\"file\" style={{ width: '100%' }} />\n        ) : (\n          uploadButton\n        )}\n      </Upload>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}