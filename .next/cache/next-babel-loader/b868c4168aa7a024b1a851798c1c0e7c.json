{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PureComponent } from 'react';\nimport { Form, InputNumber, Button, Row, Col, Switch } from 'antd';\nvar layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nvar validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  }\n};\nexport var PerformerSubscriptionForm = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PerformerSubscriptionForm, _PureComponent);\n\n  var _super = _createSuper(PerformerSubscriptionForm);\n\n  function PerformerSubscriptionForm() {\n    var _this;\n\n    _classCallCheck(this, PerformerSubscriptionForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFreeSubscription: false\n    });\n\n    return _this;\n  }\n\n  _createClass(PerformerSubscriptionForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var user = this.props.user;\n      this.setState({\n        isFreeSubscription: !!(user !== null && user !== void 0 && user.isFreeSubscription)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          _onFinish = _this$props.onFinish,\n          user = _this$props.user,\n          updating = _this$props.updating;\n      var isFreeSubscription = this.state.isFreeSubscription;\n      return __jsx(Form, _extends({}, layout, {\n        name: \"nest-messages\",\n        onFinish: function onFinish(values) {\n          _onFinish(values);\n        },\n        validateMessages: validateMessages,\n        initialValues: user,\n        labelAlign: \"left\",\n        className: \"account-form\",\n        scrollToFirstError: true\n      }), __jsx(Row, null, __jsx(Col, {\n        xl: 12,\n        md: 12,\n        xs: 24\n      }, __jsx(Form.Item, {\n        name: \"isFreeSubscription\",\n        valuePropName: \"checked\"\n      }, __jsx(Switch, {\n        unCheckedChildren: \"Paid Subscription\",\n        checkedChildren: \"Unpaid Subcription\",\n        onChange: function onChange(val) {\n          return _this2.setState({\n            isFreeSubscription: val\n          });\n        }\n      })), isFreeSubscription && __jsx(Form.Item, {\n        name: \"durationFreeSubscriptionDays\",\n        label: \"Duration (days)\",\n        help: \"Try free subscription for xx days\",\n        rules: [{\n          required: true\n        }]\n      }, __jsx(InputNumber, {\n        min: 1\n      })), __jsx(Form.Item, {\n        name: \"monthlyPrice\",\n        label: \"Monthly Subscription Price\",\n        rules: [{\n          required: true\n        }]\n      }, __jsx(InputNumber, {\n        min: 1\n      })), __jsx(Form.Item, {\n        name: \"yearlyPrice\",\n        label: \"Yearly Subscription Price\",\n        rules: [{\n          required: true\n        }]\n      }, __jsx(InputNumber, {\n        min: 1\n      })), __jsx(Form.Item, {\n        key: \"publicChatPrice\",\n        name: \"publicChatPrice\",\n        label: \"Default Streaming Price\",\n        rules: [{\n          required: true\n        }]\n      }, __jsx(InputNumber, {\n        min: 1\n      })))), __jsx(Form.Item, {\n        wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n          offset: 4\n        })\n      }, __jsx(Button, {\n        className: \"primary\",\n        type: \"primary\",\n        htmlType: \"submit\",\n        disabled: updating,\n        loading: updating\n      }, \"Save Changes\")));\n    }\n  }]);\n\n  return PerformerSubscriptionForm;\n}(PureComponent);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/performer/subscriptionForm.tsx"],"names":["PureComponent","Form","InputNumber","Button","Row","Col","Switch","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","PerformerSubscriptionForm","isFreeSubscription","user","props","setState","onFinish","updating","state","values","val","offset"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport {\n  Form, InputNumber, Button, Row, Col, Switch\n} from 'antd';\nimport { IPerformer } from 'src/interfaces';\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }\n};\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  }\n};\n\ninterface IProps {\n  onFinish: Function;\n  user: IPerformer;\n  updating?: boolean;\n}\n\nexport class PerformerSubscriptionForm extends PureComponent<IProps> {\n  state = {\n    isFreeSubscription: false\n  }\n\n  componentDidMount() {\n    const { user } = this.props;\n    this.setState({ isFreeSubscription: !!user?.isFreeSubscription });\n  }\n\n  render() {\n    const { onFinish, user, updating } = this.props;\n    const { isFreeSubscription } = this.state;\n    return (\n      <Form\n        {...layout}\n        name=\"nest-messages\"\n        onFinish={(values) => {\n          onFinish(values);\n        }}\n        validateMessages={validateMessages}\n        initialValues={user}\n        labelAlign=\"left\"\n        className=\"account-form\"\n        scrollToFirstError\n      >\n        <Row>\n          <Col xl={12} md={12} xs={24}>\n            <Form.Item name=\"isFreeSubscription\" valuePropName=\"checked\">\n              <Switch unCheckedChildren=\"Paid Subscription\" checkedChildren=\"Unpaid Subcription\" onChange={(val) => this.setState({ isFreeSubscription: val })} />\n            </Form.Item>\n            {isFreeSubscription && (\n            <Form.Item\n              name=\"durationFreeSubscriptionDays\"\n              label=\"Duration (days)\"\n              help=\"Try free subscription for xx days\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            )}\n            <Form.Item\n              name=\"monthlyPrice\"\n              label=\"Monthly Subscription Price\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              name=\"yearlyPrice\"\n              label=\"Yearly Subscription Price\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              key=\"publicChatPrice\"\n              name=\"publicChatPrice\"\n              label=\"Default Streaming Price\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n          </Col>\n          {/* <Col xl={12} md={12} xs={24}>\n            <Form.Item\n              name=\"privateChatPrice\"\n              label=\"Tokens per minute Private Chat\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              name=\"groupChatPrice\"\n              label=\"Tokens per minute Group Chat\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              key=\"maxParticipantsAllowed\"\n              name=\"maxParticipantsAllowed\"\n              label=\"Maximum Participants on Group Chat\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n          </Col> */}\n        </Row>\n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 4 }}>\n          <Button className=\"primary\" type=\"primary\" htmlType=\"submit\" disabled={updating} loading={updating}>\n            Save Changes\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}