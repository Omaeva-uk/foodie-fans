{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n/* eslint-disable no-console */\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, loadMoreStreamMessages, loadMoreStreamMessagesSuccess, loadStreamMessages, loadStreamMessagesSuccess, sendStreamMessage, sendStreamMessageSuccess, deleteMessage, deleteMessageSuccess, deleteMessageFail } from './actions';\nvar streamMessageSagas = [{\n  on: getStreamConversation,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var conversation, type, resp;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            conversation = data.payload.conversation;\n            type = conversation.type;\n\n            if (!(type === 'stream_public')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 6;\n            return messageService.findPublicConversationPerformer(conversation.performerId);\n\n          case 6:\n            _context.t0 = _context.sent;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return messageService.getConversationByStreamId(conversation.streamId);\n\n          case 11:\n            _context.t0 = _context.sent;\n\n          case 12:\n            resp = _context.t0;\n\n            if (!(resp && resp.data)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 16;\n            return put(getStreamConversationSuccess({\n              data: resp.data\n            }));\n\n          case 16:\n            _context.next = 18;\n            return put(loadStreamMessages({\n              conversationId: resp.data._id,\n              limit: 25,\n              offset: 0,\n              type: type\n            }));\n\n          case 18:\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t1 = _context[\"catch\"](0);\n            // load error\n            console.log('err-get-conversation', _context.t1);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 20]]);\n  })\n}, {\n  on: loadStreamMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _data$payload, conversationId, offset, limit, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _data$payload = data.payload, conversationId = _data$payload.conversationId, offset = _data$payload.offset, limit = _data$payload.limit;\n            _context2.next = 4;\n            return put(fetchingStreamMessage({\n              conversationId: conversationId\n            }));\n\n          case 4:\n            _context2.next = 6;\n            return messageService.getPublicMessages(conversationId, {\n              offset: offset,\n              limit: limit\n            });\n\n          case 6:\n            resp = _context2.sent;\n            _context2.next = 9;\n            return put(loadStreamMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            // load error\n            console.log('err', _context2.t0);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 11]]);\n  })\n}, {\n  on: loadMoreStreamMessages,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var messageMap, _data$payload2, conversationId, offset, limit, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            messageMap = select(function (state) {\n              return state.streamMessage.messages;\n            });\n            _data$payload2 = data.payload, conversationId = _data$payload2.conversationId, offset = _data$payload2.offset, limit = _data$payload2.limit;\n\n            if (!(messageMap && messageMap.fetching)) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 5:\n            _context3.next = 7;\n            return put(fetchingStreamMessage({\n              conversationId: conversationId\n            }));\n\n          case 7:\n            _context3.next = 9;\n            return messageService.getPublicMessages(conversationId, {\n              offset: offset,\n              limit: limit\n            });\n\n          case 9:\n            resp = _context3.sent;\n            _context3.next = 12;\n            return put(loadMoreStreamMessagesSuccess({\n              conversationId: conversationId,\n              items: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 12:\n            _context3.next = 18;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t0 = _context3[\"catch\"](0);\n            // load error\n            message.error('Error occured, please try again later');\n            console.log('err', _context3.t0);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 14]]);\n  })\n}, {\n  on: sendStreamMessage,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(req) {\n    var _req$payload, conversationId, data, resp;\n\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _req$payload = req.payload, conversationId = _req$payload.conversationId, data = _req$payload.data;\n            _context4.next = 4;\n            return messageService.sendStreamMessage(conversationId, data);\n\n          case 4:\n            resp = _context4.sent;\n            _context4.next = 7;\n            return put(sendStreamMessageSuccess(resp.data));\n\n          case 7:\n            _context4.next = 13;\n            break;\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 13;\n            return put(sendStreamMessageSuccess(_context4.t0));\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 9]]);\n  })\n}, {\n  on: deleteMessage,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(req) {\n    var messageId, resp;\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            messageId = req.payload.messageId;\n            _context5.next = 4;\n            return messageService.deleteMessage(messageId);\n\n          case 4:\n            resp = _context5.sent;\n            _context5.next = 7;\n            return put(deleteMessageSuccess(resp.data));\n\n          case 7:\n            _context5.next = 13;\n            break;\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            _context5.next = 13;\n            return put(deleteMessageFail(_context5.t0));\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 9]]);\n  })\n}];\nexport default flatten([createSagas(streamMessageSagas)]);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/redux/stream-chat/sagas.ts"],"names":["flatten","put","select","createSagas","messageService","message","getStreamConversation","getStreamConversationSuccess","fetchingStreamMessage","loadMoreStreamMessages","loadMoreStreamMessagesSuccess","loadStreamMessages","loadStreamMessagesSuccess","sendStreamMessage","sendStreamMessageSuccess","deleteMessage","deleteMessageSuccess","deleteMessageFail","streamMessageSagas","on","worker","data","conversation","payload","type","findPublicConversationPerformer","performerId","getConversationByStreamId","streamId","resp","conversationId","_id","limit","offset","console","log","getPublicMessages","items","total","messageMap","state","streamMessage","messages","fetching","error","req","messageId"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { IReduxAction } from 'src/interfaces';\nimport { message } from 'antd';\nimport {\n  getStreamConversation,\n  getStreamConversationSuccess,\n  fetchingStreamMessage,\n  loadMoreStreamMessages,\n  loadMoreStreamMessagesSuccess,\n  loadStreamMessages,\n  loadStreamMessagesSuccess,\n  sendStreamMessage,\n  sendStreamMessageSuccess,\n  deleteMessage,\n  deleteMessageSuccess,\n  deleteMessageFail\n} from './actions';\n\nconst streamMessageSagas = [\n  {\n    on: getStreamConversation,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const { conversation } = data.payload;\n        const { type } = conversation;\n        const resp = type === 'stream_public'\n          ? yield messageService.findPublicConversationPerformer(\n            conversation.performerId\n          )\n          : yield messageService.getConversationByStreamId(\n            conversation.streamId\n          );\n        if (resp && resp.data) {\n          yield put(getStreamConversationSuccess({ data: resp.data }));\n          yield put(\n            loadStreamMessages({\n              conversationId: resp.data._id,\n              limit: 25,\n              offset: 0,\n              type\n            })\n          );\n        }\n      } catch (e) {\n        // load error\n        console.log('err-get-conversation', e);\n      }\n    }\n  },\n  {\n    on: loadStreamMessages,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const {\n          conversationId, offset, limit\n        } = data.payload;\n        yield put(fetchingStreamMessage({ conversationId }));\n        const resp = yield messageService.getPublicMessages(conversationId, {\n          offset,\n          limit\n        });\n        yield put(\n          loadStreamMessagesSuccess({\n            conversationId,\n            items: resp.data.data,\n            total: resp.data.total\n          })\n        );\n      } catch (e) {\n        // load error\n        console.log('err', e);\n      }\n    }\n  },\n  {\n    on: loadMoreStreamMessages,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const messageMap = select(\n          (state) => state.streamMessage.messages\n        ) as any;\n        const {\n          conversationId, offset, limit\n        } = data.payload;\n        if (messageMap && messageMap.fetching) {\n          return;\n        }\n\n        yield put(fetchingStreamMessage({ conversationId }));\n        const resp = yield messageService.getPublicMessages(conversationId, {\n          offset,\n          limit\n        });\n        yield put(\n          loadMoreStreamMessagesSuccess({\n            conversationId,\n            items: resp.data.data,\n            total: resp.data.total\n          })\n        );\n      } catch (e) {\n        // load error\n        message.error('Error occured, please try again later');\n        console.log('err', e);\n      }\n    }\n  },\n  {\n    on: sendStreamMessage,\n    * worker(req: IReduxAction<any>) {\n      try {\n        const { conversationId, data } = req.payload;\n        const resp = yield messageService.sendStreamMessage(conversationId, data);\n\n        yield put(sendStreamMessageSuccess(resp.data));\n      } catch (e) {\n        yield put(sendStreamMessageSuccess(e));\n      }\n    }\n  },\n  {\n    on: deleteMessage,\n    * worker(req: IReduxAction<any>) {\n      try {\n        const { messageId } = req.payload;\n        const resp = yield messageService.deleteMessage(messageId);\n        yield put(deleteMessageSuccess(resp.data));\n      } catch (e) {\n        yield put(deleteMessageFail(e));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(streamMessageSagas)]);\n"]},"metadata":{},"sourceType":"module"}