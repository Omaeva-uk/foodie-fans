{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable camelcase */\nimport { Form, Input, Button, Row, Col, Divider, Layout, message } from 'antd';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Head from 'next/head';\nimport { login, loginSuccess, loginSocial } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { authService, userService } from '@services/index';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { TwitterOutlined } from '@ant-design/icons';\nimport Loader from '@components/common/base/loader';\nimport './auth/index.less';\nimport GoogleLoginButton from '@components/auth/google-login-button';\n\nclass Login extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"recaptchaSuccess\", false);\n\n    _defineProperty(this, \"state\", {\n      loginAs: 'user',\n      isLoading: true\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    return _objectSpread({}, ctx.query);\n  }\n\n  async componentDidMount() {\n    this.redirectLogin();\n    this.callbackTwitter();\n  }\n\n  async handleLogin(values) {\n    const {\n      login: handleLogin\n    } = this.props;\n    return handleLogin(values);\n  }\n\n  async handleVerifyCapcha(resp) {\n    var _resp$data;\n\n    if (resp !== null && resp !== void 0 && (_resp$data = resp.data) !== null && _resp$data !== void 0 && _resp$data.success) {\n      this.recaptchaSuccess = true;\n    } else {\n      this.recaptchaSuccess = false;\n    }\n  }\n\n  async onGoogleLogin(resp) {\n    if (!(resp !== null && resp !== void 0 && resp.credential)) {\n      return;\n    }\n\n    const {\n      loginSocial: handleLogin\n    } = this.props;\n    const {\n      loginAs\n    } = this.state;\n    const payload = {\n      tokenId: resp.credential,\n      role: loginAs\n    };\n\n    try {\n      await this.setState({\n        isLoading: true\n      });\n      const response = await (await authService.loginGoogle(payload)).data;\n      response.token && handleLogin({\n        token: response.token\n      });\n    } catch (e) {\n      const error = await e;\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Google authentication login fail');\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  async redirectLogin() {\n    const {\n      loginSuccess: handleLogin,\n      updateCurrentUser: handleUpdateUser\n    } = this.props;\n    const token = authService.getToken();\n\n    if (!token || token === 'null') {\n      this.setState({\n        isLoading: false\n      });\n      return;\n    }\n\n    authService.setToken(token);\n\n    try {\n      await this.setState({\n        isLoading: true\n      });\n      const user = await userService.me({\n        Authorization: token\n      });\n      if (!user || !user.data || !user.data._id) return;\n      handleLogin();\n      handleUpdateUser(user.data);\n      user.data.isPerformer ? Router.push({\n        pathname: '/model/profile',\n        query: {\n          username: user.data.username || user.data._id\n        }\n      }, `/${user.data.username || user.data._id}`) : Router.push('/home');\n    } catch {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  async callbackTwitter() {\n    const {\n      oauth_verifier,\n      loginSocial: handleLogin\n    } = this.props;\n    const twitterInfo = authService.getTwitterToken();\n\n    if (!oauth_verifier || !twitterInfo.oauthToken || !twitterInfo.oauthTokenSecret) {\n      return;\n    }\n\n    try {\n      const auth = await authService.callbackLoginTwitter({\n        oauth_verifier,\n        oauthToken: twitterInfo.oauthToken,\n        oauthTokenSecret: twitterInfo.oauthTokenSecret,\n        role: twitterInfo.role || 'user'\n      });\n      auth.data && auth.data.token && handleLogin({\n        token: auth.data.token\n      });\n    } catch (e) {\n      const error = await e;\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Twitter authentication login fail');\n    }\n  }\n\n  async loginTwitter() {\n    const {\n      loginAs\n    } = this.state;\n\n    try {\n      await this.setState({\n        isLoading: true\n      });\n      const resp = await (await authService.loginTwitter()).data;\n\n      if (resp && resp.url) {\n        authService.setTwitterToken({\n          oauthToken: resp.oauthToken,\n          oauthTokenSecret: resp.oauthTokenSecret\n        }, loginAs);\n        window.location.href = resp.url;\n      }\n    } catch (e) {\n      const error = await e;\n      message.error((error === null || error === void 0 ? void 0 : error.message) || 'Twitter authentication login fail');\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      ui,\n      settings,\n      loginAuth\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n    return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, ui && ui.siteName), __jsx(\"meta\", {\n      name: \"keywords\",\n      content: settings && settings.metaKeywords\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: settings && settings.metaDescription\n    }), __jsx(\"meta\", {\n      property: \"og:type\",\n      content: \"website\"\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: ui && ui.siteName\n    }), __jsx(\"meta\", {\n      property: \"og:image\",\n      content: ui && ui.logo\n    }), __jsx(\"meta\", {\n      property: \"og:description\",\n      content: settings && settings.metaDescription\n    }), __jsx(\"meta\", {\n      name: \"twitter:card\",\n      content: \"summary\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:title\",\n      content: ui && ui.siteName\n    }), __jsx(\"meta\", {\n      name: \"twitter:image\",\n      content: ui && ui.logo\n    }), __jsx(\"meta\", {\n      name: \"twitter:description\",\n      content: settings && settings.metaDescription\n    })), __jsx(\"div\", {\n      className: \"main-container\"\n    }, __jsx(Row, null, __jsx(Col, {\n      span: 12\n    })), __jsx(\"div\", {\n      className: \"login-box\"\n    }, __jsx(Row, null, __jsx(Col, {\n      xs: 24,\n      sm: 24,\n      md: 12,\n      lg: 12\n    }, __jsx(\"div\", {\n      className: \"login-content left\",\n      style: ui.loginPlaceholderImage ? {\n        backgroundImage: `url(${ui.loginPlaceholderImage})`\n      } : null\n    })), __jsx(Col, {\n      xs: 24,\n      sm: 24,\n      md: 12,\n      lg: 12\n    }, __jsx(\"div\", {\n      className: \"login-content right\"\n    }, __jsx(\"div\", {\n      className: \"login-logo\"\n    }, __jsx(\"a\", {\n      href: \"/\"\n    }, ui.logo ? __jsx(\"img\", {\n      alt: \"logo\",\n      src: ui.logo,\n      height: \"80px\"\n    }) : ui.siteName)), __jsx(\"p\", {\n      className: \"text-center\"\n    }, __jsx(\"small\", null, \"Sign up to make money and interact with your fans!\")), __jsx(\"div\", {\n      className: \"social-login\"\n    }, __jsx(\"button\", {\n      type: \"button\",\n      disabled: !settings.twitterClientId,\n      onClick: () => this.loginTwitter(),\n      className: \"twitter-button\"\n    }, __jsx(TwitterOutlined, null), ' ', \"LOG IN / SIGN UP WITH TWITTER\"), __jsx(GoogleLoginButton, {\n      clientId: settings.googleClientId,\n      onSuccess: this.onGoogleLogin.bind(this),\n      onFailure: this.onGoogleLogin.bind(this)\n    })), __jsx(Divider, null, \"Or\"), __jsx(\"div\", {\n      className: \"login-form\"\n    }, __jsx(Form, {\n      name: \"normal_login\",\n      className: \"login-form\",\n      initialValues: {\n        remember: true\n      },\n      onFinish: this.handleLogin.bind(this)\n    }, __jsx(Form.Item, {\n      name: \"username\",\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        message: 'Email or Username is missing'\n      }]\n    }, __jsx(Input, {\n      disabled: loginAuth.requesting || isLoading,\n      placeholder: \"Email or Username\"\n    })), __jsx(Form.Item, {\n      name: \"password\",\n      validateTrigger: ['onChange', 'onBlur'],\n      rules: [{\n        required: true,\n        message: 'Please enter your password!'\n      }]\n    }, __jsx(Input.Password, {\n      disabled: loginAuth.requesting || isLoading,\n      placeholder: \"Password\"\n    })), __jsx(\"p\", {\n      style: {\n        padding: '0 20px'\n      }\n    }, __jsx(Link, {\n      href: {\n        pathname: '/auth/forgot-password'\n      }\n    }, __jsx(\"a\", {\n      className: \"sub-text\"\n    }, \"Forgot password?\"))), __jsx(Form.Item, {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(Button, {\n      disabled: loginAuth.requesting || isLoading,\n      loading: loginAuth.requesting || isLoading,\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\"\n    }, \"LOG IN\"), __jsx(\"p\", {\n      style: {\n        fontSize: 11\n      }\n    }, \"Visit\", ' ', __jsx(\"a\", {\n      href: \"/page/help\"\n    }, \"Help Center\"), ' ', \"for any help if you are not able to login with your existing\", ' ', (ui === null || ui === void 0 ? void 0 : ui.siteName) || 'Fanso', ' ', \"account\"), __jsx(Divider, {\n      style: {\n        margin: '15px 0'\n      }\n    }), __jsx(\"p\", {\n      style: {\n        marginBottom: 5\n      }\n    }, \"Don't have an account yet?\"), __jsx(\"p\", null, __jsx(Link, {\n      href: \"/auth/register\"\n    }, __jsx(\"a\", null, \"Sign up for\", ' ', ui === null || ui === void 0 ? void 0 : ui.siteName))))))))))), isLoading && __jsx(Loader, null));\n  }\n\n}\n\n_defineProperty(Login, \"authenticate\", false);\n\n_defineProperty(Login, \"layout\", 'blank');\n\nconst mapStatesToProps = state => ({\n  ui: _objectSpread({}, state.ui),\n  settings: _objectSpread({}, state.settings),\n  loginAuth: _objectSpread({}, state.auth.loginAuth)\n});\n\nconst mapDispatchToProps = {\n  login,\n  loginSocial,\n  loginSuccess,\n  updateCurrentUser\n};\nexport default connect(mapStatesToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/pages/index.tsx"],"names":["Form","Input","Button","Row","Col","Divider","Layout","message","PureComponent","connect","Head","login","loginSuccess","loginSocial","updateCurrentUser","authService","userService","Link","Router","TwitterOutlined","Loader","GoogleLoginButton","Login","loginAs","isLoading","getInitialProps","ctx","query","componentDidMount","redirectLogin","callbackTwitter","handleLogin","values","props","handleVerifyCapcha","resp","data","success","recaptchaSuccess","onGoogleLogin","credential","state","payload","tokenId","role","setState","response","loginGoogle","token","e","error","handleUpdateUser","getToken","setToken","user","me","Authorization","_id","isPerformer","push","pathname","username","oauth_verifier","twitterInfo","getTwitterToken","oauthToken","oauthTokenSecret","auth","callbackLoginTwitter","loginTwitter","url","setTwitterToken","window","location","href","render","ui","settings","loginAuth","siteName","metaKeywords","metaDescription","logo","loginPlaceholderImage","backgroundImage","twitterClientId","googleClientId","bind","remember","required","requesting","padding","textAlign","fontSize","margin","marginBottom","mapStatesToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport {\n  Form, Input, Button, Row, Col, Divider, Layout, message, Grid\n} from 'antd';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Head from 'next/head';\nimport { login, loginSuccess, loginSocial } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { authService, userService } from '@services/index';\nimport Link from 'next/link';\nimport { ISettings, IUIConfig } from 'src/interfaces';\nimport Router from 'next/router';\nimport { TwitterOutlined, GoogleOutlined } from '@ant-design/icons';\nimport Loader from '@components/common/base/loader';\nimport './auth/index.less';\nimport GoogleLoginButton from '@components/auth/google-login-button';\n\ninterface IProps {\n  loginAuth: any;\n  login: Function;\n  updateCurrentUser: Function;\n  loginSuccess: Function;\n  loginSocial: Function;\n  ui: IUIConfig;\n  settings: ISettings;\n  oauth_verifier: string;\n}\n\nclass Login extends PureComponent<IProps> {\n  static authenticate = false;\n\n  static layout = 'blank';\n\n  recaptchaSuccess = false;\n\n  static async getInitialProps({ ctx }) {\n    return {\n      ...ctx.query\n    };\n  }\n\n  state = {\n    loginAs: 'user',\n    isLoading: true\n  };\n\n  async componentDidMount() {\n    this.redirectLogin();\n    this.callbackTwitter();\n  }\n\n  async handleLogin(values: any) {\n    const { login: handleLogin } = this.props;\n    return handleLogin(values);\n  }\n\n  async handleVerifyCapcha(resp: any) {\n    if (resp?.data?.success) {\n      this.recaptchaSuccess = true;\n    } else {\n      this.recaptchaSuccess = false;\n    }\n  }\n\n  async onGoogleLogin(resp: any) {\n    if (!resp?.credential) {\n      return;\n    }\n    const { loginSocial: handleLogin } = this.props;\n    const { loginAs } = this.state;\n    const payload = { tokenId: resp.credential, role: loginAs };\n    try {\n      await this.setState({ isLoading: true });\n      const response = await (await authService.loginGoogle(payload)).data;\n      response.token && handleLogin({ token: response.token });\n    } catch (e) {\n      const error = await e;\n      message.error(error?.message || 'Google authentication login fail');\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  async redirectLogin() {\n    const { loginSuccess: handleLogin, updateCurrentUser: handleUpdateUser } = this.props;\n    const token = authService.getToken();\n    if (!token || token === 'null') {\n      this.setState({ isLoading: false });\n      return;\n    }\n    authService.setToken(token);\n    try {\n      await this.setState({ isLoading: true });\n      const user = await userService.me({\n        Authorization: token\n      });\n      if (!user || !user.data || !user.data._id) return;\n      handleLogin();\n      handleUpdateUser(user.data);\n      user.data.isPerformer\n        ? Router.push(\n          { pathname: '/model/profile', query: { username: user.data.username || user.data._id } },\n          `/${user.data.username || user.data._id}`\n        )\n        : Router.push('/home');\n    } catch {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  async callbackTwitter() {\n    const { oauth_verifier, loginSocial: handleLogin } = this.props;\n    const twitterInfo = authService.getTwitterToken();\n    if (!oauth_verifier || !twitterInfo.oauthToken || !twitterInfo.oauthTokenSecret) {\n      return;\n    }\n    try {\n      const auth = await authService.callbackLoginTwitter({\n        oauth_verifier,\n        oauthToken: twitterInfo.oauthToken,\n        oauthTokenSecret: twitterInfo.oauthTokenSecret,\n        role: twitterInfo.role || 'user'\n      });\n      auth.data && auth.data.token && handleLogin({ token: auth.data.token });\n    } catch (e) {\n      const error = await e;\n      message.error(error?.message || 'Twitter authentication login fail');\n    }\n  }\n\n  async loginTwitter() {\n    const { loginAs } = this.state;\n    try {\n      await this.setState({ isLoading: true });\n      const resp = await (await authService.loginTwitter()).data;\n      if (resp && resp.url) {\n        authService.setTwitterToken({ oauthToken: resp.oauthToken, oauthTokenSecret: resp.oauthTokenSecret }, loginAs);\n        window.location.href = resp.url;\n      }\n    } catch (e) {\n      const error = await e;\n      message.error(error?.message || 'Twitter authentication login fail');\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  render() {\n    const { ui, settings, loginAuth } = this.props;\n    const { isLoading } = this.state;\n    return (\n      <Layout>\n        <Head>\n          <title>{ui && ui.siteName}</title>\n          <meta name=\"keywords\" content={settings && settings.metaKeywords} />\n          <meta name=\"description\" content={settings && settings.metaDescription} />\n          {/* OG tags */}\n          <meta property=\"og:type\" content=\"website\" />\n          <meta property=\"og:title\" content={ui && ui.siteName} />\n          <meta property=\"og:image\" content={ui && ui.logo} />\n          <meta property=\"og:description\" content={settings && settings.metaDescription} />\n          {/* Twitter tags */}\n          <meta name=\"twitter:card\" content=\"summary\" />\n          <meta name=\"twitter:title\" content={ui && ui.siteName} />\n          <meta name=\"twitter:image\" content={ui && ui.logo} />\n          <meta name=\"twitter:description\" content={settings && settings.metaDescription} />\n        </Head>\n        <div className=\"main-container\">\n          <Row>\n            <Col span={12}></Col>\n          </Row>\n          <div className=\"login-box\">\n            <Row>\n              <Col xs={24} sm={24} md={12} lg={12}>\n                <div\n                  className=\"login-content left\"\n                  style={ui.loginPlaceholderImage ? { backgroundImage: `url(${ui.loginPlaceholderImage})` } : null}\n                />\n              </Col>\n              <Col xs={24} sm={24} md={12} lg={12}>\n                <div className=\"login-content right\">\n                  <div className=\"login-logo\">\n                    <a href=\"/\">{ui.logo ? <img alt=\"logo\" src={ui.logo} height=\"80px\" /> : ui.siteName}</a>\n                  </div>\n                  <p className=\"text-center\">\n                    <small>Sign up to make money and interact with your fans!</small>\n                  </p>\n                  <div className=\"social-login\">\n                    <button\n                      type=\"button\"\n                      disabled={!settings.twitterClientId}\n                      onClick={() => this.loginTwitter()}\n                      className=\"twitter-button\"\n                    >\n                      <TwitterOutlined />\n                      {' '}\n                      LOG IN / SIGN UP WITH TWITTER\n                    </button>\n                    <GoogleLoginButton\n                      clientId={settings.googleClientId}\n                      onSuccess={this.onGoogleLogin.bind(this)}\n                      onFailure={this.onGoogleLogin.bind(this)}\n                    />\n                  </div>\n                  <Divider>Or</Divider>\n                  <div className=\"login-form\">\n                    <Form\n                      name=\"normal_login\"\n                      className=\"login-form\"\n                      initialValues={{ remember: true }}\n                      onFinish={this.handleLogin.bind(this)}\n                    >\n                      <Form.Item\n                        name=\"username\"\n                        validateTrigger={['onChange', 'onBlur']}\n                        rules={[{ required: true, message: 'Email or Username is missing' }]}\n                      >\n                        <Input disabled={loginAuth.requesting || isLoading} placeholder=\"Email or Username\" />\n                      </Form.Item>\n                      <Form.Item\n                        name=\"password\"\n                        validateTrigger={['onChange', 'onBlur']}\n                        rules={[{ required: true, message: 'Please enter your password!' }]}\n                      >\n                        <Input.Password disabled={loginAuth.requesting || isLoading} placeholder=\"Password\" />\n                      </Form.Item>\n                      <p style={{ padding: '0 20px' }}>\n                        <Link\n                          href={{\n                            pathname: '/auth/forgot-password'\n                          }}\n                        >\n                          <a className=\"sub-text\">Forgot password?</a>\n                        </Link>\n                      </p>\n                      {/* <GoogleReCaptcha ui={ui} handleVerify={this.handleVerifyCapcha.bind(this)} /> */}\n                      <Form.Item style={{ textAlign: 'center' }}>\n                        <Button\n                          disabled={loginAuth.requesting || isLoading}\n                          loading={loginAuth.requesting || isLoading}\n                          type=\"primary\"\n                          htmlType=\"submit\"\n                          className=\"login-form-button\"\n                        >\n                          LOG IN\n                        </Button>\n                        <p style={{ fontSize: 11 }}>\n                          Visit\n                          {' '}\n                          <a href=\"/page/help\">Help Center</a>\n                          {' '}\n                          for any help if you are not able to login with your\n                          existing\n                          {' '}\n                          {ui?.siteName || 'Fanso'}\n                          {' '}\n                          account\n                        </p>\n                        <Divider style={{ margin: '15px 0' }} />\n                        <p style={{ marginBottom: 5 }}>Don&apos;t have an account yet?</p>\n                        <p>\n                          <Link href=\"/auth/register\">\n                            <a>\n                              Sign up for\n                              {' '}\n                              {ui?.siteName}\n                            </a>\n                          </Link>\n                        </p>\n                      </Form.Item>\n                    </Form>\n                  </div>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        </div>\n        {isLoading && <Loader />}\n      </Layout>\n    );\n  }\n}\n\nconst mapStatesToProps = (state: any) => ({\n  ui: { ...state.ui },\n  settings: { ...state.settings },\n  loginAuth: { ...state.auth.loginAuth }\n});\n\nconst mapDispatchToProps = {\n  login,\n  loginSocial,\n  loginSuccess,\n  updateCurrentUser\n};\nexport default connect(mapStatesToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}