{"ast":null,"code":"/* eslint-disable func-names */\n\n/* eslint-disable prefer-spread */\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport var warning = function warning() {\n  // debug on development and staging.\n  if (false) return;\n  /* eslint-disable no-console */\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n\n};\nexport var debug = function debug() {\n  // debug on development and staging.\n  if (false) return;\n  /* eslint-disable no-console */\n\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    console.debug.apply(console, args);\n  }\n};","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/socket/utils.ts"],"names":["warning","args","console","error","apply","Error","join","e","debug"],"mappings":"AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,GAAmB;AACxC;AACA,aAA2C;AAE3C;;AAJwC,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAKxC,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACC,KAAf,KAAyB,UAA/D,EAA2E;AACzED,IAAAA,OAAO,CAACC,KAAR,CAAcC,KAAd,CAAoBF,OAApB,EAA6BD,IAA7B;AACD;AACD;;;AACA,MAAI;AACF;AACA;AACA;AAEA,UAAM,IAAII,KAAJ,CAAUJ,IAAI,CAACK,IAAL,CAAU,GAAV,CAAV,CAAN;AACA;AACD,GAPD,CAOE,OAAOC,CAAP,EAAU,CAAE;AACd;;AACD,CAlBM;AAoBP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAmB;AACtC;AACA,aAA2C;AAE3C;;AACA,MAAI,OAAON,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACM,KAAf,KAAyB,UAA/D,EAA2E;AAAA,uCAL3CP,IAK2C;AAL3CA,MAAAA,IAK2C;AAAA;;AACzEC,IAAAA,OAAO,CAACM,KAAR,CAAcJ,KAAd,CAAoBF,OAApB,EAA6BD,IAA7B;AACD;AACF,CARM","sourcesContent":["/* eslint-disable func-names */\n/* eslint-disable prefer-spread */\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\n\nexport const warning = function (...args) {\n  // debug on development and staging.\n  if (process.env.NODE_ENV === 'production') return;\n\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n};\n\nexport const debug = function (...args) {\n  // debug on development and staging.\n  if (process.env.NODE_ENV === 'production') return;\n\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    console.debug.apply(console, args);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}