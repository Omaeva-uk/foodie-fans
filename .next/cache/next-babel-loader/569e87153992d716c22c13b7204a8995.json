{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport { Form, InputNumber, Button, Row, Col, Switch } from 'antd';\nconst layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  }\n};\nexport class PerformerSubscriptionForm extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isFreeSubscription: false\n    });\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    this.setState({\n      isFreeSubscription: !!(user !== null && user !== void 0 && user.isFreeSubscription)\n    });\n  }\n\n  render() {\n    const {\n      onFinish,\n      user,\n      updating\n    } = this.props;\n    const {\n      isFreeSubscription\n    } = this.state;\n    return __jsx(Form, _extends({}, layout, {\n      name: \"nest-messages\",\n      onFinish: values => {\n        onFinish(values);\n      },\n      validateMessages: validateMessages,\n      initialValues: user,\n      labelAlign: \"left\",\n      className: \"account-form\",\n      scrollToFirstError: true\n    }), __jsx(Row, null, __jsx(Col, {\n      xl: 12,\n      md: 12,\n      xs: 24\n    }, __jsx(Form.Item, {\n      name: \"isFreeSubscription\",\n      valuePropName: \"checked\"\n    }, __jsx(Switch, {\n      unCheckedChildren: \"Paid Subscription\",\n      checkedChildren: \"Unpaid Subcription\",\n      onChange: val => this.setState({\n        isFreeSubscription: val\n      })\n    })), isFreeSubscription && __jsx(Form.Item, {\n      name: \"durationFreeSubscriptionDays\",\n      label: \"Duration (days)\",\n      help: \"Try free subscription for xx days\",\n      rules: [{\n        required: true\n      }]\n    }, __jsx(InputNumber, {\n      min: 1\n    })), __jsx(Form.Item, {\n      name: \"monthlyPrice\",\n      label: \"Monthly Subscription Price\",\n      rules: [{\n        required: true\n      }]\n    }, __jsx(InputNumber, {\n      min: 1\n    })), __jsx(Form.Item, {\n      name: \"yearlyPrice\",\n      label: \"Yearly Subscription Price\",\n      rules: [{\n        required: true\n      }]\n    }, __jsx(InputNumber, {\n      min: 1\n    })), __jsx(Form.Item, {\n      key: \"publicChatPrice\",\n      name: \"publicChatPrice\",\n      label: \"Default Streaming Price\",\n      rules: [{\n        required: true\n      }]\n    }, __jsx(InputNumber, {\n      min: 1\n    })))), __jsx(Form.Item, {\n      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {\n        offset: 4\n      })\n    }, __jsx(Button, {\n      className: \"primary\",\n      type: \"primary\",\n      htmlType: \"submit\",\n      disabled: updating,\n      loading: updating\n    }, \"Save Changes\")));\n  }\n\n}","map":{"version":3,"sources":["c:/Users/Admin/Desktop/Work/foodiefans/foodiefans-main/user/src/components/performer/subscriptionForm.tsx"],"names":["PureComponent","Form","InputNumber","Button","Row","Col","Switch","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","PerformerSubscriptionForm","isFreeSubscription","componentDidMount","user","props","setState","render","onFinish","updating","state","values","val","offset"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport {\n  Form, InputNumber, Button, Row, Col, Switch\n} from 'antd';\nimport { IPerformer } from 'src/interfaces';\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }\n};\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!'\n  }\n};\n\ninterface IProps {\n  onFinish: Function;\n  user: IPerformer;\n  updating?: boolean;\n}\n\nexport class PerformerSubscriptionForm extends PureComponent<IProps> {\n  state = {\n    isFreeSubscription: false\n  }\n\n  componentDidMount() {\n    const { user } = this.props;\n    this.setState({ isFreeSubscription: !!user?.isFreeSubscription });\n  }\n\n  render() {\n    const { onFinish, user, updating } = this.props;\n    const { isFreeSubscription } = this.state;\n    return (\n      <Form\n        {...layout}\n        name=\"nest-messages\"\n        onFinish={(values) => {\n          onFinish(values);\n        }}\n        validateMessages={validateMessages}\n        initialValues={user}\n        labelAlign=\"left\"\n        className=\"account-form\"\n        scrollToFirstError\n      >\n        <Row>\n          <Col xl={12} md={12} xs={24}>\n            <Form.Item name=\"isFreeSubscription\" valuePropName=\"checked\">\n              <Switch unCheckedChildren=\"Paid Subscription\" checkedChildren=\"Unpaid Subcription\" onChange={(val) => this.setState({ isFreeSubscription: val })} />\n            </Form.Item>\n            {isFreeSubscription && (\n            <Form.Item\n              name=\"durationFreeSubscriptionDays\"\n              label=\"Duration (days)\"\n              help=\"Try free subscription for xx days\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            )}\n            <Form.Item\n              name=\"monthlyPrice\"\n              label=\"Monthly Subscription Price\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              name=\"yearlyPrice\"\n              label=\"Yearly Subscription Price\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              key=\"publicChatPrice\"\n              name=\"publicChatPrice\"\n              label=\"Default Streaming Price\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n          </Col>\n          {/* <Col xl={12} md={12} xs={24}>\n            <Form.Item\n              name=\"privateChatPrice\"\n              label=\"Tokens per minute Private Chat\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              name=\"groupChatPrice\"\n              label=\"Tokens per minute Group Chat\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n            <Form.Item\n              key=\"maxParticipantsAllowed\"\n              name=\"maxParticipantsAllowed\"\n              label=\"Maximum Participants on Group Chat\"\n              rules={[{ required: true }]}\n            >\n              <InputNumber min={1} />\n            </Form.Item>\n          </Col> */}\n        </Row>\n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 4 }}>\n          <Button className=\"primary\" type=\"primary\" htmlType=\"submit\" disabled={updating} loading={updating}>\n            Save Changes\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}