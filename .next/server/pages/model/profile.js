module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./pages/model/profile/index.tsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../next-server/lib/head":
/*!****************************************************!*\
  !*** external "next/dist/next-server/lib/head.js" ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/head.js");

/***/ }),

/***/ "../next-server/lib/router-context":
/*!**************************************************************!*\
  !*** external "next/dist/next-server/lib/router-context.js" ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router-context.js");

/***/ }),

/***/ "./node_modules/emoji-mart/css/emoji-mart.css":
/*!****************************************************!*\
  !*** ./node_modules/emoji-mart/css/emoji-mart.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js");

var _router2 = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

let cachedObserver;
const listeners = new Map();
const IntersectionObserver = false ? undefined : null;
const prefetched = {};

function getObserver() {
  // Return shared instance of IntersectionObserver if already created
  if (cachedObserver) {
    return cachedObserver;
  } // Only create shared IntersectionObserver if supported in browser


  if (!IntersectionObserver) {
    return undefined;
  }

  return cachedObserver = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (!listeners.has(entry.target)) {
        return;
      }

      const cb = listeners.get(entry.target);

      if (entry.isIntersecting || entry.intersectionRatio > 0) {
        cachedObserver.unobserve(entry.target);
        listeners.delete(entry.target);
        cb();
      }
    });
  }, {
    rootMargin: '200px'
  });
}

const listenToIntersections = (el, cb) => {
  const observer = getObserver();

  if (!observer) {
    return () => {};
  }

  observer.observe(el);
  listeners.set(el, cb);
  return () => {
    try {
      observer.unobserve(el);
    } catch (err) {
      console.error(err);
    }

    listeners.delete(el);
  };
};

function prefetch(router, href, as, options) {
  if (true) return;
  if (!(0, _router.isLocalURL)(href)) return; // Prefetch the JSON page if asked (only in the client)
  // We need to handle a prefetch error here since we may be
  // loading with priority which can reject but we don't
  // want to force navigation since this is only a prefetch

  router.prefetch(href, as, options).catch(err => {
    if (true) {
      // rethrow to show invalid URL errors
      throw err;
    }
  }); // Join on an invalid URI character

  prefetched[href + '%' + as] = true;
}

function isModifiedEvent(event) {
  const {
    target
  } = event.currentTarget;
  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download
  event.nativeEvent && event.nativeEvent.which === 2;
}

function linkClicked(e, router, href, as, replace, shallow, scroll) {
  const {
    nodeName
  } = e.currentTarget;

  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router.isLocalURL)(href))) {
    // ignore click for browser’s default behavior
    return;
  }

  e.preventDefault(); //  avoid scroll for urls with anchor refs

  if (scroll == null) {
    scroll = as.indexOf('#') < 0;
  } // replace state instead of push if prop is present


  router[replace ? 'replace' : 'push'](href, as, {
    shallow
  }).then(success => {
    if (!success) return;

    if (scroll) {
      window.scrollTo(0, 0);
      document.body.focus();
    }
  });
}

function Link(props) {
  if (true) {
    function createPropError(args) {
      return new Error(`Failed prop type: The prop \`${args.key}\` expects a ${args.expected} in \`<Link>\`, but got \`${args.actual}\` instead.` + (false ? undefined : ''));
    } // TypeScript trick for type-guarding:


    const requiredPropsGuard = {
      href: true
    };
    const requiredProps = Object.keys(requiredPropsGuard);
    requiredProps.forEach(key => {
      if (key === 'href') {
        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: props[key] === null ? 'null' : typeof props[key]
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // TypeScript trick for type-guarding:

    const optionalPropsGuard = {
      as: true,
      replace: true,
      scroll: true,
      shallow: true,
      passHref: true,
      prefetch: true
    };
    const optionalProps = Object.keys(optionalPropsGuard);
    optionalProps.forEach(key => {
      if (key === 'as') {
        if (props[key] && typeof props[key] !== 'string' && typeof props[key] !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: typeof props[key]
          });
        }
      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {
        if (props[key] != null && typeof props[key] !== 'boolean') {
          throw createPropError({
            key,
            expected: '`boolean`',
            actual: typeof props[key]
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
    // eslint-disable-next-line react-hooks/rules-of-hooks

    const hasWarned = _react.default.useRef(false);

    if (props.prefetch && !hasWarned.current) {
      hasWarned.current = true;
      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/vercel/next.js/prefetch-true-deprecated');
    }
  }

  const p = props.prefetch !== false;

  const [childElm, setChildElm] = _react.default.useState();

  const router = (0, _router2.useRouter)();
  const pathname = router && router.pathname || '/';

  const {
    href,
    as
  } = _react.default.useMemo(() => {
    const [resolvedHref, resolvedAs] = (0, _router.resolveHref)(pathname, props.href, true);
    return {
      href: resolvedHref,
      as: props.as ? (0, _router.resolveHref)(pathname, props.as) : resolvedAs || resolvedHref
    };
  }, [pathname, props.href, props.as]);

  _react.default.useEffect(() => {
    if (p && IntersectionObserver && childElm && childElm.tagName && (0, _router.isLocalURL)(href)) {
      // Join on an invalid URI character
      const isPrefetched = prefetched[href + '%' + as];

      if (!isPrefetched) {
        return listenToIntersections(childElm, () => {
          prefetch(router, href, as);
        });
      }
    }
  }, [p, childElm, href, as, router]);

  let {
    children,
    replace,
    shallow,
    scroll
  } = props; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag

  if (typeof children === 'string') {
    children = /*#__PURE__*/_react.default.createElement("a", null, children);
  } // This will return the first child, if multiple are provided it will throw an error


  const child = _react.Children.only(children);

  const childProps = {
    ref: el => {
      if (el) setChildElm(el);

      if (child && typeof child === 'object' && child.ref) {
        if (typeof child.ref === 'function') child.ref(el);else if (typeof child.ref === 'object') {
          child.ref.current = el;
        }
      }
    },
    onClick: e => {
      if (child.props && typeof child.props.onClick === 'function') {
        child.props.onClick(e);
      }

      if (!e.defaultPrevented) {
        linkClicked(e, router, href, as, replace, shallow, scroll);
      }
    }
  };

  if (p) {
    childProps.onMouseEnter = e => {
      if (!(0, _router.isLocalURL)(href)) return;

      if (child.props && typeof child.props.onMouseEnter === 'function') {
        child.props.onMouseEnter(e);
      }

      prefetch(router, href, as, {
        priority: true
      });
    };
  } // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
  // defined, we specify the current 'href', so that repetition is not needed by the user


  if (props.passHref || child.type === 'a' && !('href' in child.props)) {
    childProps.href = (0, _router.addBasePath)((0, _router.addLocale)(as, router && router.locale, router && router.defaultLocale));
  }

  return /*#__PURE__*/_react.default.cloneElement(child, childProps);
}

var _default = Link;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.removePathTrailingSlash = removePathTrailingSlash;
exports.normalizePathTrailingSlash = void 0;
/**
* Removes the trailing slash of a path if there is one. Preserves the root path `/`.
*/

function removePathTrailingSlash(path) {
  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;
}
/**
* Normalizes the trailing slash of a path according to the `trailingSlash` option
* in `next.config.js`.
*/


const normalizePathTrailingSlash =  false ? undefined : removePathTrailingSlash;
exports.normalizePathTrailingSlash = normalizePathTrailingSlash;

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));

exports.Router = _router2.default;
exports.NextRouter = _router2.NextRouter;

var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "../next-server/lib/router-context");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

exports.withRouter = _withRouter.default;
/* global window */

const singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],

  ready(cb) {
    if (this.router) return cb();

    if (false) {}
  }

}; // Create public properties and methods of the router in the singletonRouter

const urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale'];
const routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
const coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get() {
    return _router2.default.events;
  }

});
urlPropertyFields.forEach(field => {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get() {
      const router = getRouter();
      return router[field];
    }

  });
});
coreMethodFields.forEach(field => {
  // We don't really know the types here, so we add them later instead
  ;

  singletonRouter[field] = (...args) => {
    const router = getRouter();
    return router[field](...args);
  };
});
routerEvents.forEach(event => {
  singletonRouter.ready(() => {
    _router2.default.events.on(event, (...args) => {
      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;
      const _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField](...args);
        } catch (err) {
          console.error(`Error when running the Router event: ${eventField}`);
          console.error(`${err.message}\n${err.stack}`);
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    const message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.


var _default = singletonRouter; // Reexport the withRoute HOC

exports.default = _default;

function useRouter() {
  return _react.default.useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.


const createRouter = (...args) => {
  singletonRouter.router = new _router2.default(...args);
  singletonRouter.readyCallbacks.forEach(cb => cb());
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance


exports.createRouter = createRouter;

function makePublicRouterInstance(router) {
  const _router = router;
  const instance = {};

  for (const property of urlPropertyFields) {
    if (typeof _router[property] === 'object') {
      instance[property] = Object.assign(Array.isArray(_router[property]) ? [] : {}, _router[property]); // makes sure query is not stateful

      continue;
    }

    instance[property] = _router[property];
  } // Events is a static property on the router, the router doesn't have to be initialized to use it


  instance.events = _router2.default.events;
  coreMethodFields.forEach(field => {
    instance[field] = (...args) => {
      return _router[field](...args);
    };
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.default = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = `withRouter(${name})`;
  }

  return WithRouterWrapper;
}

/***/ }),

/***/ "./node_modules/next/dist/compiled/path-to-regexp/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-to-regexp/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tokenize input string.
 */
function lexer(str) {
    var tokens = [];
    var i = 0;
    while (i < str.length) {
        var char = str[i];
        if (char === "*" || char === "+" || char === "?") {
            tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
            continue;
        }
        if (char === "\\") {
            tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
            continue;
        }
        if (char === "{") {
            tokens.push({ type: "OPEN", index: i, value: str[i++] });
            continue;
        }
        if (char === "}") {
            tokens.push({ type: "CLOSE", index: i, value: str[i++] });
            continue;
        }
        if (char === ":") {
            var name = "";
            var j = i + 1;
            while (j < str.length) {
                var code = str.charCodeAt(j);
                if (
                // `0-9`
                (code >= 48 && code <= 57) ||
                    // `A-Z`
                    (code >= 65 && code <= 90) ||
                    // `a-z`
                    (code >= 97 && code <= 122) ||
                    // `_`
                    code === 95) {
                    name += str[j++];
                    continue;
                }
                break;
            }
            if (!name)
                throw new TypeError("Missing parameter name at " + i);
            tokens.push({ type: "NAME", index: i, value: name });
            i = j;
            continue;
        }
        if (char === "(") {
            var count = 1;
            var pattern = "";
            var j = i + 1;
            if (str[j] === "?") {
                throw new TypeError("Pattern cannot start with \"?\" at " + j);
            }
            while (j < str.length) {
                if (str[j] === "\\") {
                    pattern += str[j++] + str[j++];
                    continue;
                }
                if (str[j] === ")") {
                    count--;
                    if (count === 0) {
                        j++;
                        break;
                    }
                }
                else if (str[j] === "(") {
                    count++;
                    if (str[j + 1] !== "?") {
                        throw new TypeError("Capturing groups are not allowed at " + j);
                    }
                }
                pattern += str[j++];
            }
            if (count)
                throw new TypeError("Unbalanced pattern at " + i);
            if (!pattern)
                throw new TypeError("Missing pattern at " + i);
            tokens.push({ type: "PATTERN", index: i, value: pattern });
            i = j;
            continue;
        }
        tokens.push({ type: "CHAR", index: i, value: str[i++] });
    }
    tokens.push({ type: "END", index: i, value: "" });
    return tokens;
}
/**
 * Parse a string for the raw tokens.
 */
function parse(str, options) {
    if (options === void 0) { options = {}; }
    var tokens = lexer(str);
    var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
    var defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?";
    var result = [];
    var key = 0;
    var i = 0;
    var path = "";
    var tryConsume = function (type) {
        if (i < tokens.length && tokens[i].type === type)
            return tokens[i++].value;
    };
    var mustConsume = function (type) {
        var value = tryConsume(type);
        if (value !== undefined)
            return value;
        var _a = tokens[i], nextType = _a.type, index = _a.index;
        throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
    };
    var consumeText = function () {
        var result = "";
        var value;
        // tslint:disable-next-line
        while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
            result += value;
        }
        return result;
    };
    while (i < tokens.length) {
        var char = tryConsume("CHAR");
        var name = tryConsume("NAME");
        var pattern = tryConsume("PATTERN");
        if (name || pattern) {
            var prefix = char || "";
            if (prefixes.indexOf(prefix) === -1) {
                path += prefix;
                prefix = "";
            }
            if (path) {
                result.push(path);
                path = "";
            }
            result.push({
                name: name || key++,
                prefix: prefix,
                suffix: "",
                pattern: pattern || defaultPattern,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        var value = char || tryConsume("ESCAPED_CHAR");
        if (value) {
            path += value;
            continue;
        }
        if (path) {
            result.push(path);
            path = "";
        }
        var open = tryConsume("OPEN");
        if (open) {
            var prefix = consumeText();
            var name_1 = tryConsume("NAME") || "";
            var pattern_1 = tryConsume("PATTERN") || "";
            var suffix = consumeText();
            mustConsume("CLOSE");
            result.push({
                name: name_1 || (pattern_1 ? key++ : ""),
                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                prefix: prefix,
                suffix: suffix,
                modifier: tryConsume("MODIFIER") || ""
            });
            continue;
        }
        mustConsume("END");
    }
    return result;
}
exports.parse = parse;
/**
 * Compile a string to a template function for the path.
 */
function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
}
exports.compile = compile;
/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens, options) {
    if (options === void 0) { options = {}; }
    var reFlags = flags(options);
    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
    // Compile all the tokens into regexps.
    var matches = tokens.map(function (token) {
        if (typeof token === "object") {
            return new RegExp("^(?:" + token.pattern + ")$", reFlags);
        }
    });
    return function (data) {
        var path = "";
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            if (typeof token === "string") {
                path += token;
                continue;
            }
            var value = data ? data[token.name] : undefined;
            var optional = token.modifier === "?" || token.modifier === "*";
            var repeat = token.modifier === "*" || token.modifier === "+";
            if (Array.isArray(value)) {
                if (!repeat) {
                    throw new TypeError("Expected \"" + token.name + "\" to not repeat, but got an array");
                }
                if (value.length === 0) {
                    if (optional)
                        continue;
                    throw new TypeError("Expected \"" + token.name + "\" to not be empty");
                }
                for (var j = 0; j < value.length; j++) {
                    var segment = encode(value[j], token);
                    if (validate && !matches[i].test(segment)) {
                        throw new TypeError("Expected all \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                    }
                    path += token.prefix + segment + token.suffix;
                }
                continue;
            }
            if (typeof value === "string" || typeof value === "number") {
                var segment = encode(String(value), token);
                if (validate && !matches[i].test(segment)) {
                    throw new TypeError("Expected \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                }
                path += token.prefix + segment + token.suffix;
                continue;
            }
            if (optional)
                continue;
            var typeOfMessage = repeat ? "an array" : "a string";
            throw new TypeError("Expected \"" + token.name + "\" to be " + typeOfMessage);
        }
        return path;
    };
}
exports.tokensToFunction = tokensToFunction;
/**
 * Create path match function from `path-to-regexp` spec.
 */
function match(str, options) {
    var keys = [];
    var re = pathToRegexp(str, keys, options);
    return regexpToFunction(re, keys, options);
}
exports.match = match;
/**
 * Create a path match function from `path-to-regexp` output.
 */
function regexpToFunction(re, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;
    return function (pathname) {
        var m = re.exec(pathname);
        if (!m)
            return false;
        var path = m[0], index = m.index;
        var params = Object.create(null);
        var _loop_1 = function (i) {
            // tslint:disable-next-line
            if (m[i] === undefined)
                return "continue";
            var key = keys[i - 1];
            if (key.modifier === "*" || key.modifier === "+") {
                params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {
                    return decode(value, key);
                });
            }
            else {
                params[key.name] = decode(m[i], key);
            }
        };
        for (var i = 1; i < m.length; i++) {
            _loop_1(i);
        }
        return { path: path, index: index, params: params };
    };
}
exports.regexpToFunction = regexpToFunction;
/**
 * Escape a regular expression string.
 */
function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
/**
 * Get the flags for a regexp from the options.
 */
function flags(options) {
    return options && options.sensitive ? "" : "i";
}
/**
 * Pull out keys from a regexp.
 */
function regexpToRegexp(path, keys) {
    if (!keys)
        return path;
    // Use a negative lookahead to match only capturing groups.
    var groups = path.source.match(/\((?!\?)/g);
    if (groups) {
        for (var i = 0; i < groups.length; i++) {
            keys.push({
                name: i,
                prefix: "",
                suffix: "",
                modifier: "",
                pattern: ""
            });
        }
    }
    return path;
}
/**
 * Transform an array into a regexp.
 */
function arrayToRegexp(paths, keys, options) {
    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });
    return new RegExp("(?:" + parts.join("|") + ")", flags(options));
}
/**
 * Create a path regexp from string input.
 */
function stringToRegexp(path, keys, options) {
    return tokensToRegexp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 */
function tokensToRegexp(tokens, keys, options) {
    if (options === void 0) { options = {}; }
    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d;
    var endsWith = "[" + escapeString(options.endsWith || "") + "]|$";
    var delimiter = "[" + escapeString(options.delimiter || "/#?") + "]";
    var route = start ? "^" : "";
    // Iterate over the tokens and create our regexp string.
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (typeof token === "string") {
            route += escapeString(encode(token));
        }
        else {
            var prefix = escapeString(encode(token.prefix));
            var suffix = escapeString(encode(token.suffix));
            if (token.pattern) {
                if (keys)
                    keys.push(token);
                if (prefix || suffix) {
                    if (token.modifier === "+" || token.modifier === "*") {
                        var mod = token.modifier === "*" ? "?" : "";
                        route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
                    }
                    else {
                        route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier;
                    }
                }
                else {
                    route += "(" + token.pattern + ")" + token.modifier;
                }
            }
            else {
                route += "(?:" + prefix + suffix + ")" + token.modifier;
            }
        }
    }
    if (end) {
        if (!strict)
            route += delimiter + "?";
        route += !options.endsWith ? "$" : "(?=" + endsWith + ")";
    }
    else {
        var endToken = tokens[tokens.length - 1];
        var isEndDelimited = typeof endToken === "string"
            ? delimiter.indexOf(endToken[endToken.length - 1]) > -1
            : // tslint:disable-next-line
                endToken === undefined;
        if (!strict) {
            route += "(?:" + delimiter + "(?=" + endsWith + "))?";
        }
        if (!isEndDelimited) {
            route += "(?=" + delimiter + "|" + endsWith + ")";
        }
    }
    return new RegExp(route, flags(options));
}
exports.tokensToRegexp = tokensToRegexp;
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 */
function pathToRegexp(path, keys, options) {
    if (path instanceof RegExp)
        return regexpToRegexp(path, keys);
    if (Array.isArray(path))
        return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
}
exports.pathToRegexp = pathToRegexp;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = mitt;
/*
MIT License
Copyright (c) Jason Miller (https://jasonformat.com/)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
// It's been edited for the needs of this script
// See the LICENSE at the top of the file

function mitt() {
  const all = Object.create(null);
  return {
    on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },

    off(type, handler) {
      if (all[type]) {
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },

    emit(type, ...evts) {
      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(handler => {
        handler(...evts);
      });
    }

  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.addLocale = addLocale;
exports.delLocale = delLocale;
exports.hasBasePath = hasBasePath;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.isLocalURL = isLocalURL;
exports.interpolateAs = interpolateAs;
exports.resolveHref = resolveHref;
exports.markLoadingError = markLoadingError;
exports.default = void 0;

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

var _denormalizePagePath = __webpack_require__(/*! ../../server/denormalize-page-path */ "./node_modules/next/dist/next-server/server/denormalize-page-path.js");

var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");

var _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");

var _querystring = __webpack_require__(/*! ./utils/querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

var _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js"));

var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");

var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");

var _escapePathDelimiters = _interopRequireDefault(__webpack_require__(/*! ./utils/escape-path-delimiters */ "./node_modules/next/dist/next-server/lib/router/utils/escape-path-delimiters.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/* global __NEXT_DATA__ */
// tslint:disable:no-console


const basePath =  false || '';

function buildCancellationError() {
  return Object.assign(new Error('Route Cancelled'), {
    cancelled: true
  });
}

function addPathPrefix(path, prefix) {
  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : `${prefix}${path}` : path;
}

function addLocale(path, locale, defaultLocale) {
  if (false) {}

  return path;
}

function delLocale(path, locale) {
  if (false) {}

  return path;
}

function hasBasePath(path) {
  return path === basePath || path.startsWith(basePath + '/');
}

function addBasePath(path) {
  // we only add the basepath on relative urls
  return addPathPrefix(path, basePath);
}

function delBasePath(path) {
  return path.slice(basePath.length) || '/';
}
/**
* Detects whether a given url is routable by the Next.js router (browser only).
*/


function isLocalURL(url) {
  if (url.startsWith('/')) return true;

  try {
    // absolute urls can be local if they are on the same origin
    const locationOrigin = (0, _utils.getLocationOrigin)();
    const resolved = new URL(url, locationOrigin);
    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);
  } catch (_) {
    return false;
  }
}

function interpolateAs(route, asPathname, query) {
  let interpolatedRoute = '';
  const dynamicRegex = (0, _routeRegex.getRouteRegex)(route);
  const dynamicGroups = dynamicRegex.groups;
  const dynamicMatches = // Try to match the dynamic route against the asPath
  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href
  // TODO: should this take priority; also need to change in the router.
  query;
  interpolatedRoute = route;
  const params = Object.keys(dynamicGroups);

  if (!params.every(param => {
    let value = dynamicMatches[param] || '';
    const {
      repeat,
      optional
    } = dynamicGroups[param]; // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)

    let replaced = `[${repeat ? '...' : ''}${param}]`;

    if (optional) {
      replaced = `${!value ? '/' : ''}[${replaced}]`;
    }

    if (repeat && !Array.isArray(value)) value = [value];
    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present
    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(_escapePathDelimiters.default).join('/') : (0, _escapePathDelimiters.default)(value)) || '/');
  })) {
    interpolatedRoute = ''; // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
  }

  return {
    params,
    result: interpolatedRoute
  };
}

function omitParmsFromQuery(query, params) {
  const filteredQuery = {};
  Object.keys(query).forEach(key => {
    if (!params.includes(key)) {
      filteredQuery[key] = query[key];
    }
  });
  return filteredQuery;
}
/**
* Resolves a given hyperlink with a certain router state (basePath not included).
* Preserves absolute urls.
*/


function resolveHref(currentPath, href, resolveAs) {
  // we use a dummy base url for relative urls
  const base = new URL(currentPath, 'http://n');
  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href);

  try {
    const finalUrl = new URL(urlAsString, base);
    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);
    let interpolatedAs = '';

    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
      const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);
      const {
        result,
        params
      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);

      if (result) {
        interpolatedAs = (0, _utils.formatWithValidation)({
          pathname: result,
          hash: finalUrl.hash,
          query: omitParmsFromQuery(query, params)
        });
      }
    } // if the origin didn't change, it means we received a relative href


    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;
  } catch (_) {
    return resolveAs ? [urlAsString] : urlAsString;
  }
}

const PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR');

function markLoadingError(err) {
  return Object.defineProperty(err, PAGE_LOAD_ERROR, {});
}

function prepareUrlAs(router, url, as) {
  // If url and as provided as an object representation,
  // we'll format them into the string version here.
  return {
    url: addBasePath(resolveHref(router.pathname, url)),
    as: as ? addBasePath(resolveHref(router.pathname, as)) : as
  };
}

const manualScrollRestoration =  false && false;

function fetchRetry(url, attempts) {
  return fetch(url, {
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    credentials: 'same-origin'
  }).then(res => {
    if (!res.ok) {
      if (attempts > 1 && res.status >= 500) {
        return fetchRetry(url, attempts - 1);
      }

      throw new Error(`Failed to load static props`);
    }

    return res.json();
  });
}

function fetchNextData(dataHref, isServerRender) {
  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      markLoadingError(err);
    }

    throw err;
  });
}

class Router {
  /**
  * Map of all components loaded in `Router`
  */
  // Static Data Cache
  constructor(_pathname, _query, _as, {
    initialProps,
    pageLoader,
    App,
    wrapApp,
    Component,
    initialStyleSheets,
    err,
    subscription,
    isFallback,
    locale,
    locales,
    defaultLocale
  }) {
    this.route = void 0;
    this.pathname = void 0;
    this.query = void 0;
    this.asPath = void 0;
    this.basePath = void 0;
    this.components = void 0;
    this.sdc = {};
    this.sub = void 0;
    this.clc = void 0;
    this.pageLoader = void 0;
    this._bps = void 0;
    this.events = void 0;
    this._wrapApp = void 0;
    this.isSsr = void 0;
    this.isFallback = void 0;
    this._inFlightRoute = void 0;
    this._shallow = void 0;
    this.locale = void 0;
    this.locales = void 0;
    this.defaultLocale = void 0;

    this.onPopState = e => {
      const state = e.state;

      if (!state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        const {
          pathname,
          query
        } = this;
        this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname: addBasePath(pathname),
          query
        }), (0, _utils.getURL)());
        return;
      }

      if (!state.__N) {
        return;
      }

      const {
        url,
        as,
        options
      } = state;
      const {
        pathname
      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site

      if (this.isSsr && as === this.asPath && pathname === this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (this._bps && !this._bps(state)) {
        return;
      }

      this.change('replaceState', url, as, Object.assign({}, options, {
        shallow: options.shallow && this._shallow
      }));
    }; // represents the current component key


    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (_pathname !== '/_error') {
      this.components[this.route] = {
        Component,
        styleSheets: initialStyleSheets,
        props: initialProps,
        err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App,
      styleSheets: [
        /* /_app does not need its stylesheets managed */
      ]
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = _pathname;
    this.query = _query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    this.asPath = // @ts-ignore this is temporarily global (attached to window)
    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;

    if (false) {}

    if (false) {}
  }

  reload() {
    window.location.reload();
  }
  /**
  * Go back in history
  */


  back() {
    window.history.back();
  }
  /**
  * Performs a `pushState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  push(url, as = url, options = {}) {
    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('pushState', url, as, options);
  }
  /**
  * Performs a `replaceState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  replace(url, as = url, options = {}) {
    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('replaceState', url, as, options);
  }

  async change(method, url, as, options) {
    if (!isLocalURL(url)) {
      window.location.href = url;
      return false;
    }

    if (!options._h) {
      this.isSsr = false;
    } // marking route changes as a navigation start entry


    if (_utils.ST) {
      performance.mark('routeChange');
    }

    if (this._inFlightRoute) {
      this.abortComponentLoad(this._inFlightRoute);
    }

    as = addLocale(as, this.locale, this.defaultLocale);
    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);
    this._inFlightRoute = as; // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.

    if (!options._h && this.onlyAHashChange(cleanedAs)) {
      this.asPath = cleanedAs;
      Router.events.emit('hashChangeStart', as); // TODO: do we need the resolved href when only a hash change?

      this.changeState(method, url, as, options);
      this.scrollToHash(cleanedAs);
      this.notify(this.components[this.route]);
      Router.events.emit('hashChangeComplete', as);
      return true;
    } // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to


    const pages = await this.pageLoader.getPageList();
    const {
      __rewrites: rewrites
    } = await this.pageLoader.promisedBuildManifest;
    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname,
      query
    } = parsed;
    parsed = this._resolveHref(parsed, pages);

    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1


    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url

    if (!this.urlIsNew(cleanedAs)) {
      method = 'replaceState';
    }

    let route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
    const {
      shallow = false
    } = options; // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly

    let resolvedAs = as;

    if (true) {
      resolvedAs = (0, _resolveRewrites.default)((0, _parseRelativeUrl.parseRelativeUrl)(as).pathname, pages, basePath, rewrites, query, p => this._resolveHref({
        pathname: p
      }, pages).pathname);

      if (resolvedAs !== as) {
        const potentialHref = (0, _normalizeTrailingSlash.removePathTrailingSlash)(this._resolveHref(Object.assign({}, parsed, {
          pathname: resolvedAs
        }), pages, false).pathname); // if this directly matches a page we need to update the href to
        // allow the correct page chunk to be loaded

        if (pages.includes(potentialHref)) {
          route = potentialHref;
          pathname = potentialHref;
          parsed.pathname = pathname;
          url = (0, _utils.formatWithValidation)(parsed);
        }
      }
    }

    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);

    if ((0, _isDynamic.isDynamicRoute)(route)) {
      const parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);
      const asPathname = parsedAs.pathname;
      const routeRegex = (0, _routeRegex.getRouteRegex)(route);
      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);
      const shouldInterpolate = route === asPathname;
      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};

      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {
        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);

        if (missingParams.length > 0) {
          if (true) {
            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \`as\` and \`href\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \`href\`'s \`query\``);
          }

          throw new Error((shouldInterpolate ? `The provided \`href\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \`as\` value (${asPathname}) is incompatible with the \`href\` value (${route}). `) + `Read more: https://err.sh/vercel/next.js/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);
        }
      } else if (shouldInterpolate) {
        as = (0, _utils.formatWithValidation)(Object.assign({}, parsedAs, {
          pathname: interpolatedAs.result,
          query: omitParmsFromQuery(query, interpolatedAs.params)
        }));
      } else {
        // Merge params into `query`, overwriting any specified in search
        Object.assign(query, routeMatch);
      }
    }

    Router.events.emit('routeChangeStart', as);

    try {
      const routeInfo = await this.getRouteInfo(route, pathname, query, as, shallow);
      let {
        error,
        props,
        __N_SSG,
        __N_SSP
      } = routeInfo; // handle redirect on client-transition

      if ((__N_SSG || __N_SSP) && props && props.pageProps && props.pageProps.__N_REDIRECT) {
        const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt
        // client-navigation if it is falling back to hard navigation if
        // it's not

        if (destination.startsWith('/')) {
          const parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);

          this._resolveHref(parsedHref, pages);

          if (pages.includes(parsedHref.pathname)) {
            return this.change('replaceState', destination, destination, options);
          }
        }

        window.location.href = destination;
        return new Promise(() => {});
      }

      Router.events.emit('beforeHistoryChange', as);
      this.changeState(method, url, addLocale(as, this.locale, this.defaultLocale), options);

      if (true) {
        const appComp = this.components['/_app'].Component;
        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
      }

      await this.set(route, pathname, query, cleanedAs, routeInfo).catch(e => {
        if (e.cancelled) error = error || e;else throw e;
      });

      if (error) {
        Router.events.emit('routeChangeError', error, cleanedAs);
        throw error;
      }

      if (false) {}

      Router.events.emit('routeChangeComplete', as);
      return true;
    } catch (err) {
      if (err.cancelled) {
        return false;
      }

      throw err;
    }
  }

  changeState(method, url, as, options = {}) {
    if (true) {
      if (typeof window.history === 'undefined') {
        console.error(`Warning: window.history is not available.`);
        return;
      }

      if (typeof window.history[method] === 'undefined') {
        console.error(`Warning: window.history.${method} is not available`);
        return;
      }
    }

    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {
      this._shallow = options.shallow;
      window.history[method]({
        url,
        as,
        options,
        __N: true
      }, // Most browsers currently ignores this parameter, although they may use it in the future.
      // Passing the empty string here should be safe against future changes to the method.
      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
      '', as);
    }
  }

  async handleRouteInfoError(err, pathname, query, as, loadErrorFail) {
    if (err.cancelled) {
      // bubble up cancellation errors
      throw err;
    }

    if (PAGE_LOAD_ERROR in err || loadErrorFail) {
      Router.events.emit('routeChangeError', err, as); // If we can't load the page it could be one of following reasons
      //  1. Page doesn't exists
      //  2. Page does exist in a different zone
      //  3. Internal error while loading the page
      // So, doing a hard reload is the proper way to deal with this.

      window.location.href = as; // Changing the URL doesn't block executing the current code path.
      // So let's throw a cancellation error stop the routing logic.

      throw buildCancellationError();
    }

    try {
      const {
        page: Component,
        styleSheets
      } = await this.fetchComponent('/_error');
      const routeInfo = {
        Component,
        styleSheets,
        err,
        error: err
      };

      try {
        routeInfo.props = await this.getInitialProps(Component, {
          err,
          pathname,
          query
        });
      } catch (gipErr) {
        console.error('Error in error page `getInitialProps`: ', gipErr);
        routeInfo.props = {};
      }

      return routeInfo;
    } catch (routeInfoErr) {
      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true);
    }
  }

  async getRouteInfo(route, pathname, query, as, shallow = false) {
    try {
      const cachedRouteInfo = this.components[route];

      if (shallow && cachedRouteInfo && this.route === route) {
        return cachedRouteInfo;
      }

      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({
        Component: res.page,
        styleSheets: res.styleSheets,
        __N_SSG: res.mod.__N_SSG,
        __N_SSP: res.mod.__N_SSP
      }));
      const {
        Component,
        __N_SSG,
        __N_SSP
      } = routeInfo;

      if (true) {
        const {
          isValidElementType
        } = __webpack_require__(/*! react-is */ "react-is");

        if (!isValidElementType(Component)) {
          throw new Error(`The default export is not a React Component in page: "${pathname}"`);
        }
      }

      let dataHref;

      if (__N_SSG || __N_SSP) {
        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({
          pathname,
          query
        }), delBasePath(as), __N_SSG, this.locale, this.defaultLocale);
      }

      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`
      {
        pathname,
        query,
        asPath: as
      }));
      routeInfo.props = props;
      this.components[route] = routeInfo;
      return routeInfo;
    } catch (err) {
      return this.handleRouteInfoError(err, pathname, query, as);
    }
  }

  set(route, pathname, query, as, data) {
    this.isFallback = false;
    this.route = route;
    this.pathname = pathname;
    this.query = query;
    this.asPath = as;
    return this.notify(data);
  }
  /**
  * Callback to execute before replacing router state
  * @param cb callback to be executed
  */


  beforePopState(cb) {
    this._bps = cb;
  }

  onlyAHashChange(as) {
    if (!this.asPath) return false;
    const [oldUrlNoHash, oldHash] = this.asPath.split('#');
    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same

    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
      return true;
    } // If the urls are change, there's more than a hash change


    if (oldUrlNoHash !== newUrlNoHash) {
      return false;
    } // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.


    return oldHash !== newHash;
  }

  scrollToHash(as) {
    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value

    if (hash === '') {
      window.scrollTo(0, 0);
      return;
    } // First we check if the element by id is found


    const idEl = document.getElementById(hash);

    if (idEl) {
      idEl.scrollIntoView();
      return;
    } // If there's no element with the id, we check the `name` property
    // To mirror browsers


    const nameEl = document.getElementsByName(hash)[0];

    if (nameEl) {
      nameEl.scrollIntoView();
    }
  }

  urlIsNew(asPath) {
    return this.asPath !== asPath;
  }

  _resolveHref(parsedHref, pages, applyBasePath = true) {
    const {
      pathname
    } = parsedHref;
    const cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(applyBasePath ? delBasePath(pathname) : pathname));

    if (cleanPathname === '/404' || cleanPathname === '/_error') {
      return parsedHref;
    } // handle resolving href for dynamic routes


    if (!pages.includes(cleanPathname)) {
      // eslint-disable-next-line array-callback-return
      pages.some(page => {
        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {
          parsedHref.pathname = applyBasePath ? addBasePath(page) : page;
          return true;
        }
      });
    }

    return parsedHref;
  }
  /**
  * Prefetch page code, you may wait for the data during page rendering.
  * This feature only works in production!
  * @param url the href of prefetched page
  * @param asPath the as path of the prefetched page
  */


  async prefetch(url, asPath = url, options = {}) {
    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname
    } = parsed;
    const pages = await this.pageLoader.getPageList();
    parsed = this._resolveHref(parsed, pages);

    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // Prefetch is not supported in development mode because it would trigger on-demand-entries


    if (true) {
      return;
    }

    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
    await Promise.all([this.pageLoader.prefetchData(url, asPath, this.locale, this.defaultLocale), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);
  }

  async fetchComponent(route) {
    let cancelled = false;

    const cancel = this.clc = () => {
      cancelled = true;
    };

    const componentResult = await this.pageLoader.loadPage(route);

    if (cancelled) {
      const error = new Error(`Abort fetching component for route: "${route}"`);
      error.cancelled = true;
      throw error;
    }

    if (cancel === this.clc) {
      this.clc = null;
    }

    return componentResult;
  }

  _getData(fn) {
    let cancelled = false;

    const cancel = () => {
      cancelled = true;
    };

    this.clc = cancel;
    return fn().then(data => {
      if (cancel === this.clc) {
        this.clc = null;
      }

      if (cancelled) {
        const err = new Error('Loading initial props cancelled');
        err.cancelled = true;
        throw err;
      }

      return data;
    });
  }

  _getStaticData(dataHref) {
    const {
      href: cacheKey
    } = new URL(dataHref, window.location.href);

    if (false) {}

    return fetchNextData(dataHref, this.isSsr).then(data => {
      this.sdc[cacheKey] = data;
      return data;
    });
  }

  _getServerData(dataHref) {
    return fetchNextData(dataHref, this.isSsr);
  }

  getInitialProps(Component, ctx) {
    const {
      Component: App
    } = this.components['/_app'];

    const AppTree = this._wrapApp(App);

    ctx.AppTree = AppTree;
    return (0, _utils.loadGetInitialProps)(App, {
      AppTree,
      Component,
      router: this,
      ctx
    });
  }

  abortComponentLoad(as) {
    if (this.clc) {
      Router.events.emit('routeChangeError', buildCancellationError(), as);
      this.clc();
      this.clc = null;
    }
  }

  notify(data) {
    return this.sub(data, this.components['/_app'].Component);
  }

}

exports.default = Router;
Router.events = (0, _mitt.default)();

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/escape-path-delimiters.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/escape-path-delimiters.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = escapePathDelimiters; // escape delimiters used by path-to-regexp

function escapePathDelimiters(segment) {
  return segment.replace(/[/#?]/g, char => encodeURIComponent(char));
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/format-url.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.formatUrl = formatUrl;

var querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} // Format function modified from nodejs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


const slashedProtocols = /https?|ftp|gopher|file/;

function formatUrl(urlObj) {
  let {
    auth,
    hostname
  } = urlObj;
  let protocol = urlObj.protocol || '';
  let pathname = urlObj.pathname || '';
  let hash = urlObj.hash || '';
  let query = urlObj.query || '';
  let host = false;
  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';

  if (urlObj.host) {
    host = auth + urlObj.host;
  } else if (hostname) {
    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);

    if (urlObj.port) {
      host += ':' + urlObj.port;
    }
  }

  if (query && typeof query === 'object') {
    query = String(querystring.urlQueryToSearchParams(query));
  }

  let search = urlObj.search || query && `?${query}` || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash[0] !== '#') hash = '#' + hash;
  if (search && search[0] !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, encodeURIComponent);
  search = search.replace('#', '%23');
  return `${protocol}${host}${pathname}${search}${hash}`;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string

const TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.parseRelativeUrl = parseRelativeUrl;

var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

const DUMMY_BASE = new URL(true ? 'http://n' : undefined);
/**
* Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative
* (e.g. `./hello`) then at least base must be.
* Absolute urls are rejected with one exception, in the browser, absolute urls that are on
* the current origin will be parsed as relative
*/

function parseRelativeUrl(url, base) {
  const resolvedBase = base ? new URL(base, DUMMY_BASE) : DUMMY_BASE;
  const {
    pathname,
    searchParams,
    search,
    hash,
    href,
    origin,
    protocol
  } = new URL(url, resolvedBase);

  if (origin !== DUMMY_BASE.origin || protocol !== 'http:' && protocol !== 'https:') {
    throw new Error('invariant: invalid relative URL');
  }

  return {
    pathname,
    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
    search,
    hash,
    href: href.slice(DUMMY_BASE.origin.length)
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/path-match.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/path-match.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.__esModule = true;
exports.pathToRegexp = exports.default = exports.customRouteMatcherOptions = exports.matcherOptions = void 0;

var pathToRegexp = _interopRequireWildcard(__webpack_require__(/*! next/dist/compiled/path-to-regexp */ "./node_modules/next/dist/compiled/path-to-regexp/index.js"));

exports.pathToRegexp = pathToRegexp;

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

const matcherOptions = {
  sensitive: false,
  delimiter: '/'
};
exports.matcherOptions = matcherOptions;

const customRouteMatcherOptions = _objectSpread(_objectSpread({}, matcherOptions), {}, {
  strict: true
});

exports.customRouteMatcherOptions = customRouteMatcherOptions;

var _default = (customRoute = false) => {
  return path => {
    const keys = [];
    const matcherRegex = pathToRegexp.pathToRegexp(path, keys, customRoute ? customRouteMatcherOptions : matcherOptions);
    const matcher = pathToRegexp.regexpToFunction(matcherRegex, keys);
    return (pathname, params) => {
      const res = pathname == null ? false : matcher(pathname);

      if (!res) {
        return false;
      }

      if (customRoute) {
        for (const key of keys) {
          // unnamed params should be removed as they
          // are not allowed to be used in the destination
          if (typeof key.name === 'number') {
            delete res.params[key.name];
          }
        }
      }

      return _objectSpread(_objectSpread({}, params), res.params);
    };
  };
};

exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.__esModule = true;
exports.default = prepareDestination;

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

var _parseRelativeUrl = __webpack_require__(/*! ./parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");

var pathToRegexp = _interopRequireWildcard(__webpack_require__(/*! next/dist/compiled/path-to-regexp */ "./node_modules/next/dist/compiled/path-to-regexp/index.js"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function prepareDestination(destination, params, query, appendParamsToQuery, basePath) {
  let parsedDestination = {};

  if (destination.startsWith('/')) {
    parsedDestination = (0, _parseRelativeUrl.parseRelativeUrl)(destination);
  } else {
    const {
      pathname,
      searchParams,
      hash,
      hostname,
      port,
      protocol,
      search,
      href
    } = new URL(destination);
    parsedDestination = {
      pathname,
      query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
      hash,
      protocol,
      hostname,
      port,
      search,
      href
    };
  }

  const destQuery = parsedDestination.query;
  const destPath = `${parsedDestination.pathname}${parsedDestination.hash || ''}`;
  const destPathParamKeys = [];
  pathToRegexp.pathToRegexp(destPath, destPathParamKeys);
  const destPathParams = destPathParamKeys.map(key => key.name);
  let destinationCompiler = pathToRegexp.compile(destPath, // we don't validate while compiling the destination since we should
  // have already validated before we got to this point and validating
  // breaks compiling destinations with named pattern params from the source
  // e.g. /something:hello(.*) -> /another/:hello is broken with validation
  // since compile validation is meant for reversing and not for inserting
  // params from a separate path-regex into another
  {
    validate: false
  });
  let newUrl; // update any params in query values

  for (const [key, strOrArray] of Object.entries(destQuery)) {
    let value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray;

    if (value) {
      // the value needs to start with a forward-slash to be compiled
      // correctly
      value = `/${value}`;
      const queryCompiler = pathToRegexp.compile(value, {
        validate: false
      });
      value = queryCompiler(params).substr(1);
    }

    destQuery[key] = value;
  } // add path params to query if it's not a redirect and not
  // already defined in destination query or path


  const paramKeys = Object.keys(params);

  if (appendParamsToQuery && !paramKeys.some(key => destPathParams.includes(key))) {
    for (const key of paramKeys) {
      if (!(key in destQuery)) {
        destQuery[key] = params[key];
      }
    }
  }

  const shouldAddBasePath = destination.startsWith('/') && basePath;

  try {
    newUrl = `${shouldAddBasePath ? basePath : ''}${destinationCompiler(params)}`;
    const [pathname, hash] = newUrl.split('#');
    parsedDestination.pathname = pathname;
    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`;
    delete parsedDestination.search;
  } catch (err) {
    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {
      throw new Error(`To use a multi-match in the destination you must add \`*\` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match`);
    }

    throw err;
  } // Query merge order lowest priority to highest
  // 1. initial URL query values
  // 2. path segment values
  // 3. destination specified query values


  parsedDestination.query = _objectSpread(_objectSpread({}, query), parsedDestination.query);
  return {
    newUrl,
    parsedDestination
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/querystring.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.searchParamsToUrlQuery = searchParamsToUrlQuery;
exports.urlQueryToSearchParams = urlQueryToSearchParams;
exports.assign = assign;

function searchParamsToUrlQuery(searchParams) {
  const query = {};
  searchParams.forEach((value, key) => {
    if (typeof query[key] === 'undefined') {
      query[key] = value;
    } else if (Array.isArray(query[key])) {
      ;
      query[key].push(value);
    } else {
      query[key] = [query[key], value];
    }
  });
  return query;
}

function stringifyUrlQueryParam(param) {
  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
    return String(param);
  } else {
    return '';
  }
}

function urlQueryToSearchParams(urlQuery) {
  const result = new URLSearchParams();
  Object.entries(urlQuery).forEach(([key, value]) => {
    if (Array.isArray(value)) {
      value.forEach(item => result.append(key, stringifyUrlQueryParam(item)));
    } else {
      result.set(key, stringifyUrlQueryParam(value));
    }
  });
  return result;
}

function assign(target, ...searchParamsList) {
  searchParamsList.forEach(searchParams => {
    Array.from(searchParams.keys()).forEach(key => target.delete(key));
    searchParams.forEach((value, key) => target.append(key, value));
  });
  return target;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = resolveRewrites;

var _pathMatch = _interopRequireDefault(__webpack_require__(/*! ./path-match */ "./node_modules/next/dist/next-server/lib/router/utils/path-match.js"));

var _prepareDestination = _interopRequireDefault(__webpack_require__(/*! ./prepare-destination */ "./node_modules/next/dist/next-server/lib/router/utils/prepare-destination.js"));

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const customRouteMatcher = (0, _pathMatch.default)(true);

function resolveRewrites(asPath, pages, basePath, rewrites, query, resolveHref) {
  if (!pages.includes(asPath)) {
    for (const rewrite of rewrites) {
      const matcher = customRouteMatcher(rewrite.source);
      const params = matcher(asPath);

      if (params) {
        if (!rewrite.destination) {
          // this is a proxied rewrite which isn't handled on the client
          break;
        }

        const destRes = (0, _prepareDestination.default)(rewrite.destination, params, query, true, rewrite.basePath === false ? '' : basePath);
        asPath = destRes.parsedDestination.pathname;
        Object.assign(query, destRes.parsedDestination.query);

        if (pages.includes((0, _normalizeTrailingSlash.removePathTrailingSlash)(asPath))) {
          // check if we now match a page as this means we are done
          // resolving the rewrites
          break;
        } // check if we match a dynamic-route, if so we break the rewrites chain


        const resolvedHref = resolveHref(asPath);

        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {
          break;
        }
      }
    }
  }

  return asPath;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteMatcher = getRouteMatcher;

function getRouteMatcher(routeRegex) {
  const {
    re,
    groups
  } = routeRegex;
  return pathname => {
    const routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    const decode = param => {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        const err = new Error('failed to decode param');
        err.code = 'DECODE_FAILED';
        throw err;
      }
    };

    const params = {};
    Object.keys(groups).forEach(slugName => {
      const g = groups[slugName];
      const m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(entry => decode(entry)) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes

function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}

function parseParameter(param) {
  const optional = param.startsWith('[') && param.endsWith(']');

  if (optional) {
    param = param.slice(1, -1);
  }

  const repeat = param.startsWith('...');

  if (repeat) {
    param = param.slice(3);
  }

  return {
    key: param,
    repeat,
    optional
  };
}

function getRouteRegex(normalizedRoute) {
  const segments = (normalizedRoute.replace(/\/$/, '') || '/').slice(1).split('/');
  const groups = {};
  let groupIndex = 1;
  const parameterizedRoute = segments.map(segment => {
    if (segment.startsWith('[') && segment.endsWith(']')) {
      const {
        key,
        optional,
        repeat
      } = parseParameter(segment.slice(1, -1));
      groups[key] = {
        pos: groupIndex++,
        repeat,
        optional
      };
      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
    } else {
      return `/${escapeRegex(segment)}`;
    }
  }).join(''); // dead code eliminate for browser since it's only needed
  // while generating routes-manifest

  if (true) {
    let routeKeyCharCode = 97;
    let routeKeyCharLength = 1; // builds a minimal routeKey using only a-z and minimal number of characters

    const getSafeRouteKey = () => {
      let routeKey = '';

      for (let i = 0; i < routeKeyCharLength; i++) {
        routeKey += String.fromCharCode(routeKeyCharCode);
        routeKeyCharCode++;

        if (routeKeyCharCode > 122) {
          routeKeyCharLength++;
          routeKeyCharCode = 97;
        }
      }

      return routeKey;
    };

    const routeKeys = {};
    let namedParameterizedRoute = segments.map(segment => {
      if (segment.startsWith('[') && segment.endsWith(']')) {
        const {
          key,
          optional,
          repeat
        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break
        // the named regex

        let cleanedKey = key.replace(/\W/g, '');
        let invalidKey = false; // check if the key is still invalid and fallback to using a known
        // safe key

        if (cleanedKey.length === 0 || cleanedKey.length > 30) {
          invalidKey = true;
        }

        if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {
          invalidKey = true;
        }

        if (invalidKey) {
          cleanedKey = getSafeRouteKey();
        }

        routeKeys[cleanedKey] = key;
        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;
      } else {
        return `/${escapeRegex(segment)}`;
      }
    }).join('');
    return {
      re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
      groups,
      routeKeys,
      namedRegex: `^${namedParameterizedRoute}(?:/)?$`
    };
  }

  return {
    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
    groups
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;

var _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js");
/**
* Utils
*/


function execOnce(fn) {
  let used = false;
  let result;
  return (...args) => {
    if (!used) {
      used = true;
      result = fn(...args);
    }

    return result;
  };
}

function getLocationOrigin() {
  const {
    protocol,
    hostname,
    port
  } = window.location;
  return `${protocol}//${hostname}${port ? ':' + port : ''}`;
}

function getURL() {
  const {
    href
  } = window.location;
  const origin = getLocationOrigin();
  return href.substring(origin.length);
}

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

function isResSent(res) {
  return res.finished || res.headersSent;
}

async function loadGetInitialProps(App, ctx) {
  if (true) {
    var _App$prototype;

    if ((_App$prototype = App.prototype) == null ? void 0 : _App$prototype.getInitialProps) {
      const message = `"${getDisplayName(App)}.getInitialProps()" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`;
      throw new Error(message);
    }
  } // when called from _app `ctx` is nested in `ctx`


  const res = ctx.res || ctx.ctx && ctx.ctx.res;

  if (!App.getInitialProps) {
    if (ctx.ctx && ctx.Component) {
      // @ts-ignore pageProps default
      return {
        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
      };
    }

    return {};
  }

  const props = await App.getInitialProps(ctx);

  if (res && isResSent(res)) {
    return props;
  }

  if (!props) {
    const message = `"${getDisplayName(App)}.getInitialProps()" should resolve to an object. But found "${props}" instead.`;
    throw new Error(message);
  }

  if (true) {
    if (Object.keys(props).length === 0 && !ctx.ctx) {
      console.warn(`${getDisplayName(App)} returned an empty object from \`getInitialProps\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`);
    }
  }

  return props;
}

const urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;

function formatWithValidation(url) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(key => {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn(`Unknown key passed via urlObject into url.format: ${key}`);
        }
      });
    }
  }

  return (0, _formatUrl.formatUrl)(url);
}

const SP = typeof performance !== 'undefined';
exports.SP = SP;
const ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

/***/ }),

/***/ "./node_modules/next/dist/next-server/server/denormalize-page-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/server/denormalize-page-path.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
exports.__esModule=true;exports.normalizePathSep=normalizePathSep;exports.denormalizePagePath=denormalizePagePath;function normalizePathSep(path){return path.replace(/\\/g,'/');}function denormalizePagePath(page){page=normalizePathSep(page);if(page.startsWith('/index/')){page=page.slice(6);}else if(page==='/index'){page='/';}return page;}
//# sourceMappingURL=denormalize-page-path.js.map

/***/ }),

/***/ "./node_modules/next/dist/pages/_error.js":
/*!************************************************!*\
  !*** ./node_modules/next/dist/pages/_error.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _head = _interopRequireDefault(__webpack_require__(/*! ../next-server/lib/head */ "../next-server/lib/head"));

const statusCodes = {
  400: 'Bad Request',
  404: 'This page could not be found',
  405: 'Method Not Allowed',
  500: 'Internal Server Error'
};

function _getInitialProps({
  res,
  err
}) {
  const statusCode = res && res.statusCode ? res.statusCode : err ? err.statusCode : 404;
  return {
    statusCode
  };
}
/**
* `Error` component used for handling errors.
*/


class Error extends _react.default.Component {
  render() {
    const {
      statusCode
    } = this.props;
    const title = this.props.title || statusCodes[statusCode] || 'An unexpected error has occurred';
    return /*#__PURE__*/_react.default.createElement("div", {
      style: styles.error
    }, /*#__PURE__*/_react.default.createElement(_head.default, null, /*#__PURE__*/_react.default.createElement("title", null, statusCode, ": ", title)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("style", {
      dangerouslySetInnerHTML: {
        __html: 'body { margin: 0 }'
      }
    }), statusCode ? /*#__PURE__*/_react.default.createElement("h1", {
      style: styles.h1
    }, statusCode) : null, /*#__PURE__*/_react.default.createElement("div", {
      style: styles.desc
    }, /*#__PURE__*/_react.default.createElement("h2", {
      style: styles.h2
    }, title, "."))));
  }

}

exports.default = Error;
Error.displayName = 'ErrorPage';
Error.getInitialProps = _getInitialProps;
Error.origGetInitialProps = _getInitialProps;
const styles = {
  error: {
    color: '#000',
    background: '#fff',
    fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, "Segoe UI", "Fira Sans", Avenir, "Helvetica Neue", "Lucida Grande", sans-serif',
    height: '100vh',
    textAlign: 'center',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center'
  },
  desc: {
    display: 'inline-block',
    textAlign: 'left',
    lineHeight: '49px',
    height: '49px',
    verticalAlign: 'middle'
  },
  h1: {
    display: 'inline-block',
    borderRight: '1px solid rgba(0, 0, 0,.3)',
    margin: 0,
    marginRight: '20px',
    padding: '10px 23px 10px 0',
    fontSize: '24px',
    fontWeight: 500,
    verticalAlign: 'top'
  },
  h2: {
    fontSize: '14px',
    fontWeight: 'normal',
    lineHeight: 'inherit',
    margin: 0,
    padding: 0
  }
};

/***/ }),

/***/ "./node_modules/next/error.js":
/*!************************************!*\
  !*** ./node_modules/next/error.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/pages/_error */ "./node_modules/next/dist/pages/_error.js")


/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/video.js/dist/video-js.css":
/*!*************************************************!*\
  !*** ./node_modules/video.js/dist/video-js.css ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./pages/model/profile/index.tsx":
/*!***************************************!*\
  !*** ./pages/model/profile/index.tsx ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _redux_video_actions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @redux/video/actions */ "./src/redux/video/actions.ts");
/* harmony import */ var _redux_feed_actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @redux/feed/actions */ "./src/redux/feed/actions.ts");
/* harmony import */ var _redux_product_actions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @redux/product/actions */ "./src/redux/product/actions.ts");
/* harmony import */ var _redux_gallery_actions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @redux/gallery/actions */ "./src/redux/gallery/actions.ts");
/* harmony import */ var _redux_user_actions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @redux/user/actions */ "./src/redux/user/actions.ts");
/* harmony import */ var src_services__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/services */ "./src/services/index.ts");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/head */ "next/head");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var _components_product_scroll_list_item__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @components/product/scroll-list-item */ "./src/components/product/scroll-list-item.tsx");
/* harmony import */ var _components_post_scroll_list__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @components/post/scroll-list */ "./src/components/post/scroll-list.tsx");
/* harmony import */ var _components_video_scroll_list_item__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @components/video/scroll-list-item */ "./src/components/video/scroll-list-item.tsx");
/* harmony import */ var _components_gallery_scroll_list_gallery__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @components/gallery/scroll-list-gallery */ "./src/components/gallery/scroll-list-gallery.tsx");
/* harmony import */ var _components_performer_table_info__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @components/performer/table-info */ "./src/components/performer/table-info.tsx");
/* harmony import */ var _components_performer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @components/performer */ "./src/components/performer/index.ts");
/* harmony import */ var _components_performer_share_profile__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @components/performer/share-profile */ "./src/components/performer/share-profile.tsx");
/* harmony import */ var _components_post_search_bar__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @components/post/search-bar */ "./src/components/post/search-bar.tsx");
/* harmony import */ var _components_common_base_loader__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @components/common/base/loader */ "./src/components/common/base/loader.tsx");
/* harmony import */ var _components_common__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @components/common */ "./src/components/common/index.tsx");
/* harmony import */ var _lib_index__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @lib/index */ "./src/lib/index.ts");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var next_error__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! next/error */ "./node_modules/next/error.js");
/* harmony import */ var next_error__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(next_error__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var _components_performer_performer_less__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @components/performer/performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _components_performer_performer_less__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(_components_performer_performer_less__WEBPACK_IMPORTED_MODULE_26__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




























const {
  TabPane
} = antd__WEBPACK_IMPORTED_MODULE_1__["Tabs"];
const initialFilter = {
  q: '',
  fromDate: '',
  toDate: ''
};

class PerformerProfile extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      itemPerPage: 12,
      videoPage: 0,
      productPage: 0,
      feedPage: 0,
      galleryPage: 0,
      showWelcomVideo: false,
      openTipModal: false,
      submiting: false,
      isBookMarked: false,
      requesting: false,
      openSubscriptionModal: false,
      tab: 'post',
      filter: initialFilter,
      isGrid: false,
      subscriptionType: 'monthly',
      isFollowed: false
    });

    _defineProperty(this, "handleFollow", async () => {
      const {
        performer,
        user
      } = this.props;
      const {
        isFollowed,
        requesting,
        tab
      } = this.state;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in or register!');
        return;
      }

      if (requesting || user.isPerformer) return;

      try {
        this.setState({
          requesting: true
        });

        if (!isFollowed) {
          await src_services__WEBPACK_IMPORTED_MODULE_8__["followService"].create(performer === null || performer === void 0 ? void 0 : performer._id);
          this.setState({
            isFollowed: true,
            requesting: false
          });
        } else {
          await src_services__WEBPACK_IMPORTED_MODULE_8__["followService"].delete(performer === null || performer === void 0 ? void 0 : performer._id);
          this.setState({
            isFollowed: false,
            requesting: false
          });
        }

        if (tab === 'post') {
          this.loadItems();
        }
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
        this.setState({
          requesting: false
        });
      }
    });

    _defineProperty(this, "handleJoinStream", () => {
      const {
        user,
        performer
      } = this.props;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in or register!');
        return;
      }

      if (user.isPerformer) return;

      if (!(performer !== null && performer !== void 0 && performer.isSubscribed)) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please subscribe to this model!');
        return;
      }

      next_router__WEBPACK_IMPORTED_MODULE_24___default.a.push({
        pathname: '/streaming/details',
        query: {
          performer: JSON.stringify(performer),
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      }, `/streaming/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`);
    });
  }

  static async getInitialProps({
    ctx
  }) {
    const {
      query
    } = ctx;

    try {
      const [performer, countries] = await Promise.all([src_services__WEBPACK_IMPORTED_MODULE_8__["performerService"].findOne(query.username, {
        Authorization: ctx.token || ''
      }), src_services__WEBPACK_IMPORTED_MODULE_8__["utilsService"].countriesList()]);
      return {
        performer: performer === null || performer === void 0 ? void 0 : performer.data,
        countries: (countries === null || countries === void 0 ? void 0 : countries.data) || []
      };
    } catch (e) {
      const error = await Promise.resolve(e);
      return {
        error
      };
    }
  }

  async componentDidMount() {
    const {
      performer
    } = this.props;

    if (performer) {
      const notShownWelcomeVideos = localStorage.getItem('notShownWelcomeVideos');
      const showWelcomVideo = !notShownWelcomeVideos || notShownWelcomeVideos && !notShownWelcomeVideos.includes(performer._id);
      this.setState({
        isBookMarked: performer.isBookMarked,
        showWelcomVideo,
        isFollowed: !!performer.isFollowed
      });
      this.loadItems();
    }
  } // eslint-disable-next-line react/sort-comp


  handleViewWelcomeVideo() {
    const {
      performer
    } = this.props;
    const notShownWelcomeVideos = localStorage.getItem('notShownWelcomeVideos');

    if (!(notShownWelcomeVideos !== null && notShownWelcomeVideos !== void 0 && notShownWelcomeVideos.includes(performer._id))) {
      const Ids = JSON.parse(notShownWelcomeVideos || '[]');
      const values = Array.isArray(Ids) ? Ids.concat([performer._id]) : [performer._id];
      localStorage.setItem('notShownWelcomeVideos', JSON.stringify(values));
    }

    this.setState({
      showWelcomVideo: false
    });
  }

  async handleDeleteFeed(feed) {
    const {
      user,
      removeFeedSuccess: handleRemoveFeed
    } = this.props;

    if (user._id !== feed.fromSourceId) {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Permission denied');
      return;
    }

    if (!window.confirm('All earnings are related to this post will be refunded. Are you sure to remove?')) {
      return;
    }

    try {
      await src_services__WEBPACK_IMPORTED_MODULE_8__["feedService"].delete(feed._id);
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Deleted post success');
      handleRemoveFeed({
        feed
      });
    } catch {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Something went wrong, please try again later');
    }
  }

  async handleBookmark() {
    const {
      performer,
      user
    } = this.props;
    const {
      isBookMarked,
      requesting
    } = this.state;
    if (requesting || user.isPerformer) return;

    try {
      await this.setState({
        requesting: true
      });

      if (!isBookMarked) {
        await src_services__WEBPACK_IMPORTED_MODULE_8__["reactionService"].create({
          objectId: performer === null || performer === void 0 ? void 0 : performer._id,
          action: 'book_mark',
          objectType: 'performer'
        });
        this.setState({
          isBookMarked: true,
          requesting: false
        });
      } else {
        await src_services__WEBPACK_IMPORTED_MODULE_8__["reactionService"].delete({
          objectId: performer === null || performer === void 0 ? void 0 : performer._id,
          action: 'book_mark',
          objectType: 'performer'
        });
        this.setState({
          isBookMarked: false,
          requesting: false
        });
      }
    } catch (e) {
      const error = await e;
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
      this.setState({
        requesting: false
      });
    }
  }

  async handleFilterSearch(values) {
    const {
      filter
    } = this.state;
    await this.setState({
      filter: _objectSpread(_objectSpread({}, filter), values)
    });
    this.loadItems();
  }

  async loadItems() {
    const {
      performer,
      getGalleries: handleGetGalleries,
      getVideos: handleGetVids,
      getFeeds: handleGetFeeds,
      listProducts: handleGetProducts
    } = this.props;
    const {
      itemPerPage,
      filter,
      tab
    } = this.state;
    const query = {
      limit: itemPerPage,
      offset: 0,
      performerId: performer === null || performer === void 0 ? void 0 : performer._id,
      q: filter.q || '',
      fromDate: filter.fromDate || '',
      toDate: filter.toDate || ''
    };

    switch (tab) {
      case 'post':
        this.setState({
          feedPage: 0
        }, () => handleGetFeeds(_objectSpread({}, query)));
        break;

      case 'photo':
        this.setState({
          galleryPage: 0
        }, () => handleGetGalleries(_objectSpread({}, query)));
        break;

      case 'video':
        this.setState({
          videoPage: 0
        }, () => handleGetVids(_objectSpread({}, query)));
        break;

      case 'store':
        this.setState({
          productPage: 0
        }, () => handleGetProducts(_objectSpread({}, query)));
        break;

      default:
        break;
    }
  }

  async subscribe() {
    const {
      performer,
      user,
      settings
    } = this.props;
    const {
      subscriptionType
    } = this.state;

    if (!user._id) {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in!');
      next_router__WEBPACK_IMPORTED_MODULE_24___default.a.push('/');
      return;
    }

    if (settings.paymentGateway === 'stripe' && !user.stripeCardIds.length) {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please add a payment card');
      next_router__WEBPACK_IMPORTED_MODULE_24___default.a.push('/user/cards');
      return;
    }

    try {
      this.setState({
        submiting: true
      });
      const resp = await src_services__WEBPACK_IMPORTED_MODULE_8__["paymentService"].subscribePerformer({
        type: subscriptionType,
        performerId: performer._id,
        paymentGateway: settings.paymentGateway
      });

      if (settings.paymentGateway === 'ccbill') {
        var _resp$data;

        window.location.href = resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.paymentUrl;
      } else {
        this.setState({
          openSubscriptionModal: false
        });
      }
    } catch (e) {
      const err = await e;
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(err.message || 'error occured, please try again later');
      this.setState({
        openSubscriptionModal: false,
        submiting: false
      });
    }
  }

  async sendTip(price) {
    const {
      performer,
      user,
      updateBalance: handleUpdateBalance
    } = this.props;

    if (user.balance < price) {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('You have an insufficient wallet balance. Please top up.');
      next_router__WEBPACK_IMPORTED_MODULE_24___default.a.push('/wallet');
      return;
    }

    try {
      await this.setState({
        requesting: true
      });
      await src_services__WEBPACK_IMPORTED_MODULE_8__["tokenTransctionService"].sendTip(performer === null || performer === void 0 ? void 0 : performer._id, {
        performerId: performer === null || performer === void 0 ? void 0 : performer._id,
        price
      });
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Thank you for the tip');
      handleUpdateBalance({
        token: -price
      });
    } catch (e) {
      const err = await e;
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(err.message || 'error occured, please try again later');
    } finally {
      this.setState({
        requesting: false,
        openTipModal: false
      });
    }
  }

  async loadMoreItem() {
    const {
      feedPage,
      videoPage,
      productPage,
      itemPerPage,
      galleryPage,
      tab,
      filter
    } = this.state;
    const {
      moreFeeds: getMoreFeed,
      moreVideo: getMoreVids,
      moreProduct: getMoreProd,
      moreGalleries: getMoreGallery,
      performer
    } = this.props;
    const query = {
      limit: itemPerPage,
      performerId: performer._id,
      q: filter.q || '',
      fromDate: filter.fromDate || '',
      toDate: filter.toDate || ''
    };

    if (tab === 'post') {
      this.setState({
        feedPage: feedPage + 1
      }, () => getMoreFeed(_objectSpread(_objectSpread({}, query), {}, {
        offset: (feedPage + 1) * itemPerPage
      })));
    }

    if (tab === 'video') {
      this.setState({
        videoPage: videoPage + 1
      }, () => getMoreVids(_objectSpread(_objectSpread({}, query), {}, {
        offset: (videoPage + 1) * itemPerPage
      })));
    }

    if (tab === 'photo') {
      await this.setState({
        galleryPage: galleryPage + 1
      }, () => {
        getMoreGallery(_objectSpread(_objectSpread({}, query), {}, {
          offset: (galleryPage + 1) * itemPerPage
        }));
      });
    }

    if (tab === 'store') {
      this.setState({
        productPage: productPage + 1
      }, () => getMoreProd(_objectSpread(_objectSpread({}, query), {}, {
        offset: (productPage + 1) * itemPerPage
      })));
    }
  }

  render() {
    var _performer$stats, _performer$stats2, _performer$stats3, _performer$stats4, _performer$stats5, _performer$stats6;

    const {
      error,
      performer,
      ui,
      user,
      feedState,
      videoState,
      productState,
      galleryState,
      countries,
      settings
    } = this.props;

    if (error) {
      return __jsx(next_error__WEBPACK_IMPORTED_MODULE_25___default.a, {
        statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 404,
        title: (error === null || error === void 0 ? void 0 : error.message) || 'Sorry, we can\'t find this page'
      });
    }

    const {
      items: feeds = [],
      total: totalFeed = 0,
      requesting: loadingFeed
    } = feedState;
    const {
      items: videos = [],
      total: totalVideos = 0,
      requesting: loadingVideo
    } = videoState;
    const {
      items: products = [],
      total: totalProducts = 0,
      requesting: loadingPrd
    } = productState;
    const {
      items: galleries = [],
      total: totalGalleries = 0,
      requesting: loadingGallery
    } = galleryState;
    const {
      showWelcomVideo,
      openTipModal,
      submiting,
      isBookMarked,
      openSubscriptionModal,
      tab,
      isGrid,
      subscriptionType,
      isFollowed
    } = this.state;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Layout"], null, __jsx(next_head__WEBPACK_IMPORTED_MODULE_9___default.a, null, __jsx("title", null, `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${(performer === null || performer === void 0 ? void 0 : performer.name) || (performer === null || performer === void 0 ? void 0 : performer.username)}`), __jsx("meta", {
      name: "keywords",
      content: `${performer === null || performer === void 0 ? void 0 : performer.username}, ${performer === null || performer === void 0 ? void 0 : performer.name}`
    }), __jsx("meta", {
      name: "description",
      content: performer === null || performer === void 0 ? void 0 : performer.bio
    }), __jsx("meta", {
      property: "og:type",
      content: "website"
    }), __jsx("meta", {
      property: "og:title",
      content: `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${(performer === null || performer === void 0 ? void 0 : performer.name) || (performer === null || performer === void 0 ? void 0 : performer.username)}`
    }), __jsx("meta", {
      property: "og:image",
      content: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'
    }), __jsx("meta", {
      property: "og:description",
      content: performer === null || performer === void 0 ? void 0 : performer.bio
    }), __jsx("meta", {
      name: "twitter:card",
      content: "summary"
    }), __jsx("meta", {
      name: "twitter:title",
      content: `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${(performer === null || performer === void 0 ? void 0 : performer.name) || (performer === null || performer === void 0 ? void 0 : performer.username)}`
    }), __jsx("meta", {
      name: "twitter:image",
      content: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'
    }), __jsx("meta", {
      name: "twitter:description",
      content: performer === null || performer === void 0 ? void 0 : performer.bio
    })), __jsx("div", {
      className: "main-container"
    }, __jsx("div", {
      className: "top-profile",
      style: {
        backgroundImage: `url('${(performer === null || performer === void 0 ? void 0 : performer.cover) || '/static/banner-image.jpg'}')`
      }
    }, __jsx("div", {
      className: "bg-2nd"
    }, __jsx("div", {
      className: "top-banner"
    }, __jsx("a", {
      "aria-hidden": true,
      className: "arrow-back",
      onClick: () => next_router__WEBPACK_IMPORTED_MODULE_24___default.a.back()
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["ArrowLeftOutlined"], null)), __jsx("div", {
      className: "stats-row"
    }, __jsx("div", {
      className: "tab-stat"
    }, __jsx("div", {
      className: "tab-item"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_22__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.totalFeeds) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["FireOutlined"], null))), __jsx("div", {
      className: "tab-item"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_22__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : (_performer$stats2 = performer.stats) === null || _performer$stats2 === void 0 ? void 0 : _performer$stats2.totalVideos) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["VideoCameraOutlined"], null))), __jsx("div", {
      className: "tab-item"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_22__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : (_performer$stats3 = performer.stats) === null || _performer$stats3 === void 0 ? void 0 : _performer$stats3.totalPhotos) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["PictureOutlined"], null))), __jsx("div", {
      className: "tab-item"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_22__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : (_performer$stats4 = performer.stats) === null || _performer$stats4 === void 0 ? void 0 : _performer$stats4.totalProducts) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["ShoppingOutlined"], null))), __jsx("div", {
      className: "tab-item"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_22__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : (_performer$stats5 = performer.stats) === null || _performer$stats5 === void 0 ? void 0 : _performer$stats5.likes) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["HeartOutlined"], null))), __jsx("div", {
      className: "tab-item"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_22__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : (_performer$stats6 = performer.stats) === null || _performer$stats6 === void 0 ? void 0 : _performer$stats6.subscribers) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["UsergroupAddOutlined"], null))))))))), __jsx("div", {
      className: "main-profile"
    }, __jsx("div", {
      className: "main-container"
    }, __jsx("div", {
      className: "fl-col"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Image"], {
      alt: "main-avt",
      src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png',
      fallback: "/static/no-avatar.png"
    }), (user === null || user === void 0 ? void 0 : user._id) !== (performer === null || performer === void 0 ? void 0 : performer._id) && __jsx("span", {
      className: (performer === null || performer === void 0 ? void 0 : performer.isOnline) > 0 ? 'online-status' : 'online-status off'
    }), __jsx("div", {
      className: "m-user-name"
    }, __jsx("h4", null, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', "\xA0", (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_11__["TickIcon"], null), "\xA0", (performer === null || performer === void 0 ? void 0 : performer.live) > 0 && (user === null || user === void 0 ? void 0 : user._id) !== (performer === null || performer === void 0 ? void 0 : performer._id) && __jsx("a", {
      "aria-hidden": true,
      onClick: this.handleJoinStream,
      className: "live-status"
    }, "Live"), (user === null || user === void 0 ? void 0 : user._id) === (performer === null || performer === void 0 ? void 0 : performer._id) && __jsx(next_link__WEBPACK_IMPORTED_MODULE_23___default.a, {
      href: "/model/account"
    }, __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["EditOutlined"], {
      className: "primary-color"
    })))), __jsx("h5", {
      style: {
        textTransform: 'none'
      }
    }, "@", (performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a'))), __jsx("div", {
      className: "btn-grp"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: isFollowed ? 'Following' : 'Follow'
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      disabled: !user._id || user.isPerformer,
      className: isBookMarked ? 'active' : '',
      onClick: () => this.handleFollow()
    }, isFollowed ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["HeartFilled"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["HeartOutlined"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: "Send Tip"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      disabled: !user._id || user.isPerformer,
      onClick: () => this.setState({
        openTipModal: true
      })
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["DollarOutlined"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: "Send Message"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      disabled: !user._id || user.isPerformer,
      onClick: () => next_router__WEBPACK_IMPORTED_MODULE_24___default.a.push({
        pathname: '/messages',
        query: {
          toSource: 'performer',
          toId: (performer === null || performer === void 0 ? void 0 : performer._id) || ''
        }
      })
    }, __jsx(src_icons__WEBPACK_IMPORTED_MODULE_11__["MessageIcon"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: isBookMarked ? 'Remove from Bookmarks' : 'Add to Bookmarks'
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      disabled: !user._id || user.isPerformer,
      className: isBookMarked ? 'active' : '',
      onClick: () => this.handleBookmark()
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["BookOutlined"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Popover"], {
      title: "Share to social network",
      content: __jsx(_components_performer_share_profile__WEBPACK_IMPORTED_MODULE_18__["default"], {
        siteName: ui.siteName,
        performer: performer
      })
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "normal"
    }, __jsx(src_icons__WEBPACK_IMPORTED_MODULE_11__["ShareIcon"], null)))), __jsx("div", {
      className: user.isPerformer ? 'mar-0 pro-desc' : 'pro-desc'
    }, __jsx(_components_performer_table_info__WEBPACK_IMPORTED_MODULE_16__["PerformerInfo"], {
      countries: countries,
      performer: performer
    })), !(performer !== null && performer !== void 0 && performer.isSubscribed) && !user.isPerformer && __jsx("div", {
      className: "subscription-bl"
    }, __jsx("h5", null, "Monthly Subscription"), __jsx("button", {
      type: "button",
      className: "sub-btn",
      disabled: submiting,
      onClick: () => {
        this.setState({
          openSubscriptionModal: true,
          subscriptionType: 'monthly'
        });
      }
    }, "SUBSCRIBE FOR", ' ', "$", performer && (performer === null || performer === void 0 ? void 0 : performer.monthlyPrice.toFixed(2)))), !(performer !== null && performer !== void 0 && performer.isSubscribed) && !user.isPerformer && __jsx("div", {
      className: "subscription-bl"
    }, __jsx("h5", null, "Yearly Subscription"), __jsx("button", {
      type: "button",
      className: "sub-btn",
      disabled: submiting,
      onClick: () => {
        this.setState({
          openSubscriptionModal: true,
          subscriptionType: 'yearly'
        });
      }
    }, "SUBSCRIBE FOR", ' ', "$", performer === null || performer === void 0 ? void 0 : performer.yearlyPrice.toFixed(2))), (performer === null || performer === void 0 ? void 0 : performer.isFreeSubscription) && !(performer !== null && performer !== void 0 && performer.isSubscribed) && !user.isPerformer && __jsx("div", {
      className: "subscription-bl"
    }, __jsx("h5", null, "Free Subscription"), __jsx("button", {
      type: "button",
      className: "sub-btn",
      disabled: submiting,
      onClick: () => {
        this.setState({
          openSubscriptionModal: true,
          subscriptionType: 'free'
        });
      }
    }, "SUBSCRIBE FOR FREE FOR", ' ', (performer === null || performer === void 0 ? void 0 : performer.durationFreeSubscriptionDays) || 1, ' ', (performer === null || performer === void 0 ? void 0 : performer.durationFreeSubscriptionDays) > 1 ? 'DAYS' : 'DAY', settings.paymentGateway === 'stripe' && ` THEN ${performer === null || performer === void 0 ? void 0 : performer.monthlyPrice.toFixed(2)} PER MONTH`)))), __jsx("div", {
      style: {
        marginTop: '20px'
      }
    }), __jsx("div", {
      className: "main-container"
    }, __jsx("div", {
      className: "model-content"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tabs"], {
      defaultActiveKey: "post",
      size: "large",
      onTabClick: t => {
        this.setState({
          tab: t,
          filter: initialFilter,
          isGrid: false
        }, () => this.loadItems());
      }
    }, __jsx(TabPane, {
      tab: __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["FireOutlined"], null),
      key: "post"
    }, __jsx("div", {
      className: "heading-tab"
    }, __jsx("h4", null, totalFeed > 0 && totalFeed, ' ', totalFeed > 1 ? 'POSTS' : 'POST'), __jsx(_components_post_search_bar__WEBPACK_IMPORTED_MODULE_19__["default"], {
      searching: loadingFeed,
      tab: tab,
      handleSearch: this.handleFilterSearch.bind(this),
      handleViewGrid: val => this.setState({
        isGrid: val
      })
    })), __jsx("div", {
      className: isGrid ? 'main-container' : 'main-container custom'
    }, __jsx(_components_post_scroll_list__WEBPACK_IMPORTED_MODULE_13__["default"], {
      items: feeds,
      loading: loadingFeed,
      canLoadmore: feeds && feeds.length < totalFeed,
      loadMore: this.loadMoreItem.bind(this),
      isGrid: isGrid,
      onDelete: this.handleDeleteFeed.bind(this)
    }))), __jsx(TabPane, {
      tab: __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["VideoCameraOutlined"], null),
      key: "video"
    }, __jsx("div", {
      className: "heading-tab"
    }, __jsx("h4", null, totalVideos > 0 && totalVideos, ' ', totalVideos > 1 ? 'VIDEOS' : 'VIDEO'), __jsx(_components_post_search_bar__WEBPACK_IMPORTED_MODULE_19__["default"], {
      searching: loadingVideo,
      tab: tab,
      handleSearch: this.handleFilterSearch.bind(this),
      handleViewGrid: val => this.setState({
        isGrid: val
      })
    })), __jsx("div", {
      className: "main-container"
    }, __jsx(_components_video_scroll_list_item__WEBPACK_IMPORTED_MODULE_14__["ScrollListVideo"], {
      items: videos,
      loading: loadingVideo,
      canLoadmore: videos && videos.length < totalVideos,
      loadMore: this.loadMoreItem.bind(this)
    }))), __jsx(TabPane, {
      tab: __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["PictureOutlined"], null),
      key: "photo"
    }, __jsx("div", {
      className: "heading-tab"
    }, __jsx("h4", null, totalGalleries > 0 && totalGalleries, ' ', totalGalleries > 1 ? 'GALLERIES' : 'GALLERY'), __jsx(_components_post_search_bar__WEBPACK_IMPORTED_MODULE_19__["default"], {
      searching: loadingGallery,
      tab: tab,
      handleSearch: this.handleFilterSearch.bind(this),
      handleViewGrid: val => this.setState({
        isGrid: val
      })
    })), __jsx("div", {
      className: "main-container"
    }, __jsx(_components_gallery_scroll_list_gallery__WEBPACK_IMPORTED_MODULE_15__["ScrollListGallery"], {
      items: galleries,
      loading: loadingGallery,
      canLoadmore: galleries && galleries.length < totalGalleries,
      loadMore: this.loadMoreItem.bind(this)
    }))), __jsx(TabPane, {
      tab: __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_10__["ShoppingOutlined"], null),
      key: "store"
    }, __jsx("div", {
      className: "heading-tab"
    }, __jsx("h4", null, totalProducts > 0 && totalProducts, ' ', totalProducts > 1 ? 'PRODUCTS' : 'PRODUCT'), __jsx(_components_post_search_bar__WEBPACK_IMPORTED_MODULE_19__["default"], {
      searching: loadingPrd,
      tab: tab,
      handleSearch: this.handleFilterSearch.bind(this)
    })), __jsx(_components_product_scroll_list_item__WEBPACK_IMPORTED_MODULE_12__["ScrollListProduct"], {
      items: products,
      loading: loadingPrd,
      canLoadmore: products && products.length < totalProducts,
      loadMore: this.loadMoreItem.bind(this)
    }))))), performer && (performer === null || performer === void 0 ? void 0 : performer.welcomeVideoPath) && (performer === null || performer === void 0 ? void 0 : performer.activateWelcomeVideo) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "welcome-video",
      className: "welcome-video",
      destroyOnClose: true,
      closable: false,
      maskClosable: false,
      width: 767,
      visible: showWelcomVideo,
      title: null,
      centered: true,
      onCancel: () => this.setState({
        showWelcomVideo: false
      }),
      footer: [__jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
        key: "close",
        className: "secondary",
        onClick: () => this.setState({
          showWelcomVideo: false
        })
      }, "Close"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
        key: "not-show",
        className: "primary",
        onClick: this.handleViewWelcomeVideo.bind(this)
      }, "Don't show this again")]
    }, __jsx(_components_common__WEBPACK_IMPORTED_MODULE_21__["VideoPlayer"], {
      key: `${performer._id}`,
      controls: true,
      playsinline: true,
      sources: [{
        src: performer === null || performer === void 0 ? void 0 : performer.welcomeVideoPath,
        type: 'video/mp4'
      }]
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "tip_performer",
      className: "subscription-modal",
      visible: openTipModal,
      centered: true,
      onOk: () => this.setState({
        openTipModal: false
      }),
      footer: null,
      width: 600,
      title: null,
      onCancel: () => this.setState({
        openTipModal: false
      })
    }, __jsx(_components_performer__WEBPACK_IMPORTED_MODULE_17__["TipPerformerForm"], {
      performer: performer,
      submiting: submiting,
      onFinish: this.sendTip.bind(this)
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "subscribe_performer",
      className: "subscription-modal",
      width: 600,
      centered: true,
      title: null,
      visible: openSubscriptionModal,
      footer: null,
      onCancel: () => this.setState({
        openSubscriptionModal: false
      }),
      destroyOnClose: true
    }, __jsx(_components_performer__WEBPACK_IMPORTED_MODULE_17__["ConfirmSubscriptionPerformerForm"], {
      type: subscriptionType || 'monthly',
      performer: performer,
      submiting: submiting,
      onFinish: this.subscribe.bind(this)
    })), submiting && __jsx(_components_common_base_loader__WEBPACK_IMPORTED_MODULE_20__["default"], {
      customText: "We are processing your payment, please do not reload this page until it's done."
    }));
  }

}

_defineProperty(PerformerProfile, "authenticate", true);

_defineProperty(PerformerProfile, "noredirect", true);

const mapStates = state => ({
  ui: _objectSpread({}, state.ui),
  videoState: _objectSpread({}, state.video.videos),
  feedState: _objectSpread({}, state.feed.feeds),
  productState: _objectSpread({}, state.product.products),
  galleryState: _objectSpread({}, state.gallery.galleries),
  user: _objectSpread({}, state.user.current),
  settings: _objectSpread({}, state.settings)
});

const mapDispatch = {
  getFeeds: _redux_feed_actions__WEBPACK_IMPORTED_MODULE_4__["getFeeds"],
  moreFeeds: _redux_feed_actions__WEBPACK_IMPORTED_MODULE_4__["moreFeeds"],
  getVideos: _redux_video_actions__WEBPACK_IMPORTED_MODULE_3__["getVideos"],
  moreVideo: _redux_video_actions__WEBPACK_IMPORTED_MODULE_3__["moreVideo"],
  listProducts: _redux_product_actions__WEBPACK_IMPORTED_MODULE_5__["listProducts"],
  moreProduct: _redux_product_actions__WEBPACK_IMPORTED_MODULE_5__["moreProduct"],
  getGalleries: _redux_gallery_actions__WEBPACK_IMPORTED_MODULE_6__["getGalleries"],
  moreGalleries: _redux_gallery_actions__WEBPACK_IMPORTED_MODULE_6__["moreGalleries"],
  removeFeedSuccess: _redux_feed_actions__WEBPACK_IMPORTED_MODULE_4__["removeFeedSuccess"],
  updateBalance: _redux_user_actions__WEBPACK_IMPORTED_MODULE_7__["updateBalance"]
};
/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_2__["connect"])(mapStates, mapDispatch)(PerformerProfile));

/***/ }),

/***/ "./src/components/comment/comment-form.tsx":
/*!*************************************************!*\
  !*** ./src/components/comment/comment-form.tsx ***!
  \*************************************************/
/*! exports provided: CommentForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommentForm", function() { return CommentForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_messages_emotions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/messages/emotions */ "./src/components/messages/emotions.tsx");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _comment_less__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./comment.less */ "./src/components/comment/comment.less");
/* harmony import */ var _comment_less__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_comment_less__WEBPACK_IMPORTED_MODULE_5__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







const {
  TextArea
} = antd__WEBPACK_IMPORTED_MODULE_1__["Input"];
class CommentForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "formRef", void 0);

    _defineProperty(this, "state", {
      text: ''
    });
  }

  componentDidMount() {
    if (!this.formRef) this.formRef = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_0__["createRef"])();
  }

  onFinish(values) {
    const {
      onSubmit: handleComment,
      objectId,
      objectType,
      creator
    } = this.props;
    const data = values;

    if (!creator || !creator._id) {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please login!');
      return next_router__WEBPACK_IMPORTED_MODULE_4___default.a.push('/');
    }

    if (!data.content) {
      return antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please add a comment!');
    }

    if (data.content.length > 150) {
      return antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Comment is over 150 characters');
    }

    data.objectId = objectId;
    data.objectType = objectType || 'video';
    this.formRef.resetFields();
    return handleComment(data);
  }

  async onEmojiClick(emoji) {
    const {
      creator
    } = this.props;
    if (!creator || !creator._id) return;
    const {
      text
    } = this.state;
    const instance = this.formRef;
    instance.setFieldsValue({
      content: `${instance.getFieldValue('content')} ${emoji} `
    });
    this.setState({
      text: `${text} ${emoji} `
    });
  }

  render() {
    const {
      creator,
      requesting,
      isReply,
      siteName,
      objectId
    } = this.props;
    if (!this.formRef) this.formRef = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_0__["createRef"])();
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], {
      ref: ref => {
        this.formRef = ref;
      },
      name: "comment-form",
      onFinish: this.onFinish.bind(this),
      initialValues: {
        content: ''
      }
    }, __jsx("div", {
      className: "comment-form"
    }, __jsx("div", {
      className: "cmt-area"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "content"
    }, __jsx(TextArea, {
      disabled: !creator || !creator._id,
      maxLength: 150,
      showCount: true,
      minLength: 1,
      rows: !isReply ? 2 : 1,
      placeholder: !isReply ? 'Add a comment here' : 'Add a reply here'
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Popover"], {
      key: objectId,
      className: "emotion-popover",
      content: __jsx(_components_messages_emotions__WEBPACK_IMPORTED_MODULE_3__["Emotions"], {
        onEmojiClick: this.onEmojiClick.bind(this),
        siteName: siteName
      }),
      title: null,
      trigger: "click"
    }, __jsx("div", {
      className: "grp-emotions"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["SmileOutlined"], null)))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: !isReply ? 'submit-btn' : '',
      htmlType: "submit",
      disabled: requesting
    }, !isReply ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["SendOutlined"], null) : 'Reply')));
  }

}

/***/ }),

/***/ "./src/components/comment/comment-item.tsx":
/*!*************************************************!*\
  !*** ./src/components/comment/comment-item.tsx ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/index */ "./src/services/index.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "moment");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _components_comment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @components/comment */ "./src/components/comment/index.ts");
/* harmony import */ var _redux_comment_actions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @redux/comment/actions */ "./src/redux/comment/actions.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-prototype-builtins */









class CommentItem extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isLiked: false,
      isOpenComment: false,
      isFirstLoadComment: true,
      itemPerPage: 10,
      commentPage: 0,
      isReply: false,
      totalReply: 0,
      totalLike: 0
    });
  }

  componentDidMount() {
    const {
      item
    } = this.props;

    if (item) {
      this.setState({
        isLiked: !!item.isLiked,
        totalLike: item.totalLike || 0,
        totalReply: item.totalReply ? item.totalReply : 0
      });
    }
  }

  async handleComment(values) {
    const {
      createComment: handleCreate
    } = this.props;
    const {
      totalReply
    } = this.state;
    handleCreate(values);
    await this.setState({
      isReply: false,
      isOpenComment: false,
      totalReply: totalReply + 1
    });
    this.onOpenComment();
  }

  async onOpenComment() {
    const {
      item,
      getComments: handleGetComment
    } = this.props;
    const {
      isOpenComment,
      isFirstLoadComment,
      itemPerPage,
      commentPage
    } = this.state;
    this.setState({
      isOpenComment: !isOpenComment
    });

    if (isFirstLoadComment) {
      await this.setState({
        isFirstLoadComment: false
      });
      handleGetComment({
        objectId: item._id,
        objectType: 'comment',
        limit: itemPerPage,
        offset: commentPage
      });
    }
  }

  async onLikeComment(comment) {
    const {
      isLiked,
      totalLike
    } = this.state;

    try {
      if (!isLiked) {
        await _services_index__WEBPACK_IMPORTED_MODULE_3__["reactionService"].create({
          objectId: comment._id,
          action: 'like',
          objectType: 'comment'
        });
        this.setState({
          isLiked: true,
          totalLike: totalLike + 1
        });
      } else {
        await _services_index__WEBPACK_IMPORTED_MODULE_3__["reactionService"].delete({
          objectId: comment._id,
          action: 'like',
          objectType: 'comment'
        });
        this.setState({
          isLiked: false,
          totalLike: totalLike - 1
        });
      }
    } catch (e) {
      const error = await e;
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
    }
  }

  async moreComment() {
    const {
      item,
      moreComment: handleLoadMore
    } = this.props;
    const {
      commentPage,
      itemPerPage
    } = this.state;
    await this.setState({
      commentPage: commentPage + 1
    });
    handleLoadMore({
      limit: itemPerPage,
      objectType: 'comment',
      offset: (commentPage + 1) * itemPerPage,
      objectId: item._id
    });
  }

  async deleteComment(item) {
    const {
      deleteComment: handleDelete
    } = this.props;
    if (!window.confirm('Are you sure to remove this comment?')) return;
    handleDelete(item._id);
  }

  render() {
    var _item$creator, _item$creator2, _item$creator3;

    const {
      item,
      user,
      canReply,
      onDelete,
      commentMapping,
      comment,
      siteName
    } = this.props;
    const {
      requesting: commenting
    } = comment;
    const fetchingComment = commentMapping.hasOwnProperty(item._id) ? commentMapping[item._id].requesting : false;
    const comments = commentMapping.hasOwnProperty(item._id) ? commentMapping[item._id].items : [];
    const totalComments = commentMapping.hasOwnProperty(item._id) ? commentMapping[item._id].total : 0;
    const {
      isLiked,
      isOpenComment,
      isReply,
      totalReply,
      totalLike
    } = this.state;
    return __jsx("div", null, __jsx("div", {
      className: "cmt-item",
      key: item._id
    }, __jsx("img", {
      alt: "creator-avt",
      src: (item === null || item === void 0 ? void 0 : (_item$creator = item.creator) === null || _item$creator === void 0 ? void 0 : _item$creator.avatar) || '/static/no-avatar.png'
    }), __jsx("div", {
      className: "cmt-content"
    }, __jsx("div", {
      className: "cmt-user"
    }, __jsx("span", null, __jsx("span", null, (item === null || item === void 0 ? void 0 : (_item$creator2 = item.creator) === null || _item$creator2 === void 0 ? void 0 : _item$creator2.name) || (item === null || item === void 0 ? void 0 : (_item$creator3 = item.creator) === null || _item$creator3 === void 0 ? void 0 : _item$creator3.username) || 'N/A'), __jsx("span", {
      className: "cmt-time"
    }, moment__WEBPACK_IMPORTED_MODULE_4___default()(item.createdAt).fromNow())), user._id === item.createdBy && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Dropdown"], {
      overlay: __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"], {
        key: `menu_cmt_${item._id}`
      }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"].Item, {
        key: `delete_cmt_${item._id}`,
        onClick: () => onDelete(item)
      }, __jsx("a", null, "Delete")))
    }, __jsx("a", {
      "aria-hidden": true,
      className: "ant-dropdown-link",
      onClick: e => e.preventDefault()
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["MoreOutlined"], null)))), __jsx("p", {
      className: "cmt-text"
    }, item.content), __jsx("div", {
      className: "cmt-action"
    }, __jsx("a", {
      "aria-hidden": true,
      className: isLiked ? 'cmt-like active' : 'cmt-like',
      onClick: this.onLikeComment.bind(this, item)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["HeartOutlined"], null), ' ', totalLike > 0 && totalLike), canReply && __jsx("a", {
      "aria-hidden": true,
      className: !isReply ? 'cmt-reply' : 'cmt-reply active',
      onClick: () => this.setState({
        isReply: !isReply
      })
    }, "Reply")), __jsx("div", {
      className: isReply ? 'reply-bl-form active' : 'reply-bl-form'
    }, __jsx("div", {
      className: "feed-comment"
    }, __jsx(_components_comment__WEBPACK_IMPORTED_MODULE_6__["CommentForm"], {
      creator: user,
      onSubmit: this.handleComment.bind(this),
      objectId: item._id,
      objectType: "comment",
      requesting: commenting,
      isReply: true,
      siteName: siteName
    }))), canReply && totalReply > 0 && __jsx("div", {
      className: "view-cmt"
    }, __jsx("a", {
      "aria-hidden": true,
      onClick: this.onOpenComment.bind(this)
    }, ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CaretUpOutlined"], {
      rotate: !isOpenComment ? 180 : 0
    }), ' ', !isOpenComment ? 'View' : 'Hide', ' ', "reply")))), isOpenComment && __jsx("div", {
      className: "reply-bl-list"
    }, __jsx("div", null, __jsx(_components_comment__WEBPACK_IMPORTED_MODULE_6__["ListComments"], {
      key: `list_comments_${item._id}_${comments.length}`,
      requesting: fetchingComment,
      comments: comments,
      total: totalComments,
      onDelete: this.deleteComment.bind(this),
      user: user,
      canReply: false
    }), comments.length < totalComments && __jsx("p", {
      className: "text-center"
    }, __jsx("a", {
      "aria-hidden": true,
      onClick: this.moreComment.bind(this)
    }, "more...")))));
  }

}

const mapStates = state => {
  const {
    commentMapping,
    comment
  } = state.comment;
  return {
    commentMapping,
    comment,
    siteName: state.ui.siteName
  };
};

const mapDispatch = {
  getComments: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_7__["getComments"],
  moreComment: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_7__["moreComment"],
  createComment: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_7__["createComment"],
  deleteComment: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_7__["deleteComment"]
};
/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_5__["connect"])(mapStates, mapDispatch)(CommentItem));

/***/ }),

/***/ "./src/components/comment/comment.less":
/*!*********************************************!*\
  !*** ./src/components/comment/comment.less ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/components/comment/index.ts":
/*!*****************************************!*\
  !*** ./src/components/comment/index.ts ***!
  \*****************************************/
/*! exports provided: CommentForm, ListComments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _comment_form__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./comment-form */ "./src/components/comment/comment-form.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CommentForm", function() { return _comment_form__WEBPACK_IMPORTED_MODULE_0__["CommentForm"]; });

/* harmony import */ var _list_comments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./list-comments */ "./src/components/comment/list-comments.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListComments", function() { return _list_comments__WEBPACK_IMPORTED_MODULE_1__["ListComments"]; });

/* harmony import */ var _comment_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./comment-item */ "./src/components/comment/comment-item.tsx");
/* empty/unused harmony star reexport */
 // export * from './list-reply-comments';



/***/ }),

/***/ "./src/components/comment/list-comments.tsx":
/*!**************************************************!*\
  !*** ./src/components/comment/list-comments.tsx ***!
  \**************************************************/
/*! exports provided: ListComments */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListComments", function() { return ListComments; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_comment_comment_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/comment/comment-item */ "./src/components/comment/comment-item.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class ListComments extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      comments,
      requesting,
      user,
      onDelete,
      canReply
    } = this.props;
    return __jsx("div", {
      className: "cmt-list"
    }, comments.map(comment => __jsx(_components_comment_comment_item__WEBPACK_IMPORTED_MODULE_2__["default"], {
      canReply: canReply,
      key: comment._id,
      item: comment,
      user: user,
      onDelete: onDelete
    })), requesting && __jsx("div", {
      className: "text-center",
      style: {
        margin: 20
      }
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], null)), !requesting && !comments.length && __jsx("div", {
      className: "text-center",
      style: {
        padding: '15px 5px'
      }
    }, "Be the first to comment"));
  }

}

/***/ }),

/***/ "./src/components/common/audio-player.tsx":
/*!************************************************!*\
  !*** ./src/components/common/audio-player.tsx ***!
  \************************************************/
/*! exports provided: AudioPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioPlayer", function() { return AudioPlayer; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


class AudioPlayer extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "playerRef", void 0);
  }

  componentWillUnmount() {
    if (this.playerRef) {
      this.playerRef.dispose();
    }
  }

  render() {
    const {
      source: sourceUrl
    } = this.props;
    return __jsx("div", {
      className: "audio-player"
    }, __jsx("audio", {
      controls: true,
      ref: this.playerRef
    }, __jsx("source", {
      src: sourceUrl,
      type: "audio/mpeg"
    }), "Your browser does not support the audio element."));
  }

}

/***/ }),

/***/ "./src/components/common/banner.tsx":
/*!******************************************!*\
  !*** ./src/components/common/banner.tsx ***!
  \******************************************/
/*! exports provided: Banner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Banner", function() { return Banner; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


class Banner extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      banners
    } = this.props;
    return __jsx("div", null, banners && banners.length > 0 && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Carousel"], {
      effect: "fade",
      adaptiveHeight: true,
      autoplay: true,
      swipeToSlide: true,
      arrows: true,
      dots: false
    }, banners.map(item => {
      var _item$photo;

      return (// eslint-disable-next-line jsx-a11y/control-has-associated-label
        __jsx("a", {
          key: item._id,
          href: item.link || null,
          target: "_.blank"
        }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Image"], {
          preview: false,
          src: item === null || item === void 0 ? void 0 : (_item$photo = item.photo) === null || _item$photo === void 0 ? void 0 : _item$photo.url,
          alt: "banner",
          key: item._id
        }))
      );
    })));
  }

}

/***/ }),

/***/ "./src/components/common/base/loader.less":
/*!************************************************!*\
  !*** ./src/components/common/base/loader.less ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/components/common/base/loader.tsx":
/*!***********************************************!*\
  !*** ./src/components/common/base/loader.tsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _loader_less__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loader.less */ "./src/components/common/base/loader.less");
/* harmony import */ var _loader_less__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_loader_less__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-nested-ternary */





class Loader extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      ui,
      customText
    } = this.props;
    return __jsx("div", {
      className: "loading-screen"
    }, __jsx("div", {
      style: {
        textAlign: 'center'
      }
    }, ui.logo ? __jsx("img", {
      alt: "loading-ico",
      src: ui.logo
    }) : ui.siteName ? __jsx("span", null, ui.siteName) : __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], {
      size: "large"
    }), customText && __jsx("p", null, customText)));
  }

}

const mapStatesToProps = state => ({
  ui: _objectSpread({}, state.ui)
});

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_2__["connect"])(mapStatesToProps)(Loader));

/***/ }),

/***/ "./src/components/common/breadcrumb.tsx":
/*!**********************************************!*\
  !*** ./src/components/common/breadcrumb.tsx ***!
  \**********************************************/
/*! exports provided: BreadcrumbComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbComponent", function() { return BreadcrumbComponent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




class BreadcrumbComponent extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      breadcrumbs
    } = this.props;
    return __jsx("div", {
      style: {
        margin: '15px 0'
      }
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Breadcrumb"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Breadcrumb"].Item, {
      href: "/home"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["HomeOutlined"], null)), breadcrumbs && breadcrumbs.length > 0 && breadcrumbs.map(b => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Breadcrumb"].Item, {
      key: b.title
    }, b.href ? __jsx(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
      href: b.href
    }, __jsx("a", null, b.title)) : b.title))));
  }

}

/***/ }),

/***/ "./src/components/common/dropdown-action.tsx":
/*!***************************************************!*\
  !*** ./src/components/common/dropdown-action.tsx ***!
  \***************************************************/
/*! exports provided: DropdownAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownAction", function() { return DropdownAction; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




class DropdownAction extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      menuOptions = [],
      buttonStyle,
      dropdownProps,
      nameButtonMain
    } = this.props;
    const menu = menuOptions.map(item => __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Menu"].Item, {
      key: item.key,
      onClick: () => item.onClick && item.onClick()
    }, item.children || item.name));
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Dropdown"], _extends({
      overlay: __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Menu"], null, menu)
    }, dropdownProps), __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      style: _objectSpread({}, buttonStyle)
    }, nameButtonMain || 'Action', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["DownOutlined"], null)));
  }

}

/***/ }),

/***/ "./src/components/common/index.tsx":
/*!*****************************************!*\
  !*** ./src/components/common/index.tsx ***!
  \*****************************************/
/*! exports provided: SearchFilter, BreadcrumbComponent, DropdownAction, Banner, GoogleReCaptcha, VideoPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _search_filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./search-filter */ "./src/components/common/search-filter.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SearchFilter", function() { return _search_filter__WEBPACK_IMPORTED_MODULE_0__["SearchFilter"]; });

/* harmony import */ var _breadcrumb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./breadcrumb */ "./src/components/common/breadcrumb.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbComponent", function() { return _breadcrumb__WEBPACK_IMPORTED_MODULE_1__["BreadcrumbComponent"]; });

/* harmony import */ var _dropdown_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dropdown-action */ "./src/components/common/dropdown-action.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DropdownAction", function() { return _dropdown_action__WEBPACK_IMPORTED_MODULE_2__["DropdownAction"]; });

/* harmony import */ var _banner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./banner */ "./src/components/common/banner.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Banner", function() { return _banner__WEBPACK_IMPORTED_MODULE_3__["Banner"]; });

/* harmony import */ var _recaptcha__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./recaptcha */ "./src/components/common/recaptcha.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GoogleReCaptcha", function() { return _recaptcha__WEBPACK_IMPORTED_MODULE_4__["GoogleReCaptcha"]; });

/* harmony import */ var _video_player__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./video-player */ "./src/components/common/video-player.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VideoPlayer", function() { return _video_player__WEBPACK_IMPORTED_MODULE_5__["VideoPlayer"]; });








/***/ }),

/***/ "./src/components/common/recaptcha.tsx":
/*!*********************************************!*\
  !*** ./src/components/common/recaptcha.tsx ***!
  \*********************************************/
/*! exports provided: GoogleReCaptcha */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GoogleReCaptcha", function() { return GoogleReCaptcha; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_google_recaptcha__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-google-recaptcha */ "react-google-recaptcha");
/* harmony import */ var react_google_recaptcha__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_google_recaptcha__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @services/index */ "./src/services/index.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




class GoogleReCaptcha extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "recaptchaRef", void 0);
  }

  componentDidMount() {
    if (!this.recaptchaRef) {
      this.recaptchaRef = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_0__["createRef"])();
    }
  }

  async handleVerifyCapcha(token) {
    const {
      handleVerify
    } = this.props;

    if (token) {
      const resp = await _services_index__WEBPACK_IMPORTED_MODULE_2__["utilsService"].verifyRecaptcha(token);
      handleVerify(resp);
    } else {
      handleVerify({
        success: false
      });
    }
  }

  render() {
    const {
      settings
    } = this.props;

    if (!this.recaptchaRef) {
      this.recaptchaRef = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_0__["createRef"])();
    }

    return __jsx("div", {
      className: "recaptcha-box"
    }, (settings === null || settings === void 0 ? void 0 : settings.enableGoogleReCaptcha) && __jsx(react_google_recaptcha__WEBPACK_IMPORTED_MODULE_1___default.a, {
      ref: this.recaptchaRef,
      sitekey: settings === null || settings === void 0 ? void 0 : settings.googleReCaptchaSiteKey,
      onChange: this.handleVerifyCapcha.bind(this)
    }));
  }

}

/***/ }),

/***/ "./src/components/common/search-filter.tsx":
/*!*************************************************!*\
  !*** ./src/components/common/search-filter.tsx ***!
  \*************************************************/
/*! exports provided: SearchFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchFilter", function() { return SearchFilter; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_performer_common_select_performer_dropdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/performer/common/select-performer-dropdown */ "./src/components/performer/common/select-performer-dropdown.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



const {
  RangePicker
} = antd__WEBPACK_IMPORTED_MODULE_1__["DatePicker"];
class SearchFilter extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      statuses = [],
      type = [],
      searchWithPerformer,
      searchWithKeyword,
      dateRange,
      isFree,
      onSubmit,
      subscriptionTypes
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], {
      className: "search-filter"
    }, searchWithKeyword && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Enter keyword",
      onChange: evt => this.setState({
        q: evt.target.value
      }),
      onPressEnter: () => onSubmit(this.state)
    })), statuses && statuses.length ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      onChange: val => this.setState({
        status: val
      }, () => onSubmit(this.state)),
      style: {
        width: '100%'
      },
      placeholder: "Select status",
      defaultValue: ""
    }, statuses.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.key,
      value: s.key
    }, s.text || s.key)))) : null, type && type.length ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      onChange: val => this.setState({
        type: val
      }, () => onSubmit(this.state)),
      style: {
        width: '100%'
      },
      placeholder: "Select type",
      defaultValue: ""
    }, type.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.key,
      value: s.key
    }, s.text || s.key)))) : null, subscriptionTypes && subscriptionTypes.length ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      onChange: val => this.setState({
        subscriptionType: val
      }, () => onSubmit(this.state)),
      style: {
        width: '100%'
      },
      placeholder: "Select type",
      defaultValue: ""
    }, subscriptionTypes.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.key,
      value: s.key
    }, s.text || s.key)))) : null, searchWithPerformer && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(_components_performer_common_select_performer_dropdown__WEBPACK_IMPORTED_MODULE_2__["SelectPerformerDropdown"], {
      placeholder: "Search model here",
      style: {
        width: '100%'
      },
      onSelect: val => this.setState({
        performerId: val || ''
      }, () => onSubmit(this.state))
    })), dateRange && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(RangePicker, {
      style: {
        width: '100%'
      },
      onChange: (dates, dateStrings) => this.setState({
        fromDate: dateStrings[0],
        toDate: dateStrings[1]
      }, () => onSubmit(this.state))
    })), isFree && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 8,
      md: 8,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      onChange: val => this.setState({
        isFree: val
      }, () => onSubmit(this.state)),
      style: {
        width: '100%'
      },
      placeholder: "Select type",
      defaultValue: ""
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: "",
      value: ""
    }, "All Type"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: "free",
      value: "true"
    }, "Free"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: "paid",
      value: "false"
    }, "Paid"))));
  }

}

/***/ }),

/***/ "./src/components/common/video-player.tsx":
/*!************************************************!*\
  !*** ./src/components/common/video-player.tsx ***!
  \************************************************/
/*! exports provided: VideoPlayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoPlayer", function() { return VideoPlayer; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! video.js */ "video.js");
/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_device_detect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-device-detect */ "react-device-detect");
/* harmony import */ var react_device_detect__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_device_detect__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var node_modules_video_js_dist_video_js_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node_modules/video.js/dist/video-js.css */ "./node_modules/video.js/dist/video-js.css");
/* harmony import */ var node_modules_video_js_dist_video_js_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(node_modules_video_js_dist_video_js_css__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class VideoPlayer extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "videoNode", void 0);

    _defineProperty(this, "player", void 0);
  }

  componentDidMount() {
    this.player = video_js__WEBPACK_IMPORTED_MODULE_1___default()(this.videoNode, _objectSpread(_objectSpread({}, this.props), {}, {
      fluid: true,
      controlBar: {
        pictureInPictureToggle: false
      }
    }));
  }

  componentWillUnmount() {
    if (this.player) {
      this.player.dispose();
    }
  }

  render() {
    return __jsx("div", {
      className: "videojs-player"
    }, __jsx("div", {
      "data-vjs-player": true,
      style: !react_device_detect__WEBPACK_IMPORTED_MODULE_2__["isMobile"] ? {
        paddingTop: 'max(81vh)'
      } : null
    }, __jsx("video", {
      ref: node => {
        this.videoNode = node;
      },
      className: "video-js"
    })));
  }

}

/***/ }),

/***/ "./src/components/file/file-upload.tsx":
/*!*********************************************!*\
  !*** ./src/components/file/file-upload.tsx ***!
  \*********************************************/
/*! exports provided: FileUpload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUpload", function() { return FileUpload; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






function beforeUpload(file) {
  const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_3__["getGlobalConfig"])();
  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_FILE || 100);

  if (!isLt2M) {
    antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_FILE || 100}MB or below`);
  }

  return isLt2M;
}

class FileUpload extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      loading: false,
      fileUrl: ''
    });

    _defineProperty(this, "handleChange", info => {
      if (info.file.status === 'uploading') {
        this.setState({
          loading: true
        });
        return;
      }

      const {
        onFileReaded,
        onUploaded
      } = this.props;

      if (info.file.status === 'done') {
        onFileReaded && onFileReaded(info.file.originFileObj); // Get this url from response in real world.

        this.setState({
          loading: false,
          fileUrl: info.file.response.data ? info.file.response.data.url : 'Done!'
        });
        onUploaded && onUploaded({
          response: info.file.response
        });
      }
    });
  }

  componentDidMount() {
    const {
      fileUrl
    } = this.props;
    this.setState({
      fileUrl
    });
  }

  render() {
    const {
      loading
    } = this.state;

    const uploadButton = __jsx("div", null, loading ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LoadingOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FileAddOutlined"], null));

    const {
      fileUrl
    } = this.state;
    const {
      headers,
      uploadUrl,
      fieldName = 'file',
      accept
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      accept: accept || '*',
      name: fieldName,
      listType: "picture-card",
      className: "avatar-uploader",
      showUploadList: false,
      action: uploadUrl,
      beforeUpload: beforeUpload,
      onChange: this.handleChange,
      headers: headers
    }, fileUrl ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FileDoneOutlined"], {
      style: {
        fontSize: '28px',
        color: '#00ce00'
      }
    }) : uploadButton);
  }

}

/***/ }),

/***/ "./src/components/file/image-upload-model.tsx":
/*!****************************************************!*\
  !*** ./src/components/file/image-upload-model.tsx ***!
  \****************************************************/
/*! exports provided: ImageUploadModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageUploadModel", function() { return ImageUploadModel; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}

class ImageUploadModel extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      loading: false,
      imageUrl: ''
    });
  }

  componentDidMount() {
    const {
      imageUrl
    } = this.props;
    this.setState({
      imageUrl
    });
  }

  beforeUpload(file) {
    const {
      onFileReaded
    } = this.props;
    const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_3__["getGlobalConfig"])();
    const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20);

    if (!isLt5M) {
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 20}MB or below`);
      return false;
    }

    getBase64(file, imageUrl => {
      this.setState({
        imageUrl
      });
    });
    onFileReaded && onFileReaded(file);
    return true;
  }

  render() {
    const {
      options = {},
      accept,
      headers,
      uploadUrl
    } = this.props;
    const {
      imageUrl,
      loading
    } = this.state;

    const uploadButton = __jsx("div", null, loading ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LoadingOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CameraOutlined"], null));

    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      customRequest: () => false,
      accept: accept || 'image/*',
      name: options.fieldName || 'file',
      listType: "picture-card",
      className: "avatar-uploader",
      showUploadList: false,
      action: uploadUrl,
      beforeUpload: file => this.beforeUpload(file),
      headers: headers
    }, imageUrl ? __jsx("img", {
      src: imageUrl,
      alt: "file",
      style: {
        width: '100%'
      }
    }) : uploadButton);
  }

}

/***/ }),

/***/ "./src/components/file/image-upload.tsx":
/*!**********************************************!*\
  !*** ./src/components/file/image-upload.tsx ***!
  \**********************************************/
/*! exports provided: ImageUpload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageUpload", function() { return ImageUpload; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}

function beforeUpload(file, uploadImmediately = true) {
  const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_3__["getGlobalConfig"])();
  const isLt5M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);

  if (!isLt5M) {
    antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`Image is too large please provide an image ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB or below`);
  }

  return uploadImmediately;
}

class ImageUpload extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      loading: false,
      imageUrl: ''
    });

    _defineProperty(this, "handleChange", info => {
      const {
        onFileReaded,
        onUploaded
      } = this.props;

      if (info.file.status === 'uploading') {
        this.setState({
          loading: true
        });
        return;
      }

      if (info.file.status === 'done') {
        onFileReaded && onFileReaded(info.file.originFileObj); // Get this url from response in real world.

        getBase64(info.file.originFileObj, imageUrl => {
          this.setState({
            imageUrl,
            loading: false
          });
          onUploaded && onUploaded({
            response: info.file.response,
            base64: imageUrl
          });
        });
      }
    });
  }

  componentDidMount() {
    const {
      imageUrl
    } = this.props;
    this.setState({
      imageUrl
    });
  }

  render() {
    const {
      options = {},
      accept,
      headers,
      uploadUrl,
      uploadImmediately
    } = this.props;
    const {
      imageUrl,
      loading
    } = this.state;

    const uploadButton = __jsx("div", null, loading ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LoadingOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CameraOutlined"], null));

    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      accept: accept || 'image/*',
      name: options.fieldName || 'file',
      listType: "picture-card",
      className: "avatar-uploader",
      showUploadList: false,
      action: uploadUrl,
      beforeUpload: file => beforeUpload(file, typeof uploadImmediately === 'boolean' ? uploadImmediately : true),
      onChange: this.handleChange,
      headers: headers
    }, imageUrl ? __jsx("img", {
      src: imageUrl,
      alt: "file",
      style: {
        width: '100%'
      }
    }) : uploadButton);
  }

}

/***/ }),

/***/ "./src/components/file/index.ts":
/*!**************************************!*\
  !*** ./src/components/file/index.ts ***!
  \**************************************/
/*! exports provided: FileUpload, ImageUpload, ImageUploadModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _file_upload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./file-upload */ "./src/components/file/file-upload.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileUpload", function() { return _file_upload__WEBPACK_IMPORTED_MODULE_0__["FileUpload"]; });

/* harmony import */ var _image_upload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image-upload */ "./src/components/file/image-upload.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageUpload", function() { return _image_upload__WEBPACK_IMPORTED_MODULE_1__["ImageUpload"]; });

/* harmony import */ var _image_upload_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./image-upload-model */ "./src/components/file/image-upload-model.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImageUploadModel", function() { return _image_upload_model__WEBPACK_IMPORTED_MODULE_2__["ImageUploadModel"]; });

/* harmony import */ var _list_media__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./list-media */ "./src/components/file/list-media.tsx");
/* empty/unused harmony star reexport *//* harmony import */ var _upload_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./upload-list */ "./src/components/file/upload-list.tsx");
/* empty/unused harmony star reexport *//* harmony import */ var _video_upload_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./video-upload-list */ "./src/components/file/video-upload-list.tsx");
/* empty/unused harmony star reexport */






/***/ }),

/***/ "./src/components/file/list-media.tsx":
/*!********************************************!*\
  !*** ./src/components/file/list-media.tsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return UploadList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/common */ "./src/components/common/index.tsx");
/* harmony import */ var _post_index_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../post/index.less */ "./src/components/post/index.less");
/* harmony import */ var _post_index_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_post_index_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class UploadList extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isShowPreview: false,
      previewUrl: ''
    });
  }

  beforeUpload(file, fileList) {
    const {
      onAddMore: handleAddMore
    } = this.props;
    handleAddMore(file, fileList);
  }

  render() {
    const {
      files,
      remove: handleRemove,
      uploading,
      type
    } = this.props;
    const {
      isShowPreview,
      previewUrl
    } = this.state;
    return __jsx("div", {
      className: "f-upload-list"
    }, files && files.map(file => __jsx("div", {
      className: "f-upload-item",
      key: file._id || file.uid
    }, __jsx("div", {
      className: "f-upload-thumb"
    }, file.type.includes('feed-photo') || file.type.includes('image') ? __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Image"], {
      placeholder: true,
      alt: "img",
      src: file.url ? file.url : file.thumbnail,
      width: "100%"
    }) : file.type.includes('video') ? __jsx("span", {
      className: "f-thumb-vid",
      "aria-hidden": true,
      onClick: () => this.setState({
        isShowPreview: true,
        previewUrl: file === null || file === void 0 ? void 0 : file.url
      })
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["PlayCircleOutlined"], null)) : __jsx("img", {
      alt: "img",
      src: "/static/no-image.jpg",
      width: "100%"
    })), __jsx("div", {
      className: "f-upload-name"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
      title: file.name
    }, file.name)), __jsx("div", {
      className: "f-upload-size"
    }, (file.size / (1024 * 1024)).toFixed(2), ' ', "MB"), file.status !== 'uploading' && __jsx("span", {
      className: "f-remove"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      type: "primary",
      onClick: handleRemove.bind(this, file)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["DeleteOutlined"], null))), file.percent && __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Progress"], {
      percent: Math.round(file.percent)
    }))), (type === 'photo' || type === 'video' && !files.length) && __jsx("div", {
      className: "add-more"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Upload"], {
      customRequest: () => true,
      accept: type === 'video' ? 'video/*' : 'image/*',
      beforeUpload: this.beforeUpload.bind(this),
      multiple: type === 'photo',
      showUploadList: false,
      disabled: uploading,
      listType: "picture"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["PlusOutlined"], null), ' ', "Add", ' ', type === 'photo' ? 'photos' : type === 'video' ? 'video' : 'files')), __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Modal"], {
      width: 767,
      footer: null,
      onOk: () => this.setState({
        isShowPreview: false
      }),
      onCancel: () => this.setState({
        isShowPreview: false
      }),
      visible: isShowPreview,
      destroyOnClose: true
    }, __jsx(_components_common__WEBPACK_IMPORTED_MODULE_3__["VideoPlayer"], {
      autoplay: true,
      controls: true,
      playsinline: true,
      fluid: true,
      sources: [{
        src: previewUrl,
        type: 'video/mp4'
      }]
    })));
  }

}

/***/ }),

/***/ "./src/components/file/upload-list.tsx":
/*!*********************************************!*\
  !*** ./src/components/file/upload-list.tsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PhotoUploadList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

/* eslint-disable no-nested-ternary */



class PhotoUploadList extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      files,
      remove,
      setCover
    } = this.props;
    return __jsx("div", {
      className: "ant-upload-list ant-upload-list-picture"
    }, files.length > 0 && files.map(file => {
      var _file$photo, _file$photo2, _file$photo3, _file$photo4;

      return __jsx("div", {
        className: "ant-upload-list-item ant-upload-list-item-uploading ant-upload-list-item-list-type-picture",
        key: file._id || file.uid,
        style: {
          height: 'auto'
        }
      }, __jsx("div", {
        className: "photo-upload-list"
      }, __jsx("div", {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, __jsx("div", {
        className: "photo-thumb"
      }, file._id && file !== null && file !== void 0 && (_file$photo = file.photo) !== null && _file$photo !== void 0 && _file$photo.thumbnails && file !== null && file !== void 0 && (_file$photo2 = file.photo) !== null && _file$photo2 !== void 0 && _file$photo2.thumbnails[0] ? __jsx("img", {
        src: file === null || file === void 0 ? void 0 : (_file$photo3 = file.photo) === null || _file$photo3 === void 0 ? void 0 : _file$photo3.thumbnails[0],
        alt: "thumb"
      }) : file.uid ? __jsx("img", {
        alt: "thumb",
        src: file.thumbUrl
      }) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["PictureOutlined"], null)), __jsx("div", null, __jsx("p", null, `${(file === null || file === void 0 ? void 0 : file.name) || (file === null || file === void 0 ? void 0 : file.title)} | ${(((file === null || file === void 0 ? void 0 : file.size) || (file === null || file === void 0 ? void 0 : (_file$photo4 = file.photo) === null || _file$photo4 === void 0 ? void 0 : _file$photo4.size)) / (1024 * 1024)).toFixed(2)} MB`, ' ', file._id && __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["FileDoneOutlined"], {
        style: {
          color: 'green'
        }
      })), __jsx("div", null, file.isGalleryCover && __jsx("a", {
        "aria-hidden": true
      }, "Cover IMG"), !file.isGalleryCover && file._id && __jsx("a", {
        "aria-hidden": true,
        onClick: setCover.bind(this, file)
      }, "Set as Cover IMG")))), file.percent !== 100 && __jsx("a", {
        "aria-hidden": true,
        className: "remove-photo",
        onClick: remove.bind(this, file)
      }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["DeleteOutlined"], null)), file.percent ? __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Progress"], {
        percent: Math.round(file.percent)
      }) : null));
    }));
  }

}

/***/ }),

/***/ "./src/components/file/video-upload-list.tsx":
/*!***************************************************!*\
  !*** ./src/components/file/video-upload-list.tsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VideoUploadList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class VideoUploadList extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      files,
      remove
    } = this.props;
    return __jsx("div", {
      className: "ant-upload-list ant-upload-list-picture",
      style: {
        marginBottom: 10
      }
    }, files && files.map(file => __jsx("div", {
      className: "ant-upload-list-item ant-upload-list-item-uploading ant-upload-list-item-list-type-picture",
      key: file.uid
    }, __jsx("div", {
      className: "ant-upload-list-item-info"
    }, __jsx("div", {
      style: {
        display: 'flex',
        justifyContent: 'space-between'
      }
    }, __jsx("span", {
      className: "ant-upload-list-item-thumbnail ant-upload-list-item-file"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["FileDoneOutlined"], {
      style: {
        color: 'green',
        fontSize: 35
      }
    })), __jsx("span", {
      className: "ant-upload-list-item-name ant-upload-list-item-name-icon-count-1"
    }, __jsx("span", null, __jsx("b", null, file.name)), ' ', "|", __jsx("span", null, (file.size / (1024 * 1024)).toFixed(2), ' ', "MB")), file.percent !== 100 && __jsx("span", {
      className: ""
    }, __jsx("a", {
      "aria-hidden": true,
      onClick: () => remove(file)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["DeleteOutlined"], null)))), file.percent && __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Progress"], {
      percent: Math.round(file.percent)
    })))));
  }

}

/***/ }),

/***/ "./src/components/gallery/gallery-card.tsx":
/*!*************************************************!*\
  !*** ./src/components/gallery/gallery-card.tsx ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _gallery_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gallery.less */ "./src/components/gallery/gallery.less");
/* harmony import */ var _gallery_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_gallery_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;






const GalleryCard = ({
  gallery
}) => {
  var _gallery$coverPhoto, _gallery$coverPhoto2, _gallery$coverPhoto3, _gallery$stats;

  const {
    0: isHovered,
    1: setHover
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const canView = !gallery.isSale && gallery.isSubscribed || gallery.isSale && gallery.isBought;
  const thumbUrl = (!canView ? (gallery === null || gallery === void 0 ? void 0 : (_gallery$coverPhoto = gallery.coverPhoto) === null || _gallery$coverPhoto === void 0 ? void 0 : _gallery$coverPhoto.thumbnails) && (gallery === null || gallery === void 0 ? void 0 : (_gallery$coverPhoto2 = gallery.coverPhoto) === null || _gallery$coverPhoto2 === void 0 ? void 0 : _gallery$coverPhoto2.thumbnails[0]) : gallery === null || gallery === void 0 ? void 0 : (_gallery$coverPhoto3 = gallery.coverPhoto) === null || _gallery$coverPhoto3 === void 0 ? void 0 : _gallery$coverPhoto3.url) || '/static/no-image.jpg';
  return __jsx(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: {
      pathname: '/gallery',
      query: {
        id: (gallery === null || gallery === void 0 ? void 0 : gallery.slug) || (gallery === null || gallery === void 0 ? void 0 : gallery._id)
      }
    },
    as: `/gallery/${(gallery === null || gallery === void 0 ? void 0 : gallery.slug) || (gallery === null || gallery === void 0 ? void 0 : gallery._id)}`
  }, __jsx("div", {
    className: "gallery-card",
    onMouseEnter: () => setHover(true),
    onMouseLeave: () => setHover(false)
  }, (gallery === null || gallery === void 0 ? void 0 : gallery.isSale) && (gallery === null || gallery === void 0 ? void 0 : gallery.price) > 0 && __jsx("span", {
    className: "gallery-price"
  }, __jsx("div", {
    className: "label-price"
  }, "$", ((gallery === null || gallery === void 0 ? void 0 : gallery.price) || 0).toFixed(2))), __jsx("div", {
    className: "gallery-thumb"
  }, __jsx("div", {
    className: "card-bg",
    style: {
      backgroundImage: `url(${thumbUrl})`,
      filter: canView ? 'blur(0px)' : 'blur(20px)'
    }
  }), __jsx("div", {
    className: "gallery-stats"
  }, __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["PictureOutlined"], null), ' ', (gallery === null || gallery === void 0 ? void 0 : gallery.numOfItems) || 0), __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["EyeOutlined"], null), ' ', (gallery === null || gallery === void 0 ? void 0 : (_gallery$stats = gallery.stats) === null || _gallery$stats === void 0 ? void 0 : _gallery$stats.views) || 0)), __jsx("div", {
    className: "lock-middle"
  }, canView || isHovered ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["UnlockOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LockOutlined"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
    title: gallery === null || gallery === void 0 ? void 0 : gallery.title
  }, __jsx("div", {
    className: "gallery-info"
  }, gallery.title))));
};

/* harmony default export */ __webpack_exports__["default"] = (GalleryCard);

/***/ }),

/***/ "./src/components/gallery/gallery.less":
/*!*********************************************!*\
  !*** ./src/components/gallery/gallery.less ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/components/gallery/scroll-list-gallery.tsx":
/*!********************************************************!*\
  !*** ./src/components/gallery/scroll-list-gallery.tsx ***!
  \********************************************************/
/*! exports provided: ScrollListGallery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollListGallery", function() { return ScrollListGallery; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-infinite-scroll-component */ "react-infinite-scroll-component");
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _gallery_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gallery-card */ "./src/components/gallery/gallery-card.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




class ScrollListGallery extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      items = [],
      loadMore,
      canLoadmore = false,
      loading = false,
      notFoundText
    } = this.props;
    return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default.a, {
      dataLength: items.length,
      hasMore: canLoadmore,
      loader: null,
      next: loadMore,
      endMessage: null,
      scrollThreshold: 0.9
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, items.length > 0 && items.map(gallery => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 12,
      sm: 12,
      md: 8,
      lg: 6,
      xl: 6,
      key: gallery._id
    }, __jsx(_gallery_card__WEBPACK_IMPORTED_MODULE_3__["default"], {
      gallery: gallery
    }))))), !loading && !items.length && __jsx("div", {
      className: "main-container custom"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Alert"], {
      className: "text-center",
      type: "info",
      message: notFoundText || 'No gallery was found'
    })), loading && __jsx("div", {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], null)));
  }

}

/***/ }),

/***/ "./src/components/messages/emotions.tsx":
/*!**********************************************!*\
  !*** ./src/components/messages/emotions.tsx ***!
  \**********************************************/
/*! exports provided: Emotions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Emotions", function() { return Emotions; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var emoji_mart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! emoji-mart */ "emoji-mart");
/* harmony import */ var emoji_mart__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(emoji_mart__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var emoji_mart_css_emoji_mart_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! emoji-mart/css/emoji-mart.css */ "./node_modules/emoji-mart/css/emoji-mart.css");
/* harmony import */ var emoji_mart_css_emoji_mart_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(emoji_mart_css_emoji_mart_css__WEBPACK_IMPORTED_MODULE_2__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


const Emotions = ({
  onEmojiClick,
  siteName
}) => __jsx(emoji_mart__WEBPACK_IMPORTED_MODULE_1__["Picker"], {
  onClick: emoji => onEmojiClick(emoji.native),
  emoji: "point_up",
  set: "twitter",
  title: siteName || '',
  color: "#00aff0"
});
Emotions.defaultProps = {
  siteName: ''
};

/***/ }),

/***/ "./src/components/performer/accountForm.tsx":
/*!**************************************************!*\
  !*** ./src/components/performer/accountForm.tsx ***!
  \**************************************************/
/*! exports provided: PerformerAccountForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerAccountForm", function() { return PerformerAccountForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_user_avatar_upload__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/user/avatar-upload */ "./src/components/user/avatar-upload.tsx");
/* harmony import */ var _components_user_cover_upload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/user/cover-upload */ "./src/components/user/cover-upload.tsx");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");
/* harmony import */ var _components_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @components/common */ "./src/components/common/index.tsx");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! moment */ "moment");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_7__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-template-curly-in-string */








const {
  Option
} = antd__WEBPACK_IMPORTED_MODULE_1__["Select"];
const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
const {
  TextArea
} = antd__WEBPACK_IMPORTED_MODULE_1__["Input"];
const validateMessages = {
  required: 'This field is required!',
  types: {
    email: 'Not a validate email!',
    number: 'Not a validate number!'
  },
  number: {
    range: 'Must be between ${min} and ${max}'
  }
};
class PerformerAccountForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isUploadingVideo: false,
      uploadVideoPercentage: 0,
      previewVideoUrl: null,
      previewVideoName: null,
      isShowPreview: false
    });

    _defineProperty(this, "handleVideoChange", info => {
      info.file && info.file.percent && this.setState({
        uploadVideoPercentage: info.file.percent
      });

      if (info.file.status === 'uploading') {
        this.setState({
          isUploadingVideo: true
        });
        return;
      }

      if (info.file.status === 'done') {
        var _info$file, _info$file$response, _info$file2, _info$file2$response;

        antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Intro video was uploaded');
        this.setState({
          isUploadingVideo: false,
          previewVideoUrl: info === null || info === void 0 ? void 0 : (_info$file = info.file) === null || _info$file === void 0 ? void 0 : (_info$file$response = _info$file.response) === null || _info$file$response === void 0 ? void 0 : _info$file$response.data.url,
          previewVideoName: info === null || info === void 0 ? void 0 : (_info$file2 = info.file) === null || _info$file2 === void 0 ? void 0 : (_info$file2$response = _info$file2.response) === null || _info$file2$response === void 0 ? void 0 : _info$file2$response.data.name
        });
      }
    });

    _defineProperty(this, "beforeUploadVideo", file => {
      const isValid = file.size / 1024 / 1024 < (Object(_services_config__WEBPACK_IMPORTED_MODULE_5__["getGlobalConfig"])().NEXT_PUBLIC_MAX_SIZE_TEASER || 200);

      if (!isValid) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`File is too large please provide an file ${Object(_services_config__WEBPACK_IMPORTED_MODULE_5__["getGlobalConfig"])().NEXT_PUBLIC_MAX_SIZE_TEASER || 200}MB or below`);
        return false;
      }

      this.setState({
        previewVideoName: file.name
      });
      return true;
    });
  }

  componentDidMount() {
    const {
      user
    } = this.props;
    this.setState({
      previewVideoUrl: user === null || user === void 0 ? void 0 : user.welcomeVideoPath,
      previewVideoName: user === null || user === void 0 ? void 0 : user.welcomeVideoName
    });
  }

  render() {
    const {
      onFinish,
      user,
      updating,
      countries,
      options,
      bodyInfo,
      onVerifyEmail,
      countTime = 60
    } = this.props;
    const {
      heights = [],
      weights = [],
      bodyTypes = [],
      genders = [],
      sexualOrientations = [],
      ethnicities = [],
      hairs = [],
      eyes = [],
      butts = []
    } = bodyInfo;
    const {
      uploadHeaders,
      avatarUploadUrl,
      onAvatarUploaded,
      coverUploadUrl,
      onCoverUploaded,
      videoUploadUrl
    } = options;
    const {
      isUploadingVideo,
      uploadVideoPercentage,
      previewVideoUrl,
      previewVideoName,
      isShowPreview
    } = this.state;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      name: "nest-messages",
      onFinish: onFinish.bind(this),
      validateMessages: validateMessages,
      initialValues: _objectSpread(_objectSpread({}, user), {}, {
        dateOfBirth: user.dateOfBirth && moment__WEBPACK_IMPORTED_MODULE_7___default()(user.dateOfBirth) || ''
      }),
      scrollToFirstError: true,
      className: "account-form"
    }), __jsx("div", {
      className: "top-profile",
      style: {
        position: 'relative',
        marginBottom: 25,
        backgroundImage: user !== null && user !== void 0 && user.cover ? `url('${user.cover}')` : "url('/static/banner-image.jpg')"
      }
    }, __jsx("div", {
      className: "avatar-upload"
    }, __jsx(_components_user_avatar_upload__WEBPACK_IMPORTED_MODULE_2__["AvatarUpload"], {
      headers: uploadHeaders,
      uploadUrl: avatarUploadUrl,
      onUploaded: onAvatarUploaded,
      image: user.avatar
    })), __jsx("div", {
      className: "cover-upload"
    }, __jsx(_components_user_cover_upload__WEBPACK_IMPORTED_MODULE_3__["CoverUpload"], {
      headers: uploadHeaders,
      uploadUrl: coverUploadUrl,
      onUploaded: onCoverUploaded,
      image: user.cover,
      options: {
        fieldName: 'cover'
      }
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "firstName",
      label: "First Name",
      validateTrigger: ['onChange', 'onBlur'],
      rules: [{
        required: true,
        message: 'Please input your first name!'
      }, {
        pattern: new RegExp(/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u),
        message: 'First name can not contain number and special character'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "lastName",
      label: "Last Name",
      validateTrigger: ['onChange', 'onBlur'],
      rules: [{
        required: true,
        message: 'Please input your last name!'
      }, {
        pattern: new RegExp(/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u),
        message: 'Last name can not contain number and special character'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "name",
      label: "Display Name",
      validateTrigger: ['onChange', 'onBlur'],
      rules: [{
        required: true,
        message: 'Please input your display name!'
      }, {
        pattern: new RegExp(/^(?=.*\S).+$/g),
        message: 'Display name can not contain only whitespace'
      }, {
        min: 3,
        message: 'Display name must containt at least 3 characters'
      }],
      hasFeedback: true
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "username",
      label: "Username",
      validateTrigger: ['onChange', 'onBlur'],
      rules: [{
        required: true,
        message: 'Please input your username!'
      }, {
        pattern: new RegExp(/^[a-z0-9]+$/g),
        message: 'Username must contain lowercase alphanumerics only'
      }, {
        min: 3,
        message: 'Username must containt at least 3 characters'
      }],
      hasFeedback: true
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "user1, john99,..."
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 24,
      md: 24,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "email",
      label: __jsx("span", {
        style: {
          fontSize: 10
        }
      }, "Email Address", '  ', user.verifiedEmail ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Popover"], {
        title: "Your email address is verified",
        content: null
      }, __jsx("a", {
        className: "success-color"
      }, "Verified!")) : __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Popover"], {
        title: "Your email address is not verified",
        content: __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
          type: "primary",
          onClick: () => onVerifyEmail(),
          disabled: updating || countTime < 60,
          loading: updating || countTime < 60
        }, "Click here to", ' ', countTime < 60 ? 'resend' : 'send', ' ', "the verification link", ' ', countTime < 60 && `${countTime}s`)
      }, __jsx("a", {
        className: "error-color"
      }, "Not verified!"))),
      rules: [{
        type: 'email'
      }, {
        required: true,
        message: 'Please input your email address!'
      }],
      hasFeedback: true,
      validateTrigger: ['onChange', 'onBlur']
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      disabled: user.googleConnected
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "gender",
      label: "Gender",
      rules: [{
        required: true,
        message: 'Please select your gender!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, genders.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "sexualOrientation",
      label: "Sexual orientation"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, sexualOrientations.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "country",
      label: "Country",
      rules: [{
        required: true
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      showSearch: true,
      optionFilterProp: "label"
    }, countries.map(c => __jsx(Option, {
      value: c.code,
      label: c.name,
      key: c.code
    }, __jsx("img", {
      alt: "country_flag",
      src: c.flag,
      width: "25px"
    }), ' ', c.name))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Date of Birth",
      name: "dateOfBirth",
      validateTrigger: ['onChange', 'onBlur'],
      hasFeedback: true,
      rules: [{
        required: true,
        message: 'Select your date of birth'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["DatePicker"], {
      style: {
        width: '100%'
      },
      placeholder: "DD/MM/YYYY",
      format: "DD/MM/YYYY",
      disabledDate: currentDate => currentDate && currentDate > moment__WEBPACK_IMPORTED_MODULE_7___default()().subtract(18, 'year').endOf('day')
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      span: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "bio",
      label: "Bio",
      rules: [{
        required: true,
        message: 'Please enter your bio!'
      }]
    }, __jsx(TextArea, {
      rows: 3,
      placeholder: "Tell people something about you..."
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "New Password",
      name: "password",
      hasFeedback: true,
      rules: [{
        pattern: new RegExp(/^(?=.{8,})(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[^\w\d]).*$/g),
        message: 'Password must have minimum 8 characters, at least 1 number, 1 uppercase letter, 1 lowercase letter & 1 special character'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"].Password, {
      placeholder: "New password"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Confirm new Password",
      name: "confirm",
      dependencies: ['password'],
      hasFeedback: true,
      rules: [({
        getFieldValue
      }) => ({
        validator(rule, value) {
          if (!value || getFieldValue('password') === value) {
            return Promise.resolve();
          } // eslint-disable-next-line prefer-promise-reject-errors


          return Promise.reject('Passwords do not match together!');
        }

      })]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"].Password, {
      placeholder: "Confirm new password"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "state",
      label: "State"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "city",
      label: "City"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 24,
      md: 24,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "address",
      label: "Address"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "zipcode",
      label: "Zip Code"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "ethnicity",
      label: "Ethnicity"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, ethnicities.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "height",
      label: "Height"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      showSearch: true
    }, heights.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "weight",
      label: "Weight"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      showSearch: true
    }, weights.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "bodyType",
      label: "Body Type"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, bodyTypes.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "eyes",
      label: "Eye color"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, eyes.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "hair",
      label: "Hair color"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, hairs.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "butt",
      label: "Butt size"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, butts.map(s => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: s.value,
      value: s.value
    }, s.text))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Intro Video"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      accept: 'video/*',
      name: "welcome-video",
      listType: "picture-card",
      className: "avatar-uploader",
      showUploadList: false,
      action: videoUploadUrl,
      headers: uploadHeaders,
      beforeUpload: file => this.beforeUploadVideo(file),
      onChange: this.handleVideoChange.bind(this)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_4__["UploadOutlined"], null)), __jsx("div", {
      className: "ant-form-item-explain",
      style: {
        textAlign: 'left'
      }
    }, (previewVideoUrl || previewVideoName) && __jsx("a", {
      "aria-hidden": true,
      onClick: () => this.setState({
        isShowPreview: true
      })
    }, previewVideoName || previewVideoUrl || 'Click here to preview') || __jsx("a", null, "Intro video is", ' ', Object(_services_config__WEBPACK_IMPORTED_MODULE_5__["getGlobalConfig"])().NEXT_PUBLIC_MAX_SIZE_TEASER || 200, "MB or below")), uploadVideoPercentage ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Progress"], {
      percent: Math.round(uploadVideoPercentage)
    }) : null), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "activateWelcomeVideo",
      valuePropName: "checked"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], null, "Activate intro video"))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      md: 12,
      xs: 24
    }, user.twitterConnected && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, null, __jsx("p", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_4__["TwitterOutlined"], {
      style: {
        color: '#1ea2f1',
        fontSize: '30px'
      }
    }), ' ', "Signup/login via Twitter")), user.googleConnected && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, null, __jsx("p", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_4__["GoogleOutlined"], {
      style: {
        color: '#d64b40',
        fontSize: '30px'
      }
    }), ' ', "Signup/login via Google")))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {
        offset: 4
      })
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      type: "primary",
      htmlType: "submit",
      loading: updating || isUploadingVideo,
      disabled: updating || isUploadingVideo
    }, "Save Changes")), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      width: 767,
      footer: null,
      onOk: () => this.setState({
        isShowPreview: false
      }),
      onCancel: () => this.setState({
        isShowPreview: false
      }),
      visible: isShowPreview,
      destroyOnClose: true,
      centered: true
    }, __jsx(_components_common__WEBPACK_IMPORTED_MODULE_6__["VideoPlayer"], {
      autoplay: true,
      controls: true,
      playsinline: true,
      fluid: true,
      sources: [{
        src: previewVideoUrl,
        type: 'video/mp4'
      }]
    })));
  }

}

/***/ }),

/***/ "./src/components/performer/banking-form.tsx":
/*!***************************************************!*\
  !*** ./src/components/performer/banking-form.tsx ***!
  \***************************************************/
/*! exports provided: PerformerBankingForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerBankingForm", function() { return PerformerBankingForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_services__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/services */ "./src/services/index.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




const {
  Option
} = antd__WEBPACK_IMPORTED_MODULE_1__["Select"];
const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
const validateMessages = {
  required: 'This field is required!',
  types: {
    email: 'Not a validate email!',
    number: 'Not a validate number!'
  },
  number: {
    // eslint-disable-next-line no-template-curly-in-string
    range: 'Must be between ${min} and ${max}'
  }
};
class PerformerBankingForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      states: [],
      cities: []
    });

    _defineProperty(this, "formRef", void 0);

    _defineProperty(this, "handleGetStates", async countryCode => {
      const {
        user
      } = this.props;
      const resp = await src_services__WEBPACK_IMPORTED_MODULE_2__["utilsService"].statesList(countryCode);
      await this.setState({
        states: resp.data
      });
      const eState = resp.data.find(s => {
        var _user$bankingInformat;

        return s === (user === null || user === void 0 ? void 0 : (_user$bankingInformat = user.bankingInformation) === null || _user$bankingInformat === void 0 ? void 0 : _user$bankingInformat.state);
      });

      if (eState) {
        this.formRef.setFieldsValue({
          state: eState
        });
      } else {
        this.formRef.setFieldsValue({
          state: '',
          city: ''
        });
      }
    });

    _defineProperty(this, "handleGetCities", async (state, countryCode) => {
      const {
        user
      } = this.props;
      const resp = await src_services__WEBPACK_IMPORTED_MODULE_2__["utilsService"].citiesList(countryCode, state);
      await this.setState({
        cities: resp.data
      });
      const eCity = resp.data.find(s => {
        var _user$bankingInformat2;

        return s === (user === null || user === void 0 ? void 0 : (_user$bankingInformat2 = user.bankingInformation) === null || _user$bankingInformat2 === void 0 ? void 0 : _user$bankingInformat2.city);
      });

      if (eCity) {
        this.formRef.setFieldsValue({
          city: eCity
        });
      } else {
        this.formRef.setFieldsValue({
          city: ''
        });
      }
    });
  }

  componentDidMount() {
    var _user$bankingInformat3;

    const {
      user
    } = this.props;

    if (user !== null && user !== void 0 && (_user$bankingInformat3 = user.bankingInformation) !== null && _user$bankingInformat3 !== void 0 && _user$bankingInformat3.country) {
      var _user$bankingInformat4, _user$bankingInformat5;

      this.handleGetStates(user === null || user === void 0 ? void 0 : (_user$bankingInformat4 = user.bankingInformation) === null || _user$bankingInformat4 === void 0 ? void 0 : _user$bankingInformat4.country);

      if (user !== null && user !== void 0 && (_user$bankingInformat5 = user.bankingInformation) !== null && _user$bankingInformat5 !== void 0 && _user$bankingInformat5.state) {
        var _user$bankingInformat6, _user$bankingInformat7;

        this.handleGetCities(user === null || user === void 0 ? void 0 : (_user$bankingInformat6 = user.bankingInformation) === null || _user$bankingInformat6 === void 0 ? void 0 : _user$bankingInformat6.state, user === null || user === void 0 ? void 0 : (_user$bankingInformat7 = user.bankingInformation) === null || _user$bankingInformat7 === void 0 ? void 0 : _user$bankingInformat7.country);
      }
    }
  }

  render() {
    if (!this.formRef) this.formRef = /*#__PURE__*/Object(react__WEBPACK_IMPORTED_MODULE_0__["createRef"])();
    const {
      onFinish,
      user,
      updating,
      countries
    } = this.props;
    const {
      states,
      cities
    } = this.state;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      name: "nest-messages",
      onFinish: onFinish.bind(this),
      validateMessages: validateMessages,
      initialValues: user === null || user === void 0 ? void 0 : user.bankingInformation,
      labelAlign: "left",
      className: "account-form",
      ref: ref => {
        this.formRef = ref;
      }
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "First name",
      name: "firstName",
      rules: [{
        required: true,
        message: 'Please input your first name!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "First name"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "lastName",
      label: "Last name",
      rules: [{
        required: true,
        message: 'Please input your last name!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Last name"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "bankName",
      label: "Bank name",
      rules: [{
        required: true,
        message: 'Please input your bank name!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Bank name"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "bankAccount",
      label: "Bank Account",
      rules: [{
        required: true,
        message: 'Please input your bank account!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Bank account"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "country",
      label: "Country",
      rules: [{
        required: true,
        message: 'Please choose country!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      showSearch: true,
      optionFilterProp: "label",
      onChange: val => this.handleGetStates(val)
    }, countries.map(c => __jsx(Option, {
      key: c.code,
      value: c.code,
      label: c.name
    }, __jsx("img", {
      alt: "flag",
      src: c === null || c === void 0 ? void 0 : c.flag,
      width: "20px"
    }), ' ', c.name))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "state",
      label: "State"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      placeholder: "Select your state",
      optionFilterProp: "label",
      showSearch: true,
      onChange: val => this.handleGetCities(val, this.formRef.getFieldValue('country'))
    }, states.map(state => __jsx(Option, {
      value: state,
      label: state,
      key: state
    }, state))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "city",
      label: "City"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      placeholder: "Select your city",
      showSearch: true,
      optionFilterProp: "label"
    }, cities.map(city => __jsx(Option, {
      value: city,
      label: city,
      key: city
    }, city))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "address",
      label: "Address"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Address"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "bankRouting",
      label: "Bank Routing"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Bank routing"
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "bankSwiftCode",
      label: "Bank swift code"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], {
      placeholder: "Bank swift code"
    })))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      htmlType: "submit",
      loading: updating,
      disabled: updating
    }, "Save Changes")));
  }

}

/***/ }),

/***/ "./src/components/performer/block-countries-form.tsx":
/*!***********************************************************!*\
  !*** ./src/components/performer/block-countries-form.tsx ***!
  \***********************************************************/
/*! exports provided: PerformerBlockCountriesForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerBlockCountriesForm", function() { return PerformerBlockCountriesForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable no-template-curly-in-string */


const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
const validateMessages = {
  required: 'This field is required!',
  types: {
    email: 'Not a validate email!',
    number: 'Not a validate number!'
  },
  number: {
    range: 'Must be between ${min} and ${max}'
  }
};
const {
  Option
} = antd__WEBPACK_IMPORTED_MODULE_1__["Select"];
class PerformerBlockCountriesForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      onFinish,
      blockCountries,
      updating,
      countries
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      name: "nest-messages",
      onFinish: onFinish.bind(this),
      validateMessages: validateMessages,
      initialValues: blockCountries,
      labelAlign: "left",
      className: "account-form"
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "countryCodes",
      label: "Select countries you want to block"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      showSearch: true,
      optionFilterProp: "label",
      mode: "multiple"
    }, countries && countries.length > 0 && countries.map(c => __jsx(Option, {
      value: c.code,
      label: c.name,
      key: c.code
    }, __jsx("img", {
      alt: "country_flag",
      src: c.flag,
      width: "25px"
    }), ' ', c.name)))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: "primary",
      htmlType: "submit",
      className: "primary",
      loading: updating
    }, "Save Changes")));
  }

}

/***/ }),

/***/ "./src/components/performer/card.tsx":
/*!*******************************************!*\
  !*** ./src/components/performer/card.tsx ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! moment */ "moment");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var src_services__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/services */ "./src/services/index.ts");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_9__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }












class PerformerCard extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isFollowed: false,
      requesting: false
    });

    _defineProperty(this, "handleJoinStream", e => {
      e.preventDefault();
      const {
        user,
        performer
      } = this.props;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in or register!');
        return;
      }

      if (user.isPerformer) return;

      if (!(performer !== null && performer !== void 0 && performer.isSubscribed)) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please subscribe to this model!');
        return;
      }

      next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push({
        pathname: '/streaming/details',
        query: {
          performer: JSON.stringify(performer),
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      }, `/streaming/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`);
    });

    _defineProperty(this, "handleFollow", async () => {
      const {
        performer,
        user,
        onFollow
      } = this.props;
      const {
        isFollowed,
        requesting
      } = this.state;
      if (requesting || user.isPerformer) return;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in or register!');
        return;
      }

      try {
        this.setState({
          requesting: true
        });

        if (!isFollowed) {
          await src_services__WEBPACK_IMPORTED_MODULE_8__["followService"].create(performer === null || performer === void 0 ? void 0 : performer._id);
          this.setState({
            isFollowed: true,
            requesting: false
          });
        } else {
          await src_services__WEBPACK_IMPORTED_MODULE_8__["followService"].delete(performer === null || performer === void 0 ? void 0 : performer._id);
          this.setState({
            isFollowed: false,
            requesting: false
          });
        }

        onFollow && onFollow();
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
        this.setState({
          requesting: false
        });
      }
    });
  }

  componentDidMount() {
    const {
      performer
    } = this.props;
    this.setState({
      isFollowed: !!(performer !== null && performer !== void 0 && performer.isFollowed)
    });
  }

  render() {
    const {
      performer,
      countries,
      user
    } = this.props;
    const {
      isFollowed
    } = this.state;
    const country = countries && countries.length && countries.find(c => c.code === performer.country);
    return __jsx("div", {
      className: "model-card",
      style: {
        backgroundImage: `url(${(performer === null || performer === void 0 ? void 0 : performer.cover) || '/static/banner-image.jpg'})`
      }
    }, __jsx("div", {
      className: "hovering"
    }, (performer === null || performer === void 0 ? void 0 : performer.isFreeSubscription) && __jsx("span", {
      className: "card-free"
    }, "Free"), (performer === null || performer === void 0 ? void 0 : performer.live) > 0 && __jsx("span", {
      className: "live-status",
      "aria-hidden": true,
      onClick: this.handleJoinStream.bind(this)
    }, "Live"), __jsx("span", {
      className: "card-age"
    }, moment__WEBPACK_IMPORTED_MODULE_5___default()().diff(moment__WEBPACK_IMPORTED_MODULE_5___default()(performer.dateOfBirth), 'years') > 0 && `${moment__WEBPACK_IMPORTED_MODULE_5___default()().diff(moment__WEBPACK_IMPORTED_MODULE_5___default()(performer.dateOfBirth), 'years')}+`), __jsx("div", {
      className: "card-img"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      alt: "avatar",
      src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'
    })), __jsx("span", {
      className: (performer === null || performer === void 0 ? void 0 : performer.isOnline) > 0 ? 'online-status active' : 'online-status'
    }), __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
      href: {
        pathname: '/model/profile',
        query: {
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      },
      as: `/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`
    }, __jsx("a", null, __jsx("div", {
      className: "model-name"
    }, __jsx("div", {
      className: "name"
    }, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', ' ', country && __jsx("img", {
      alt: "performer-country",
      className: "model-country",
      src: country === null || country === void 0 ? void 0 : country.flag
    }), ' ', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_2__["TickIcon"], null)), __jsx("p", null, `@${(performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a'}`)))), !(user !== null && user !== void 0 && user.isPerformer) && __jsx("a", {
      "aria-hidden": true,
      onClick: () => this.handleFollow(),
      className: !isFollowed ? 'follow-btn' : 'follow-btn active'
    }, isFollowed ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: "Following"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_3__["HeartFilled"], null)) : __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: "Follow"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_3__["HeartOutlined"], null)))));
  }

}

const maptStateToProps = state => ({
  user: _objectSpread({}, state.user.current)
});

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_6__["connect"])(maptStateToProps)(PerformerCard));

/***/ }),

/***/ "./src/components/performer/common/select-performer-dropdown.tsx":
/*!***********************************************************************!*\
  !*** ./src/components/performer/common/select-performer-dropdown.tsx ***!
  \***********************************************************************/
/*! exports provided: SelectPerformerDropdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectPerformerDropdown", function() { return SelectPerformerDropdown; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_performer_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/performer.service */ "./src/services/performer.service.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class SelectPerformerDropdown extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      loading: false,
      data: []
    });

    _defineProperty(this, "loadPerformers", Object(lodash__WEBPACK_IMPORTED_MODULE_2__["debounce"])(async q => {
      try {
        this.setState({
          loading: true
        });
        const resp = await (await _services_performer_service__WEBPACK_IMPORTED_MODULE_3__["performerService"].search({
          q,
          limit: 99
        })).data;
        this.setState({
          data: resp.data,
          loading: false
        });
      } catch (e) {
        const err = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error((err === null || err === void 0 ? void 0 : err.message) || 'Error occured');
        this.setState({
          loading: false
        });
      }
    }, 500));
  }

  componentDidMount() {
    this.loadPerformers('');
  }

  render() {
    const {
      style,
      onSelect,
      defaultValue,
      disabled
    } = this.props;
    const {
      data,
      loading
    } = this.state;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      showSearch: true,
      defaultValue: defaultValue,
      placeholder: "Type to search model...",
      style: style,
      onSearch: this.loadPerformers.bind(this),
      onChange: val => onSelect(val),
      loading: loading,
      optionFilterProp: "children",
      disabled: disabled
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "",
      key: "default"
    }, "All Model"), data && data.length > 0 && data.map(u => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: u._id,
      key: u._id,
      style: {
        textTransform: 'capitalize'
      }
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      size: 30,
      src: (u === null || u === void 0 ? void 0 : u.avatar) || '/static/no-avatar.png'
    }), ' ', `${(u === null || u === void 0 ? void 0 : u.name) || (u === null || u === void 0 ? void 0 : u.username)}`)));
  }

}

/***/ }),

/***/ "./src/components/performer/confirm-subscription.tsx":
/*!***********************************************************!*\
  !*** ./src/components/performer/confirm-subscription.tsx ***!
  \***********************************************************/
/*! exports provided: ConfirmSubscriptionPerformerForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmSubscriptionPerformerForm", function() { return ConfirmSubscriptionPerformerForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

/* eslint-disable no-nested-ternary */





class ConfirmSubscriptionPerformerForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      onFinish,
      submiting = false,
      performer,
      type
    } = this.props;
    return __jsx("div", {
      className: "confirm-purchase-form"
    }, __jsx("div", {
      className: "left-col"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'
    }), __jsx("div", {
      className: "p-name"
    }, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', ' ', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_3__["TickIcon"], {
      className: "primary-color"
    })), __jsx("div", {
      className: "p-username"
    }, "@", (performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a'), __jsx("img", {
      className: "lock-icon",
      src: "/static/lock-icon.png",
      alt: "lock"
    })), __jsx("div", {
      className: "right-col"
    }, __jsx("h2", null, "Subscribe", ' ', __jsx("span", {
      className: "username"
    }, `@${performer === null || performer === void 0 ? void 0 : performer.username}` || 'the model')), type === 'monthly' && __jsx("h3", null, __jsx("span", {
      className: "price"
    }, ((performer === null || performer === void 0 ? void 0 : performer.monthlyPrice) || 0).toFixed(2)), ' ', "USD/month"), type === 'yearly' && __jsx("h3", null, __jsx("span", {
      className: "price"
    }, ((performer === null || performer === void 0 ? void 0 : performer.yearlyPrice) || 0).toFixed(2)), ' ', "USD/year"), type === 'free' && __jsx("h3", null, __jsx("span", {
      className: "price"
    }, "FREE"), ' ', "for", ' ', performer === null || performer === void 0 ? void 0 : performer.durationFreeSubscriptionDays, ' ', "day", (performer === null || performer === void 0 ? void 0 : performer.durationFreeSubscriptionDays) > 1 ? 's' : ''), __jsx("ul", {
      className: "check-list"
    }, __jsx("li", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CheckSquareOutlined"], null), ' ', "Full access to this model's exclusive content"), __jsx("li", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CheckSquareOutlined"], null), ' ', "Direct message with this model"), __jsx("li", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CheckSquareOutlined"], null), ' ', "Requested personalised Pay Per View content"), __jsx("li", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CheckSquareOutlined"], null), ' ', "Cancel your subscription at any time")), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      disabled: submiting,
      loading: submiting,
      onClick: () => onFinish()
    }, "SUBSCRIBE"), __jsx("p", {
      className: "sub-text"
    }, "Clicking \"Subscribe\" will take you to the payment screen to finalize you subscription")));
  }

}

/***/ }),

/***/ "./src/components/performer/grid-card.tsx":
/*!************************************************!*\
  !*** ./src/components/performer/grid-card.tsx ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var _lib_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/index */ "./src/lib/index.ts");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var src_services__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/services */ "./src/services/index.ts");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_9__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }












class PerformerGridCard extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isFollowed: false,
      requesting: false
    });

    _defineProperty(this, "handleFollow", async () => {
      const {
        performer,
        user
      } = this.props;
      const {
        isFollowed,
        requesting
      } = this.state;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_6__["message"].error('Please log in or register!');
        return;
      }

      if (requesting || user.isPerformer) return;

      try {
        this.setState({
          requesting: true
        });

        if (!isFollowed) {
          await src_services__WEBPACK_IMPORTED_MODULE_8__["followService"].create(performer === null || performer === void 0 ? void 0 : performer._id);
          this.setState({
            isFollowed: true,
            requesting: false
          });
        } else {
          await src_services__WEBPACK_IMPORTED_MODULE_8__["followService"].delete(performer === null || performer === void 0 ? void 0 : performer._id);
          this.setState({
            isFollowed: false,
            requesting: false
          });
        }
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_6__["message"].error(error.message || 'Error occured, please try again later');
        this.setState({
          requesting: false
        });
      }
    });

    _defineProperty(this, "handleJoinStream", e => {
      e.preventDefault();
      const {
        user,
        performer
      } = this.props;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_6__["message"].error('Please log in or register!');
        return;
      }

      if (user.isPerformer) return;

      if (!(performer !== null && performer !== void 0 && performer.isSubscribed)) {
        antd__WEBPACK_IMPORTED_MODULE_6__["message"].error('Please subscribe to this model!');
        return;
      }

      next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push({
        pathname: '/streaming/details',
        query: {
          performer: JSON.stringify(performer),
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      }, `/streaming/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`);
    });
  }

  componentDidMount() {
    const {
      performer
    } = this.props;
    this.setState({
      isFollowed: !!(performer !== null && performer !== void 0 && performer.isFollowed)
    });
  }

  render() {
    const {
      performer,
      user,
      countries
    } = this.props;
    const {
      isFollowed
    } = this.state;
    const country = countries && countries.length && countries.find(c => c.code === performer.country);
    return __jsx("div", {
      className: "grid-card",
      style: {
        backgroundImage: `url(${(performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'})`
      }
    }, __jsx("span", {
      className: (performer === null || performer === void 0 ? void 0 : performer.isOnline) > 0 ? 'online-status active' : 'online-status'
    }), (performer === null || performer === void 0 ? void 0 : performer.live) > 0 && __jsx("div", {
      className: "live-status"
    }, "Live"), !(user !== null && user !== void 0 && user.isPerformer) && __jsx("a", {
      "aria-hidden": true,
      onClick: () => this.handleFollow(),
      className: !isFollowed ? 'follow-btn' : 'follow-btn active'
    }, isFollowed ? __jsx(antd__WEBPACK_IMPORTED_MODULE_6__["Tooltip"], {
      title: "Following"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["HeartFilled"], null)) : __jsx(antd__WEBPACK_IMPORTED_MODULE_6__["Tooltip"], {
      title: "Follow"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["HeartOutlined"], null))), __jsx("div", {
      className: "card-stat"
    }, __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["shortenLargeNumber"])((performer === null || performer === void 0 ? void 0 : performer.score) || 0), ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["StarOutlined"], null)), (performer === null || performer === void 0 ? void 0 : performer.dateOfBirth) && __jsx("span", null, Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["dobToAge"])(performer === null || performer === void 0 ? void 0 : performer.dateOfBirth))), __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
      href: {
        pathname: '/model/profile',
        query: {
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      },
      as: `/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`
    }, __jsx("a", null, __jsx("div", {
      className: "model-name"
    }, country && __jsx("img", {
      alt: "performer-country",
      className: "model-country",
      src: country === null || country === void 0 ? void 0 : country.flag
    }), (performer === null || performer === void 0 ? void 0 : performer.name) || (performer === null || performer === void 0 ? void 0 : performer.username) || 'N/A', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_3__["TickIcon"], null)))));
  }

}

const maptStateToProps = state => ({
  user: _objectSpread({}, state.user.current)
});

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_5__["connect"])(maptStateToProps)(PerformerGridCard));

/***/ }),

/***/ "./src/components/performer/home-listing.tsx":
/*!***************************************************!*\
  !*** ./src/components/performer/home-listing.tsx ***!
  \***************************************************/
/*! exports provided: HomePerformers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomePerformers", function() { return HomePerformers; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./card */ "./src/components/performer/card.tsx");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;





class HomePerformers extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      performers,
      countries
    } = this.props;
    const chunkPerformers = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["chunk"])(performers, 4);
    return __jsx("div", {
      className: "sug-content"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Carousel"], {
      swipeToSlide: true,
      arrows: true,
      dots: false
    }, chunkPerformers.length > 0 && chunkPerformers.map((arr, index) => // eslint-disable-next-line react/no-array-index-key
    __jsx("div", {
      key: `newaa_${index}`
    }, arr.length > 0 && arr.map(p => __jsx(_card__WEBPACK_IMPORTED_MODULE_3__["default"], {
      countries: countries,
      performer: p,
      key: p._id
    }))))));
  }

}

/***/ }),

/***/ "./src/components/performer/index.ts":
/*!*******************************************!*\
  !*** ./src/components/performer/index.ts ***!
  \*******************************************/
/*! exports provided: PerformerAccountForm, HomePerformers, PerformerInfo, PerformerSubscriptionForm, PerformerBlockCountriesForm, PerformerBankingForm, StripeConnectForm, PerformerVerificationForm, ConfirmSubscriptionPerformerForm, TipPerformerForm, PerformerPaypalForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _accountForm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accountForm */ "./src/components/performer/accountForm.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerAccountForm", function() { return _accountForm__WEBPACK_IMPORTED_MODULE_0__["PerformerAccountForm"]; });

/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./card */ "./src/components/performer/card.tsx");
/* empty/unused harmony star reexport *//* harmony import */ var _home_listing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./home-listing */ "./src/components/performer/home-listing.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HomePerformers", function() { return _home_listing__WEBPACK_IMPORTED_MODULE_2__["HomePerformers"]; });

/* harmony import */ var _table_info__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./table-info */ "./src/components/performer/table-info.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerInfo", function() { return _table_info__WEBPACK_IMPORTED_MODULE_3__["PerformerInfo"]; });

/* harmony import */ var _subscriptionForm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./subscriptionForm */ "./src/components/performer/subscriptionForm.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerSubscriptionForm", function() { return _subscriptionForm__WEBPACK_IMPORTED_MODULE_4__["PerformerSubscriptionForm"]; });

/* harmony import */ var _block_countries_form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./block-countries-form */ "./src/components/performer/block-countries-form.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerBlockCountriesForm", function() { return _block_countries_form__WEBPACK_IMPORTED_MODULE_5__["PerformerBlockCountriesForm"]; });

/* harmony import */ var _banking_form__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./banking-form */ "./src/components/performer/banking-form.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerBankingForm", function() { return _banking_form__WEBPACK_IMPORTED_MODULE_6__["PerformerBankingForm"]; });

/* harmony import */ var _stripe_connect_form__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stripe-connect-form */ "./src/components/performer/stripe-connect-form.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StripeConnectForm", function() { return _stripe_connect_form__WEBPACK_IMPORTED_MODULE_7__["StripeConnectForm"]; });

/* harmony import */ var _verificationForm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./verificationForm */ "./src/components/performer/verificationForm.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerVerificationForm", function() { return _verificationForm__WEBPACK_IMPORTED_MODULE_8__["PerformerVerificationForm"]; });

/* harmony import */ var _confirm_subscription__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./confirm-subscription */ "./src/components/performer/confirm-subscription.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfirmSubscriptionPerformerForm", function() { return _confirm_subscription__WEBPACK_IMPORTED_MODULE_9__["ConfirmSubscriptionPerformerForm"]; });

/* harmony import */ var _scroll_list__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./scroll-list */ "./src/components/performer/scroll-list.tsx");
/* empty/unused harmony star reexport *//* harmony import */ var _grid_card__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./grid-card */ "./src/components/performer/grid-card.tsx");
/* empty/unused harmony star reexport *//* harmony import */ var _tip_form__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tip-form */ "./src/components/performer/tip-form.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TipPerformerForm", function() { return _tip_form__WEBPACK_IMPORTED_MODULE_12__["TipPerformerForm"]; });

/* harmony import */ var _paypalForm__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./paypalForm */ "./src/components/performer/paypalForm.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerPaypalForm", function() { return _paypalForm__WEBPACK_IMPORTED_MODULE_13__["PerformerPaypalForm"]; });
















/***/ }),

/***/ "./src/components/performer/paypalForm.tsx":
/*!*************************************************!*\
  !*** ./src/components/performer/paypalForm.tsx ***!
  \*************************************************/
/*! exports provided: PerformerPaypalForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerPaypalForm", function() { return PerformerPaypalForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
const validateMessages = {
  required: 'This field is required!',
  types: {
    email: 'Not a validate email!',
    number: 'Not a validate number!'
  }
};
class PerformerPaypalForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    var _user$paypalSetting;

    const {
      onFinish,
      user,
      updating
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      name: "nest-messages",
      onFinish: onFinish.bind(this),
      validateMessages: validateMessages,
      initialValues: (user === null || user === void 0 ? void 0 : (_user$paypalSetting = user.paypalSetting) === null || _user$paypalSetting === void 0 ? void 0 : _user$paypalSetting.value) || {
        email: '',
        phoneNumber: ''
      },
      labelAlign: "left",
      className: "account-form"
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      lg: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "email",
      label: "Paypal account email" // help="You must upgrade to Business account to receive the payout from Admin"

    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null)), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "secondary",
      htmlType: "submit",
      disabled: updating,
      loading: updating
    }, "Submit")))));
  }

}

/***/ }),

/***/ "./src/components/performer/performer.less":
/*!*************************************************!*\
  !*** ./src/components/performer/performer.less ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/components/performer/scroll-list.tsx":
/*!**************************************************!*\
  !*** ./src/components/performer/scroll-list.tsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-infinite-scroll-component */ "react-infinite-scroll-component");
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_performer_grid_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/performer/grid-card */ "./src/components/performer/grid-card.tsx");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




const ScrollListPerformers = ({
  loadMore,
  performers,
  total,
  loading,
  notFoundText,
  countries
}) => __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_1___default.a, {
  dataLength: performers.length,
  hasMore: performers && performers.length < total,
  loader: null,
  next: loadMore,
  endMessage: null,
  scrollThreshold: 0.9
}, __jsx(antd__WEBPACK_IMPORTED_MODULE_3__["Row"], null, performers.length > 0 && performers.map(p => __jsx(antd__WEBPACK_IMPORTED_MODULE_3__["Col"], {
  xs: 12,
  sm: 12,
  md: 6,
  lg: 6,
  key: p._id
}, __jsx(_components_performer_grid_card__WEBPACK_IMPORTED_MODULE_2__["default"], {
  performer: p,
  countries: countries
}))))), !performers.length && !loading && __jsx("div", {
  className: "main-container custom text-center"
}, __jsx(antd__WEBPACK_IMPORTED_MODULE_3__["Alert"], {
  type: "info",
  message: notFoundText || 'No profile was found'
})), loading && __jsx("div", {
  className: "text-center"
}, __jsx(antd__WEBPACK_IMPORTED_MODULE_3__["Spin"], null)));

/* harmony default export */ __webpack_exports__["default"] = (ScrollListPerformers);

/***/ }),

/***/ "./src/components/performer/share-profile.tsx":
/*!****************************************************!*\
  !*** ./src/components/performer/share-profile.tsx ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_share__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-share */ "react-share");
/* harmony import */ var react_share__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_share__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_2__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



const SocialSharePerformer = ({
  performer,
  siteName
}) => {
  const shareUrl = `${window.location.origin}/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`;
  return __jsx("div", {
    className: "social-share-btns"
  }, __jsx(react_share__WEBPACK_IMPORTED_MODULE_1__["FacebookShareButton"], {
    url: shareUrl,
    quote: (performer === null || performer === void 0 ? void 0 : performer.bio) || '',
    hashtag: `#${performer === null || performer === void 0 ? void 0 : performer.username} #${performer === null || performer === void 0 ? void 0 : performer.name}`
  }, __jsx(react_share__WEBPACK_IMPORTED_MODULE_1__["FacebookIcon"], {
    size: 40,
    round: true
  })), __jsx(react_share__WEBPACK_IMPORTED_MODULE_1__["TwitterShareButton"], {
    url: shareUrl,
    title: (performer === null || performer === void 0 ? void 0 : performer.bio) || '',
    hashtags: [siteName, performer === null || performer === void 0 ? void 0 : performer.username, performer === null || performer === void 0 ? void 0 : performer.name]
  }, __jsx(react_share__WEBPACK_IMPORTED_MODULE_1__["TwitterIcon"], {
    size: 40,
    round: true
  })));
};

/* harmony default export */ __webpack_exports__["default"] = (SocialSharePerformer);

/***/ }),

/***/ "./src/components/performer/stripe-connect-form.tsx":
/*!**********************************************************!*\
  !*** ./src/components/performer/stripe-connect-form.tsx ***!
  \**********************************************************/
/*! exports provided: StripeConnectForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StripeConnectForm", function() { return StripeConnectForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


class StripeConnectForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      loading,
      stripeAccount,
      loginUrl,
      onConnectAccount
    } = this.props;
    return __jsx("div", {
      className: "account-form"
    }, __jsx("h4", {
      className: "text-center"
    }, "The Stripe connect account will be used to automatically payouts. You can also save your Banking or PayPal account to request manual payouts"), stripeAccount && stripeAccount.payoutsEnabled && stripeAccount.detailsSubmitted && __jsx("div", {
      className: "text-center"
    }, __jsx("p", null, "You are connected with Stripe!"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary"
    }, __jsx("a", {
      href: loginUrl,
      target: "_blank",
      rel: "noreferrer"
    }, "Click here to log in")), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "secondary",
      disabled: loading,
      loading: loading,
      onClick: onConnectAccount.bind(this)
    }, "Reconnect by another account")), (!stripeAccount || stripeAccount && !stripeAccount.payoutsEnabled || stripeAccount && !stripeAccount.detailsSubmitted) && __jsx("div", null, __jsx("p", null, "Please click here to complete the onboarding process & start earning money."), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "secondary",
      disabled: loading,
      loading: loading,
      onClick: onConnectAccount.bind(this)
    }, "Connect with Stripe")));
  }

}

/***/ }),

/***/ "./src/components/performer/subscriptionForm.tsx":
/*!*******************************************************!*\
  !*** ./src/components/performer/subscriptionForm.tsx ***!
  \*******************************************************/
/*! exports provided: PerformerSubscriptionForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerSubscriptionForm", function() { return PerformerSubscriptionForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
const validateMessages = {
  required: 'This field is required!',
  types: {
    email: 'Not a validate email!',
    number: 'Not a validate number!'
  }
};
class PerformerSubscriptionForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isFreeSubscription: false
    });
  }

  componentDidMount() {
    const {
      user
    } = this.props;
    this.setState({
      isFreeSubscription: !!(user !== null && user !== void 0 && user.isFreeSubscription)
    });
  }

  render() {
    const {
      onFinish,
      user,
      updating
    } = this.props;
    const {
      isFreeSubscription
    } = this.state;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      name: "nest-messages",
      onFinish: values => {
        onFinish(values);
      },
      validateMessages: validateMessages,
      initialValues: user,
      labelAlign: "left",
      className: "account-form",
      scrollToFirstError: true
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xl: 12,
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "isFreeSubscription",
      valuePropName: "checked"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Switch"], {
      unCheckedChildren: "Paid Subscription",
      checkedChildren: "Unpaid Subcription",
      onChange: val => this.setState({
        isFreeSubscription: val
      })
    })), isFreeSubscription && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "durationFreeSubscriptionDays",
      label: "Duration (days)",
      help: "Try free subscription for xx days",
      rules: [{
        required: true
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["InputNumber"], {
      min: 1
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "monthlyPrice",
      label: "Monthly Subscription Price",
      rules: [{
        required: true
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["InputNumber"], {
      min: 1
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "yearlyPrice",
      label: "Yearly Subscription Price",
      rules: [{
        required: true
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["InputNumber"], {
      min: 1
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      key: "publicChatPrice",
      name: "publicChatPrice",
      label: "Default Streaming Price",
      rules: [{
        required: true
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["InputNumber"], {
      min: 1
    })))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {
        offset: 4
      })
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      type: "primary",
      htmlType: "submit",
      disabled: updating,
      loading: updating
    }, "Save Changes")));
  }

}

/***/ }),

/***/ "./src/components/performer/table-info.tsx":
/*!*************************************************!*\
  !*** ./src/components/performer/table-info.tsx ***!
  \*************************************************/
/*! exports provided: PerformerInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerInfo", function() { return PerformerInfo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _lib_date__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/date */ "./src/lib/date.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class PerformerInfo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  detectURLs(str) {
    const urlRegex = /(((https?:\/\/)|(www\.))[^\s]+)/g;
    return str.match(urlRegex);
  }

  replaceURLs(str) {
    if (!str) return 'No bio yet';
    const urlRegex = /(((https?:\/\/)|(www\.))[^\s]+)/g;
    const result = str.replace(urlRegex, url => {
      let hyperlink = url;

      if (!hyperlink.match('^https?:\\/\\/')) {
        hyperlink = `http://${hyperlink}`;
      }

      return `<a href="${hyperlink}" target="_blank" rel="noopener noreferrer">${url}</a>`;
    }); // eslint-disable-next-line consistent-return

    return result;
  }

  render() {
    const {
      performer,
      countries = []
    } = this.props;
    const country = countries.length && countries.find(c => c.code === (performer === null || performer === void 0 ? void 0 : performer.country));
    return __jsx("div", {
      className: "per-infor"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Collapse"], {
      defaultActiveKey: ['1'],
      bordered: false,
      accordion: true
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Collapse"].Panel, {
      header: performer !== null && performer !== void 0 && performer.country ? __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("img", {
        alt: "flag",
        src: country === null || country === void 0 ? void 0 : country.flag,
        width: "25px"
      }), "\xA0", country === null || country === void 0 ? void 0 : country.name) : 'BIOGRAPHY',
      key: "1"
    }, __jsx("p", {
      className: "bio" // eslint-disable-next-line react/no-danger
      ,
      dangerouslySetInnerHTML: {
        __html: this.replaceURLs(performer === null || performer === void 0 ? void 0 : performer.bio)
      }
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"], {
      className: "performer-info"
    }, (performer === null || performer === void 0 ? void 0 : performer.gender) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Gender"
    }, performer === null || performer === void 0 ? void 0 : performer.gender), (performer === null || performer === void 0 ? void 0 : performer.sexualOrientation) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Sexual orientation"
    }, performer === null || performer === void 0 ? void 0 : performer.sexualOrientation), (performer === null || performer === void 0 ? void 0 : performer.dateOfBirth) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Date of Birth"
    }, Object(_lib_date__WEBPACK_IMPORTED_MODULE_2__["formatDate"])(performer === null || performer === void 0 ? void 0 : performer.dateOfBirth, 'DD/MM/YYYY')), (performer === null || performer === void 0 ? void 0 : performer.bodyType) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Body Type"
    }, performer === null || performer === void 0 ? void 0 : performer.bodyType), (performer === null || performer === void 0 ? void 0 : performer.state) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "State"
    }, performer === null || performer === void 0 ? void 0 : performer.state), (performer === null || performer === void 0 ? void 0 : performer.city) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "City"
    }, performer === null || performer === void 0 ? void 0 : performer.city), (performer === null || performer === void 0 ? void 0 : performer.height) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Height"
    }, performer === null || performer === void 0 ? void 0 : performer.height), (performer === null || performer === void 0 ? void 0 : performer.weight) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Weight"
    }, performer === null || performer === void 0 ? void 0 : performer.weight), (performer === null || performer === void 0 ? void 0 : performer.eyes) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Eye color"
    }, performer === null || performer === void 0 ? void 0 : performer.eyes), (performer === null || performer === void 0 ? void 0 : performer.ethnicity) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Ethnicity"
    }, performer === null || performer === void 0 ? void 0 : performer.ethnicity), (performer === null || performer === void 0 ? void 0 : performer.hair) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Hair color"
    }, performer === null || performer === void 0 ? void 0 : performer.hair), (performer === null || performer === void 0 ? void 0 : performer.butt) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Descriptions"].Item, {
      label: "Butt size"
    }, performer === null || performer === void 0 ? void 0 : performer.butt)))));
  }

}

/***/ }),

/***/ "./src/components/performer/tip-form.tsx":
/*!***********************************************!*\
  !*** ./src/components/performer/tip-form.tsx ***!
  \***********************************************/
/*! exports provided: TipPerformerForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TipPerformerForm", function() { return TipPerformerForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class TipPerformerForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      price: 10
    });
  }

  onChangeValue(price) {
    this.setState({
      price
    });
  }

  render() {
    const {
      onFinish,
      submiting = false,
      performer
    } = this.props;
    const {
      price
    } = this.state;
    return __jsx("div", {
      className: "confirm-purchase-form"
    }, __jsx("div", {
      className: "left-col"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'
    }), __jsx("div", {
      className: "p-name"
    }, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', ' ', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_2__["TickIcon"], {
      className: "primary-color"
    })), __jsx("div", {
      className: "p-username"
    }, "@", (performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a'), __jsx("img", {
      className: "lock-icon",
      src: "/static/lock-icon.png",
      alt: "lock"
    })), __jsx("div", {
      className: "right-col"
    }, __jsx("h2", null, "TIP", ' ', __jsx("span", {
      className: "username"
    }, `@${performer === null || performer === void 0 ? void 0 : performer.username}` || 'the model')), __jsx("h3", null, __jsx("span", {
      className: "price"
    }, price.toFixed(2)), ' ', "USD"), __jsx("div", {
      className: "tip-grps"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 10 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(10)
    }, "$10"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 20 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(20)
    }, "$20"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 50 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(50)
    }, "$50"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 100 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(100)
    }, "$100"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 200 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(200)
    }, "$200"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 300 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(300)
    }, "$300"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 400 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(400)
    }, "$400"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 500 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(500)
    }, "$500"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: price === 1000 ? 'primary' : 'default',
      onClick: () => this.onChangeValue(1000)
    }, "$1000")), __jsx("div", {
      className: "tip-input"
    }, __jsx("p", null, "Enter tip amount"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["InputNumber"], {
      min: 1,
      onChange: this.onChangeValue.bind(this),
      value: price
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      disabled: submiting,
      loading: submiting,
      onClick: () => onFinish(price)
    }, "SEND TIP")));
  }

}

/***/ }),

/***/ "./src/components/performer/verificationForm.tsx":
/*!*******************************************************!*\
  !*** ./src/components/performer/verificationForm.tsx ***!
  \*******************************************************/
/*! exports provided: PerformerVerificationForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerVerificationForm", function() { return PerformerVerificationForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_file__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/file */ "./src/components/file/index.ts");
/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/index */ "./src/services/index.ts");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./performer.less */ "./src/components/performer/performer.less");
/* harmony import */ var _performer_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_performer_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
class PerformerVerificationForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "idVerificationFileId", void 0);

    _defineProperty(this, "documentVerificationFileId", void 0);

    _defineProperty(this, "state", {
      idImage: '',
      documentImage: ''
    });
  }

  componentDidMount() {
    const {
      user
    } = this.props;

    if (user.documentVerification) {
      var _user$documentVerific, _user$documentVerific2;

      this.documentVerificationFileId = user === null || user === void 0 ? void 0 : (_user$documentVerific = user.documentVerification) === null || _user$documentVerific === void 0 ? void 0 : _user$documentVerific._id;
      this.setState({
        documentImage: user === null || user === void 0 ? void 0 : (_user$documentVerific2 = user.documentVerification) === null || _user$documentVerific2 === void 0 ? void 0 : _user$documentVerific2.url
      });
    }

    if (user.idVerification) {
      var _user$idVerification, _user$idVerification2;

      this.idVerificationFileId = user === null || user === void 0 ? void 0 : (_user$idVerification = user.idVerification) === null || _user$idVerification === void 0 ? void 0 : _user$idVerification._id;
      this.setState({
        idImage: user === null || user === void 0 ? void 0 : (_user$idVerification2 = user.idVerification) === null || _user$idVerification2 === void 0 ? void 0 : _user$idVerification2.url
      });
    }
  }

  onFileUploaded(type, file) {
    if (file && type === 'idFile') {
      var _file$response, _file$response$data, _file$response2;

      this.idVerificationFileId = file === null || file === void 0 ? void 0 : (_file$response = file.response) === null || _file$response === void 0 ? void 0 : (_file$response$data = _file$response.data) === null || _file$response$data === void 0 ? void 0 : _file$response$data._id;
      this.setState({
        idImage: file === null || file === void 0 ? void 0 : (_file$response2 = file.response) === null || _file$response2 === void 0 ? void 0 : _file$response2.data.url
      });
    }

    if (file && type === 'documentFile') {
      var _file$response3, _file$response3$data, _file$response4;

      this.documentVerificationFileId = file === null || file === void 0 ? void 0 : (_file$response3 = file.response) === null || _file$response3 === void 0 ? void 0 : (_file$response3$data = _file$response3.data) === null || _file$response3$data === void 0 ? void 0 : _file$response3$data._id;
      this.setState({
        documentImage: file === null || file === void 0 ? void 0 : (_file$response4 = file.response) === null || _file$response4 === void 0 ? void 0 : _file$response4.data.url
      });
    }

    antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Photo has been uploaded!');
  }

  render() {
    const {
      idImage,
      documentImage
    } = this.state;
    const documentUploadUrl = _services_index__WEBPACK_IMPORTED_MODULE_3__["performerService"].getDocumentUploadUrl();
    const headers = {
      authorization: _services_index__WEBPACK_IMPORTED_MODULE_3__["authService"].getToken()
    };
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      name: "nest-messages",
      labelAlign: "left",
      className: "account-form"
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 24,
      sm: 24,
      md: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      labelCol: {
        span: 24
      },
      label: "Your government issued ID",
      className: "model-photo-verification"
    }, __jsx("div", {
      className: "document-upload"
    }, __jsx(_components_file__WEBPACK_IMPORTED_MODULE_2__["ImageUpload"], {
      accept: "image/*",
      headers: headers,
      uploadUrl: `${documentUploadUrl}/idVerificationId`,
      onUploaded: this.onFileUploaded.bind(this, 'idFile')
    }), idImage ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Image"], {
      alt: "id-img",
      src: idImage,
      style: {
        height: '150px'
      }
    }) : __jsx("img", {
      src: "/static/front-id.png",
      height: "150px",
      alt: "id-img"
    })), __jsx("div", {
      className: "ant-form-item-explain",
      style: {
        textAlign: 'left'
      }
    }, __jsx("ul", {
      className: "list-issued-id"
    }, __jsx("li", null, "Government-issued ID card"), __jsx("li", null, "National Id card"), __jsx("li", null, "Passport"), __jsx("li", null, "Driving license"))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 24,
      sm: 24,
      md: 12
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      labelCol: {
        span: 24
      },
      label: "Your selfie with your ID and handwritten note",
      className: "model-photo-verification"
    }, __jsx("div", {
      className: "document-upload"
    }, __jsx(_components_file__WEBPACK_IMPORTED_MODULE_2__["ImageUpload"], {
      accept: "image/*",
      headers: headers,
      uploadUrl: `${documentUploadUrl}/documentVerificationId`,
      onUploaded: this.onFileUploaded.bind(this, 'documentFile')
    }), documentImage ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Image"], {
      alt: "id-img",
      src: documentImage,
      style: {
        height: '150px'
      }
    }) : __jsx("img", {
      src: "/static/holding-id.jpg",
      height: "150px",
      alt: "holding-id"
    })), __jsx("div", {
      className: "ant-form-item-explain",
      style: {
        textAlign: 'left'
      }
    }, __jsx("ul", {
      className: "list-issued-id"
    }, __jsx("li", null, "On a blank piece of white paper write your name, today's date and our website address", ' ', window.location.hash), __jsx("li", null, "Hold your paper and your ID so we can clearly see hoth"), __jsx("li", null, "Take a selfie of you, your ID and your handwritten note. All three elements (you, your ID and your writting) must be clearly visible without copying or editing")))))));
  }

}

/***/ }),

/***/ "./src/components/post/confirm-purchase.tsx":
/*!**************************************************!*\
  !*** ./src/components/post/confirm-purchase.tsx ***!
  \**************************************************/
/*! exports provided: PurchaseFeedForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseFeedForm", function() { return PurchaseFeedForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.less */ "./src/components/post/index.less");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_index_less__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




class PurchaseFeedForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    var _feed$performer, _feed$performer2, _feed$performer3, _feed$performer4;

    const {
      onFinish,
      submiting = false,
      feed
    } = this.props;
    return __jsx("div", {
      className: "confirm-purchase-form"
    }, __jsx("div", {
      className: "left-col"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      src: (feed === null || feed === void 0 ? void 0 : (_feed$performer = feed.performer) === null || _feed$performer === void 0 ? void 0 : _feed$performer.avatar) || '/static/no-avatar.png'
    }), __jsx("div", {
      className: "p-name"
    }, (feed === null || feed === void 0 ? void 0 : (_feed$performer2 = feed.performer) === null || _feed$performer2 === void 0 ? void 0 : _feed$performer2.name) || 'N/A', ' ', (feed === null || feed === void 0 ? void 0 : (_feed$performer3 = feed.performer) === null || _feed$performer3 === void 0 ? void 0 : _feed$performer3.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_2__["TickIcon"], {
      className: "primary-color"
    })), __jsx("div", {
      className: "p-username"
    }, "@", (feed === null || feed === void 0 ? void 0 : (_feed$performer4 = feed.performer) === null || _feed$performer4 === void 0 ? void 0 : _feed$performer4.username) || 'n/a'), __jsx("img", {
      className: "lock-icon",
      src: "/static/lock-icon.png",
      alt: "lock"
    })), __jsx("div", {
      className: "right-col"
    }, __jsx("h2", null, "Unlock Content"), __jsx("h3", null, __jsx("span", {
      className: "price"
    }, (feed.price || 0).toFixed(2)), ' ', "USD"), __jsx("p", {
      className: "description"
    }, feed.text), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      disabled: submiting,
      loading: submiting,
      onClick: () => onFinish()
    }, "CONFIRM TO UNLOCK")));
  }

}

/***/ }),

/***/ "./src/components/post/grid-card.tsx":
/*!*******************************************!*\
  !*** ./src/components/post/grid-card.tsx ***!
  \*******************************************/
/*! exports provided: FeedGridCard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FeedGridCard", function() { return FeedGridCard; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _lib_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/index */ "./src/lib/index.ts");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index.less */ "./src/components/post/index.less");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_index_less__WEBPACK_IMPORTED_MODULE_5__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;






class FeedGridCard extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    var _feed$thumbnail, _images$, _feed$teaser, _feed$teaser2, _feed$thumbnail2, _feed$thumbnail3, _images$2, _images$3, _videos$, _videos$2, _videos$3;

    const {
      feed
    } = this.props;
    const canView = !feed.isSale && feed.isSubscribed || feed.isSale && feed.isBought;
    const images = feed.files && feed.files.filter(f => f.type === 'feed-photo');
    const videos = feed.files && feed.files.filter(f => f.type === 'feed-video');
    const thumbUrl = (canView ? (feed === null || feed === void 0 ? void 0 : (_feed$thumbnail = feed.thumbnail) === null || _feed$thumbnail === void 0 ? void 0 : _feed$thumbnail.url) || images && images[0] && ((_images$ = images[0]) === null || _images$ === void 0 ? void 0 : _images$.url) || (feed === null || feed === void 0 ? void 0 : feed.teaser) && (feed === null || feed === void 0 ? void 0 : (_feed$teaser = feed.teaser) === null || _feed$teaser === void 0 ? void 0 : _feed$teaser.thumbnails) && (feed === null || feed === void 0 ? void 0 : (_feed$teaser2 = feed.teaser) === null || _feed$teaser2 === void 0 ? void 0 : _feed$teaser2.thumbnails[0]) : (feed === null || feed === void 0 ? void 0 : (_feed$thumbnail2 = feed.thumbnail) === null || _feed$thumbnail2 === void 0 ? void 0 : _feed$thumbnail2.thumbnails) && (feed === null || feed === void 0 ? void 0 : (_feed$thumbnail3 = feed.thumbnail) === null || _feed$thumbnail3 === void 0 ? void 0 : _feed$thumbnail3.thumbnails[0]) || images && images[0] && ((_images$2 = images[0]) === null || _images$2 === void 0 ? void 0 : _images$2.thumbnails) && ((_images$3 = images[0]) === null || _images$3 === void 0 ? void 0 : _images$3.thumbnails[0]) || videos && videos[0] && ((_videos$ = videos[0]) === null || _videos$ === void 0 ? void 0 : _videos$.thumbnails) && ((_videos$2 = videos[0]) === null || _videos$2 === void 0 ? void 0 : _videos$2.thumbnails[0])) || '/static/leaf.jpg';
    return __jsx("div", {
      className: "feed-grid-card",
      key: feed._id
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
      href: {
        pathname: '/post',
        query: {
          id: feed.slug || feed._id
        }
      },
      as: `/post/${feed.slug || feed._id}`
    }, __jsx("div", {
      className: "card-thumb"
    }, __jsx("div", {
      className: "card-bg",
      style: {
        backgroundImage: `url(${thumbUrl})`,
        filter: !canView ? 'blur(20px)' : 'blur(0px)'
      }
    }), __jsx("div", {
      className: "card-middle"
    }, canView ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["UnlockOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["LockOutlined"], null), !feed.isSale && !feed.isSubscribed && __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      type: "link"
    }, "Subscribe to unlock"), feed.isSale && !feed.isBought && __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      type: "link"
    }, "Pay now to unlock")), __jsx("div", {
      className: "card-bottom"
    }, __jsx("div", {
      className: "stats"
    }, __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["HeartOutlined"], null), ' ', feed.totalLike > 0 ? Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["shortenLargeNumber"])(feed.totalLike) : 0), __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["CommentOutlined"], null), ' ', feed.totalComment > 0 ? Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["shortenLargeNumber"])(feed.totalComment) : 0)), feed.files && feed.files.length > 0 && __jsx("span", {
      className: "count-media-item"
    }, images.length > 0 && __jsx("span", null, images.length > 1 && images.length, ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["FileImageOutlined"], null), ' '), videos.length > 0 && images.length > 0 && '|', videos.length > 0 && __jsx("span", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["VideoCameraOutlined"], null), ' ', videos.length === 1 && Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["videoDuration"])((_videos$3 = videos[0]) === null || _videos$3 === void 0 ? void 0 : _videos$3.duration)))))));
  }

}

/***/ }),

/***/ "./src/components/post/index.less":
/*!****************************************!*\
  !*** ./src/components/post/index.less ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/components/post/post-card.tsx":
/*!*******************************************!*\
  !*** ./src/components/post/post-card.tsx ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_icons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/icons */ "./src/icons/index.tsx");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _components_comment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @components/comment */ "./src/components/comment/index.ts");
/* harmony import */ var _redux_comment_actions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @redux/comment/actions */ "./src/redux/comment/actions.ts");
/* harmony import */ var _lib_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/index */ "./src/lib/index.ts");
/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @services/index */ "./src/services/index.ts");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-redux */ "react-redux");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _components_performer_tip_form__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @components/performer/tip-form */ "./src/components/performer/tip-form.tsx");
/* harmony import */ var react_moment_countdown__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-moment-countdown */ "react-moment-countdown");
/* harmony import */ var react_moment_countdown__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react_moment_countdown__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! moment */ "moment");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _components_common_video_player__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @components/common/video-player */ "./src/components/common/video-player.tsx");
/* harmony import */ var _components_performer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @components/performer */ "./src/components/performer/index.ts");
/* harmony import */ var _components_report_report_form__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @components/report/report-form */ "./src/components/report/report-form.tsx");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _redux_user_actions__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @redux/user/actions */ "./src/redux/user/actions.ts");
/* harmony import */ var _components_common_base_loader__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @components/common/base/loader */ "./src/components/common/base/loader.tsx");
/* harmony import */ var _confirm_purchase__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./confirm-purchase */ "./src/components/post/confirm-purchase.tsx");
/* harmony import */ var _post_slider__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./post-slider */ "./src/components/post/post-slider.tsx");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./index.less */ "./src/components/post/index.less");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_index_less__WEBPACK_IMPORTED_MODULE_21__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-prototype-builtins */























class FeedCard extends react__WEBPACK_IMPORTED_MODULE_0__["Component"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isOpenComment: false,
      isLiked: false,
      isBookMarked: false,
      isBought: false,
      totalLike: 0,
      totalComment: 0,
      isFirstLoadComment: true,
      itemPerPage: 10,
      commentPage: 0,
      isHovered: false,
      openTipModal: false,
      openPurchaseModal: false,
      openTeaser: false,
      submiting: false,
      polls: [],
      requesting: false,
      openSubscriptionModal: false,
      openReportModal: false,
      subscriptionType: ''
    });

    _defineProperty(this, "handleJoinStream", () => {
      var _feed$performer, _feed$performer2, _feed$performer3, _feed$performer4;

      const {
        user,
        feed
      } = this.props;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in or register!');
        return;
      }

      if (user.isPerformer) return;

      if (!(feed !== null && feed !== void 0 && feed.isSubscribed)) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please subscribe to this model!');
        return;
      }

      next_router__WEBPACK_IMPORTED_MODULE_16___default.a.push({
        pathname: '/streaming/details',
        query: {
          performer: JSON.stringify(feed === null || feed === void 0 ? void 0 : feed.performer),
          username: (feed === null || feed === void 0 ? void 0 : (_feed$performer = feed.performer) === null || _feed$performer === void 0 ? void 0 : _feed$performer.username) || (feed === null || feed === void 0 ? void 0 : (_feed$performer2 = feed.performer) === null || _feed$performer2 === void 0 ? void 0 : _feed$performer2._id)
        }
      }, `/streaming/${(feed === null || feed === void 0 ? void 0 : (_feed$performer3 = feed.performer) === null || _feed$performer3 === void 0 ? void 0 : _feed$performer3.username) || (feed === null || feed === void 0 ? void 0 : (_feed$performer4 = feed.performer) === null || _feed$performer4 === void 0 ? void 0 : _feed$performer4._id)}`);
    });

    _defineProperty(this, "handleLike", async () => {
      const {
        feed
      } = this.props;
      const {
        isLiked,
        totalLike,
        requesting
      } = this.state;
      if (requesting) return;

      try {
        await this.setState({
          requesting: true
        });

        if (!isLiked) {
          await _services_index__WEBPACK_IMPORTED_MODULE_8__["reactionService"].create({
            objectId: feed._id,
            action: 'like',
            objectType: 'feed'
          });
          this.setState({
            isLiked: true,
            totalLike: totalLike + 1,
            requesting: false
          });
        } else {
          await _services_index__WEBPACK_IMPORTED_MODULE_8__["reactionService"].delete({
            objectId: feed._id,
            action: 'like',
            objectType: 'feed'
          });
          this.setState({
            isLiked: false,
            totalLike: totalLike - 1,
            requesting: false
          });
        }
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
        this.setState({
          requesting: false
        });
      }
    });

    _defineProperty(this, "handleBookmark", async () => {
      const {
        feed,
        user
      } = this.props;
      const {
        isBookMarked,
        requesting
      } = this.state;
      if (requesting || !user._id || user.isPerformer) return;

      try {
        await this.setState({
          requesting: true
        });

        if (!isBookMarked) {
          await _services_index__WEBPACK_IMPORTED_MODULE_8__["reactionService"].create({
            objectId: feed._id,
            action: 'book_mark',
            objectType: 'feed'
          });
          this.setState({
            isBookMarked: true,
            requesting: false
          });
        } else {
          await _services_index__WEBPACK_IMPORTED_MODULE_8__["reactionService"].delete({
            objectId: feed._id,
            action: 'book_mark',
            objectType: 'feed'
          });
          this.setState({
            isBookMarked: false,
            requesting: false
          });
        }
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
        this.setState({
          requesting: false
        });
      }
    });

    _defineProperty(this, "handleReport", async payload => {
      const {
        feed
      } = this.props;

      try {
        await this.setState({
          requesting: true
        });
        await _services_index__WEBPACK_IMPORTED_MODULE_8__["reportService"].create(_objectSpread(_objectSpread({}, payload), {}, {
          target: 'feed',
          targetId: feed._id,
          performerId: feed.fromSourceId
        }));
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Your report has been sent');
      } catch (e) {
        const err = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(err.message || 'error occured, please try again later');
      } finally {
        this.setState({
          requesting: false,
          openReportModal: false
        });
      }
    });

    _defineProperty(this, "onOpenComment", () => {
      const {
        feed,
        getComments: handleGetComment
      } = this.props;
      const {
        isOpenComment,
        isFirstLoadComment,
        itemPerPage,
        commentPage
      } = this.state;
      this.setState({
        isOpenComment: !isOpenComment
      });

      if (isFirstLoadComment) {
        this.setState({
          isFirstLoadComment: false
        });
        handleGetComment({
          objectId: feed._id,
          limit: itemPerPage,
          offset: commentPage
        });
      }
    });

    _defineProperty(this, "copyLink", () => {
      const {
        feed
      } = this.props;
      const str = `${window.location.origin}/post/${(feed === null || feed === void 0 ? void 0 : feed.slug) || (feed === null || feed === void 0 ? void 0 : feed._id)}`;
      const el = document.createElement('textarea');
      el.value = str;
      el.setAttribute('readonly', '');
      el.style.position = 'absolute';
      el.style.left = '-9999px';
      document.body.appendChild(el);
      el.select();
      document.execCommand('copy');
      document.body.removeChild(el);
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Copied to clipboard');
    });

    _defineProperty(this, "moreComment", async () => {
      const {
        feed,
        moreComment: handleLoadMore
      } = this.props;
      const {
        commentPage,
        itemPerPage
      } = this.state;
      this.setState({
        commentPage: commentPage + 1
      });
      handleLoadMore({
        limit: itemPerPage,
        offset: (commentPage + 1) * itemPerPage,
        objectId: feed._id
      });
    });

    _defineProperty(this, "deleteComment", item => {
      const {
        deleteComment: handleDelete
      } = this.props;
      if (!window.confirm('Are you sure to remove this comment?')) return;
      handleDelete(item._id);
    });

    _defineProperty(this, "subscribe", async () => {
      const {
        feed,
        user,
        settings
      } = this.props;
      const {
        subscriptionType
      } = this.state;

      if (!user._id) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please log in!');
        next_router__WEBPACK_IMPORTED_MODULE_16___default.a.push('/');
        return;
      }

      if (user.isPerformer) return;

      if (settings.paymentGateway === 'stripe' && !user.stripeCardIds.length) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please add payment card');
        next_router__WEBPACK_IMPORTED_MODULE_16___default.a.push('/user/cards');
        return;
      }

      try {
        this.setState({
          submiting: true
        });
        const resp = await _services_index__WEBPACK_IMPORTED_MODULE_8__["paymentService"].subscribePerformer({
          type: subscriptionType || 'monthly',
          performerId: feed.fromSourceId,
          paymentGateway: settings.paymentGateway
        });

        if (settings.paymentGateway === 'ccbill') {
          var _resp$data;

          window.location.href = resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.paymentUrl;
        } else {
          this.setState({
            openSubscriptionModal: false
          });
        }
      } catch (e) {
        const err = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(err.message || 'error occured, please try again later');
        this.setState({
          openSubscriptionModal: false,
          submiting: false
        });
      }
    });

    _defineProperty(this, "sendTip", async price => {
      var _feed$performer5;

      const {
        feed,
        user,
        updateBalance: handleUpdateBalance
      } = this.props;

      if (user._id === (feed === null || feed === void 0 ? void 0 : (_feed$performer5 = feed.performer) === null || _feed$performer5 === void 0 ? void 0 : _feed$performer5._id)) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Models cannot tip for themselves');
        return;
      }

      if (user.balance < price) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Your wallet balance is not enough');
        next_router__WEBPACK_IMPORTED_MODULE_16___default.a.push('/wallet');
        return;
      }

      try {
        var _feed$performer6, _feed$performer7;

        await this.setState({
          requesting: true
        });
        await _services_index__WEBPACK_IMPORTED_MODULE_8__["tokenTransctionService"].sendTip(feed === null || feed === void 0 ? void 0 : (_feed$performer6 = feed.performer) === null || _feed$performer6 === void 0 ? void 0 : _feed$performer6._id, {
          performerId: feed === null || feed === void 0 ? void 0 : (_feed$performer7 = feed.performer) === null || _feed$performer7 === void 0 ? void 0 : _feed$performer7._id,
          price
        });
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Thank you for the tip');
        handleUpdateBalance({
          token: -price
        });
      } catch (e) {
        const err = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(err.message || 'error occured, please try again later');
      } finally {
        this.setState({
          requesting: false,
          openTipModal: false
        });
      }
    });

    _defineProperty(this, "purchaseFeed", async () => {
      const {
        feed,
        user,
        updateBalance: handleUpdateBalance
      } = this.props;

      if (user.balance < feed.price) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Your wallet balance is not enough');
        next_router__WEBPACK_IMPORTED_MODULE_16___default.a.push('/wallet');
        return;
      }

      try {
        await this.setState({
          requesting: true
        });
        await _services_index__WEBPACK_IMPORTED_MODULE_8__["tokenTransctionService"].purchaseFeed(feed._id, {});
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].success('Unlocked successfully!');
        this.setState({
          isBought: true
        });
        handleUpdateBalance({
          token: -feed.price
        });
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Error occured, please try again later');
      } finally {
        this.setState({
          requesting: false,
          openPurchaseModal: false
        });
      }
    });

    _defineProperty(this, "votePoll", async poll => {
      const {
        feed
      } = this.props;
      const {
        polls
      } = this.state;
      const isExpired = new Date(feed.pollExpiredAt) < new Date();

      if (isExpired) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('The poll is now closed');
        return;
      }

      if (!window.confirm('Vote it?')) return;

      try {
        await this.setState({
          requesting: true
        });
        await _services_index__WEBPACK_IMPORTED_MODULE_8__["feedService"].votePoll(poll._id);
        const index = polls.findIndex(p => p._id === poll._id);
        await this.setState(prevState => {
          const newItems = [...prevState.polls];
          newItems[index].totalVote += 1;
          return {
            polls: newItems,
            requesting: false
          };
        });
      } catch (e) {
        const error = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(error.message || 'Something went wrong, please try again later');
        this.setState({
          requesting: false
        });
      }
    });
  }

  componentDidMount() {
    const {
      feed
    } = this.props;

    if (feed) {
      this.setState({
        isLiked: feed.isLiked,
        isBookMarked: feed.isBookMarked,
        isBought: feed.isBought,
        totalLike: feed.totalLike,
        totalComment: feed.totalComment,
        polls: feed.polls ? feed.polls : []
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      feed,
      commentMapping,
      comment
    } = this.props;
    const {
      totalComment
    } = this.state;

    if (!prevProps.comment.data && comment.data && comment.data.objectId === feed._id || prevProps.commentMapping[feed._id] && totalComment !== commentMapping[feed._id].total) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        totalComment: commentMapping[feed._id].total
      });
    }
  }

  render() {
    var _feed$thumbnail, _feed$thumbnail2, _images$, _images$2, _feed$teaser, _feed$teaser2, _videos$, _videos$2, _feed$performer8, _feed$performer9, _feed$performer10, _feed$performer11, _feed$performer12, _feed$performer13, _feed$teaser3, _feed$teaser4;

    const {
      feed,
      user,
      commentMapping,
      comment,
      onDelete: handleDelete,
      createComment: handleCreateComment,
      siteName
    } = this.props;
    const {
      performer
    } = feed;
    const {
      requesting: commenting
    } = comment;
    const fetchingComment = commentMapping.hasOwnProperty(feed._id) ? commentMapping[feed._id].requesting : false;
    const comments = commentMapping.hasOwnProperty(feed._id) ? commentMapping[feed._id].items : [];
    const totalComments = commentMapping.hasOwnProperty(feed._id) ? commentMapping[feed._id].total : 0;
    const {
      isOpenComment,
      isLiked,
      totalComment,
      totalLike,
      isHovered,
      isBought,
      openTipModal,
      openPurchaseModal,
      submiting,
      polls,
      isBookMarked,
      openTeaser,
      openSubscriptionModal,
      openReportModal,
      requesting,
      subscriptionType
    } = this.state;
    let canView = !feed.isSale && feed.isSubscribed || feed.isSale && isBought || feed.type === 'text' || feed.isSale && !feed.price;

    if (!(user !== null && user !== void 0 && user._id) || `${user === null || user === void 0 ? void 0 : user._id}` !== `${feed === null || feed === void 0 ? void 0 : feed.fromSourceId}` && user !== null && user !== void 0 && user.isPerformer) {
      canView = false;
    }

    const images = feed.files && feed.files.filter(f => f.type === 'feed-photo');
    const videos = feed.files && feed.files.filter(f => f.type === 'feed-video');
    const thumbUrl = (feed === null || feed === void 0 ? void 0 : (_feed$thumbnail = feed.thumbnail) === null || _feed$thumbnail === void 0 ? void 0 : _feed$thumbnail.thumbnails) && (feed === null || feed === void 0 ? void 0 : (_feed$thumbnail2 = feed.thumbnail) === null || _feed$thumbnail2 === void 0 ? void 0 : _feed$thumbnail2.thumbnails[0]) || images && images[0] && ((_images$ = images[0]) === null || _images$ === void 0 ? void 0 : _images$.thumbnails) && ((_images$2 = images[0]) === null || _images$2 === void 0 ? void 0 : _images$2.thumbnails[0]) || (feed === null || feed === void 0 ? void 0 : feed.teaser) && (feed === null || feed === void 0 ? void 0 : (_feed$teaser = feed.teaser) === null || _feed$teaser === void 0 ? void 0 : _feed$teaser.thumbnails) && (feed === null || feed === void 0 ? void 0 : (_feed$teaser2 = feed.teaser) === null || _feed$teaser2 === void 0 ? void 0 : _feed$teaser2.thumbnails[0]) || videos && videos[0] && ((_videos$ = videos[0]) === null || _videos$ === void 0 ? void 0 : _videos$.thumbnails) && ((_videos$2 = videos[0]) === null || _videos$2 === void 0 ? void 0 : _videos$2.thumbnails[0]) || '/static/leaf.jpg';
    let totalVote = 0;
    polls && polls.forEach(poll => {
      totalVote += poll.totalVote;
    });

    const menu = __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"], {
      key: `menu_${feed._id}`
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"].Item, {
      key: `post_detail_${feed._id}`
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
      href: {
        pathname: '/post',
        query: {
          id: feed.slug || feed._id
        }
      },
      as: `/post/${feed.slug || feed._id}`
    }, __jsx("a", null, "Details"))), user._id === feed.fromSourceId && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"].Item, {
      key: `edit_post_${feed._id}`
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
      href: {
        pathname: '/model/my-post/edit',
        query: {
          id: feed._id
        }
      }
    }, __jsx("a", null, "Edit post"))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"].Item, {
      key: `copy_link_${feed._id}`,
      onClick: () => this.copyLink()
    }, __jsx("a", null, "Copy link to clipboard")), user._id === feed.fromSourceId && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Divider"], {
      style: {
        margin: '10px 0'
      }
    }), user._id === feed.fromSourceId && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Menu"].Item, {
      key: `delete_post_${feed._id}`
    }, __jsx("a", {
      "aria-hidden": true,
      onClick: handleDelete.bind(this, feed)
    }, "Delete post")));

    const dropdown = __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Dropdown"], {
      overlay: menu
    }, __jsx("a", {
      "aria-hidden": true,
      className: "dropdown-options",
      onClick: e => e.preventDefault()
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["MoreOutlined"], null)));

    return __jsx("div", {
      className: "feed-card"
    }, __jsx("div", {
      className: "feed-top"
    }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
      href: {
        pathname: '/model/profile',
        query: {
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      },
      as: `/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`
    }, __jsx("div", {
      className: "feed-top-left"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      alt: "per_atv",
      src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png',
      size: 40
    }), __jsx("div", {
      className: "feed-name"
    }, __jsx("h4", null, (performer === null || performer === void 0 ? void 0 : performer.name) || 'N/A', ' ', (performer === null || performer === void 0 ? void 0 : performer.verifiedAccount) && __jsx(src_icons__WEBPACK_IMPORTED_MODULE_3__["TickIcon"], null), "\xA0\xA0", (performer === null || performer === void 0 ? void 0 : performer.live) > 0 && (user === null || user === void 0 ? void 0 : user._id) !== (performer === null || performer === void 0 ? void 0 : performer._id) && __jsx("a", {
      "aria-hidden": true,
      onClick: this.handleJoinStream,
      className: "live-status"
    }, "Live")), __jsx("h5", null, "@", (performer === null || performer === void 0 ? void 0 : performer.username) || 'n/a')), !(performer !== null && performer !== void 0 && performer.isOnline) ? __jsx("span", {
      className: "online-status"
    }) : __jsx("span", {
      className: "online-status active"
    }))), __jsx("div", {
      className: "feed-top-right"
    }, __jsx("span", {
      className: "feed-time"
    }, Object(_lib_index__WEBPACK_IMPORTED_MODULE_7__["formatDate"])(feed.updatedAt, 'MMM DD')), dropdown)), __jsx("div", {
      className: "feed-container"
    }, __jsx("div", {
      className: "feed-text"
    }, feed.text, polls && polls.length > 0 && __jsx("div", {
      className: "feed-polls"
    }, feed.pollDescription && __jsx("h4", {
      className: "p-question"
    }, feed.pollDescription), polls.map(poll => __jsx("div", {
      "aria-hidden": true,
      className: "p-item",
      key: poll._id,
      onClick: this.votePoll.bind(this, poll)
    }, __jsx("span", {
      className: "p-desc"
    }, poll === null || poll === void 0 ? void 0 : poll.description), ' ', __jsx("span", null, (poll === null || poll === void 0 ? void 0 : poll.totalVote) || 0))), __jsx("div", {
      className: "total-vote"
    }, __jsx("span", null, "Total", ' ', Object(_lib_index__WEBPACK_IMPORTED_MODULE_7__["shortenLargeNumber"])(totalVote), ' ', totalVote < 2 ? 'vote' : 'votes'), feed.pollExpiredAt && moment__WEBPACK_IMPORTED_MODULE_12___default()(feed.pollExpiredAt).isAfter(moment__WEBPACK_IMPORTED_MODULE_12___default()()) ? __jsx("span", null, `${moment__WEBPACK_IMPORTED_MODULE_12___default()(feed.pollExpiredAt).diff(moment__WEBPACK_IMPORTED_MODULE_12___default()(), 'days')}d `, __jsx(react_moment_countdown__WEBPACK_IMPORTED_MODULE_11___default.a, {
      toDate: moment__WEBPACK_IMPORTED_MODULE_12___default()(feed.pollExpiredAt)
    })) : __jsx("span", null, "Closed")))), canView && __jsx("div", {
      className: "feed-content"
    }, __jsx(_post_slider__WEBPACK_IMPORTED_MODULE_20__["default"], {
      feed: feed
    })), !canView && __jsx("div", {
      className: "lock-content"
    }, __jsx("div", {
      className: "feed-bg",
      style: {
        backgroundImage: `url(${thumbUrl})`,
        filter: thumbUrl === '/static/leaf.jpg' ? 'blur(2px)' : 'blur(20px)'
      }
    }), __jsx("div", {
      className: "lock-middle"
    }, isHovered ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["UnlockOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LockOutlined"], null), !feed.isSale && !feed.isSubscribed && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      onMouseEnter: () => this.setState({
        isHovered: true
      }),
      onMouseLeave: () => this.setState({
        isHovered: false
      }),
      disabled: user.isPerformer,
      className: "secondary",
      onClick: () => this.setState({
        openSubscriptionModal: true
      })
    }, "Subscribe to unlock"), feed.isSale && feed.price > 0 && !isBought && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      onMouseEnter: () => this.setState({
        isHovered: true
      }),
      onMouseLeave: () => this.setState({
        isHovered: false
      }),
      disabled: user.isPerformer,
      className: "secondary",
      onClick: () => this.setState({
        openPurchaseModal: true
      })
    }, "Pay $", (feed.price || 0).toFixed(2), ' ', "to unlock"), feed.isSale && !feed.price && !user._id && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      onMouseEnter: () => this.setState({
        isHovered: true
      }),
      onMouseLeave: () => this.setState({
        isHovered: false
      }),
      disabled: user.isPerformer,
      className: "secondary",
      onClick: () => next_router__WEBPACK_IMPORTED_MODULE_16___default.a.push({
        pathname: '/model/profile',
        query: {
          username: (performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)
        }
      }, `/${(performer === null || performer === void 0 ? void 0 : performer.username) || (performer === null || performer === void 0 ? void 0 : performer._id)}`)
    }, "Follow for free"), feed.teaser && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "teaser-btn",
      type: "link",
      onClick: () => this.setState({
        openTeaser: true
      })
    }, "View teaser")), feed.files && feed.files.length > 0 && __jsx("div", {
      className: "count-media"
    }, __jsx("span", {
      className: "count-media-item"
    }, images.length > 0 && __jsx("span", null, images.length, ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FileImageOutlined"], null), ' '), videos.length > 0 && images.length > 0 && '|', videos.length > 0 && __jsx("span", null, videos.length > 1 && videos.length, ' ', __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["VideoCameraOutlined"], null), ' ', videos.length === 1 && Object(_lib_index__WEBPACK_IMPORTED_MODULE_7__["videoDuration"])(videos[0].duration)))))), __jsx("div", {
      className: "feed-bottom"
    }, __jsx("div", {
      className: "feed-actions"
    }, __jsx("div", {
      className: "action-item"
    }, __jsx("span", {
      "aria-hidden": true,
      className: isLiked ? 'action-ico active' : 'action-ico',
      onClick: this.handleLike.bind(this)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["HeartOutlined"], null), ' ', Object(_lib_index__WEBPACK_IMPORTED_MODULE_7__["shortenLargeNumber"])(totalLike)), __jsx("span", {
      "aria-hidden": true,
      className: isOpenComment ? 'action-ico active' : 'action-ico',
      onClick: this.onOpenComment.bind(this)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CommentOutlined"], null), ' ', Object(_lib_index__WEBPACK_IMPORTED_MODULE_7__["shortenLargeNumber"])(totalComment)), performer && __jsx("span", {
      "aria-hidden": true,
      className: "action-ico",
      onClick: () => this.setState({
        openTipModal: true
      })
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["DollarOutlined"], null), ' ', "Send tip")), __jsx("div", {
      className: "action-item"
    }, __jsx("span", {
      "aria-hidden": true,
      className: openReportModal ? 'action-ico active' : 'action-ico',
      onClick: () => this.setState({
        openReportModal: true
      })
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: "Report"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FlagOutlined"], null))), __jsx("span", {
      "aria-hidden": true,
      className: isBookMarked ? 'action-ico active' : 'action-ico',
      onClick: this.handleBookmark.bind(this)
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: !isBookMarked ? 'Add to Bookmarks' : 'Remove from Bookmarks'
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["BookOutlined"], null))))), isOpenComment && __jsx("div", {
      className: "feed-comment"
    }, __jsx(_components_comment__WEBPACK_IMPORTED_MODULE_5__["CommentForm"], {
      creator: user,
      onSubmit: handleCreateComment.bind(this),
      objectId: feed._id,
      objectType: "feed",
      requesting: commenting,
      siteName: siteName
    }), __jsx(_components_comment__WEBPACK_IMPORTED_MODULE_5__["ListComments"], {
      key: `list_comments_${feed._id}_${comments.length}`,
      requesting: fetchingComment,
      comments: comments,
      total: totalComments,
      onDelete: this.deleteComment.bind(this),
      user: user,
      canReply: true
    }), comments.length < totalComments && __jsx("p", {
      className: "text-center"
    }, __jsx("a", {
      "aria-hidden": true,
      onClick: this.moreComment.bind(this)
    }, "More comments...")))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "tip_performer",
      className: "tip-modal",
      title: null,
      width: 600,
      visible: openTipModal,
      onOk: () => this.setState({
        openTipModal: false
      }),
      footer: null,
      onCancel: () => this.setState({
        openTipModal: false
      })
    }, __jsx(_components_performer_tip_form__WEBPACK_IMPORTED_MODULE_10__["TipPerformerForm"], {
      performer: performer,
      submiting: requesting,
      onFinish: this.sendTip.bind(this)
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "purchase_post",
      className: "purchase-modal",
      title: null,
      visible: openPurchaseModal,
      footer: null,
      width: 600,
      destroyOnClose: true,
      onCancel: () => this.setState({
        openPurchaseModal: false
      })
    }, __jsx(_confirm_purchase__WEBPACK_IMPORTED_MODULE_19__["PurchaseFeedForm"], {
      feed: feed,
      submiting: requesting,
      onFinish: this.purchaseFeed.bind(this)
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "report_post",
      className: "subscription-modal",
      title: null,
      visible: openReportModal,
      footer: null,
      destroyOnClose: true,
      onCancel: () => this.setState({
        openReportModal: false
      })
    }, __jsx(_components_report_report_form__WEBPACK_IMPORTED_MODULE_15__["ReportForm"], {
      performer: performer,
      submiting: requesting,
      onFinish: this.handleReport.bind(this)
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "subscribe_performer",
      className: "subscription-modal",
      width: 600,
      centered: true,
      title: null,
      visible: openSubscriptionModal,
      footer: null,
      destroyOnClose: true,
      onCancel: () => this.setState({
        openSubscriptionModal: false,
        subscriptionType: ''
      })
    }, !subscriptionType ? __jsx("div", {
      className: "subscription-btn-grp"
    }, __jsx("h2", {
      style: {
        paddingTop: 25
      }
    }, "SUBSCRIBE TO UNLOCK"), (feed === null || feed === void 0 ? void 0 : (_feed$performer8 = feed.performer) === null || _feed$performer8 === void 0 ? void 0 : _feed$performer8.isFreeSubscription) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      disabled: !user || !user._id || submiting && subscriptionType === 'free',
      onClick: () => {
        this.setState({
          openSubscriptionModal: true,
          subscriptionType: 'free'
        });
      }
    }, "SUBSCRIBE FOR FREE FOR", ' ', (feed === null || feed === void 0 ? void 0 : (_feed$performer9 = feed.performer) === null || _feed$performer9 === void 0 ? void 0 : _feed$performer9.durationFreeSubscriptionDays) || 1, ' ', (feed === null || feed === void 0 ? void 0 : (_feed$performer10 = feed.performer) === null || _feed$performer10 === void 0 ? void 0 : _feed$performer10.durationFreeSubscriptionDays) > 1 ? 'DAYS' : 'DAY'), (feed === null || feed === void 0 ? void 0 : (_feed$performer11 = feed.performer) === null || _feed$performer11 === void 0 ? void 0 : _feed$performer11.monthlyPrice) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      disabled: !user || !user._id || submiting && subscriptionType === 'monthly',
      onClick: () => {
        this.setState({
          openSubscriptionModal: true,
          subscriptionType: 'monthly'
        });
      }
    }, "MONTHLY SUBSCRIPTION FOR $", ((feed === null || feed === void 0 ? void 0 : (_feed$performer12 = feed.performer) === null || _feed$performer12 === void 0 ? void 0 : _feed$performer12.monthlyPrice) || 0).toFixed(2)), (feed === null || feed === void 0 ? void 0 : feed.performer.yearlyPrice) && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "secondary",
      disabled: !user || !user._id || submiting && subscriptionType === 'yearly',
      onClick: () => {
        this.setState({
          openSubscriptionModal: true,
          subscriptionType: 'yearly'
        });
      }
    }, "YEARLY SUBSCRIPTON FOR $", ((feed === null || feed === void 0 ? void 0 : (_feed$performer13 = feed.performer) === null || _feed$performer13 === void 0 ? void 0 : _feed$performer13.yearlyPrice) || 0).toFixed(2))) : __jsx(_components_performer__WEBPACK_IMPORTED_MODULE_14__["ConfirmSubscriptionPerformerForm"], {
      type: subscriptionType,
      performer: performer,
      submiting: submiting,
      onFinish: this.subscribe.bind(this)
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
      key: "teaser_video",
      title: "Teaser video",
      visible: openTeaser,
      footer: null,
      onCancel: () => this.setState({
        openTeaser: false
      }),
      width: 650,
      destroyOnClose: true,
      className: "modal-teaser-preview"
    }, __jsx(_components_common_video_player__WEBPACK_IMPORTED_MODULE_13__["VideoPlayer"], {
      key: feed === null || feed === void 0 ? void 0 : (_feed$teaser3 = feed.teaser) === null || _feed$teaser3 === void 0 ? void 0 : _feed$teaser3._id,
      autoplay: true,
      controls: true,
      playsinline: true,
      fluid: true,
      sources: [{
        src: feed === null || feed === void 0 ? void 0 : (_feed$teaser4 = feed.teaser) === null || _feed$teaser4 === void 0 ? void 0 : _feed$teaser4.url,
        type: 'video/mp4'
      }]
    })), submiting && __jsx(_components_common_base_loader__WEBPACK_IMPORTED_MODULE_18__["default"], {
      customText: "We are processing your payment, please do not reload this page until it's done."
    }));
  }

}

const mapStates = state => {
  const {
    commentMapping,
    comment
  } = state.comment;
  return {
    siteName: state.ui.siteName,
    user: state.user.current,
    commentMapping,
    comment,
    settings: state.settings
  };
};

const mapDispatch = {
  getComments: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_6__["getComments"],
  moreComment: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_6__["moreComment"],
  createComment: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_6__["createComment"],
  deleteComment: _redux_comment_actions__WEBPACK_IMPORTED_MODULE_6__["deleteComment"],
  updateBalance: _redux_user_actions__WEBPACK_IMPORTED_MODULE_17__["updateBalance"]
};
/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_9__["connect"])(mapStates, mapDispatch)(FeedCard));

/***/ }),

/***/ "./src/components/post/post-slider.tsx":
/*!*********************************************!*\
  !*** ./src/components/post/post-slider.tsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FeedSlider; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_common_video_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/common/video-player */ "./src/components/common/video-player.tsx");
/* harmony import */ var _components_common_audio_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/common/audio-player */ "./src/components/common/audio-player.tsx");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index.less */ "./src/components/post/index.less");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_index_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;





class FeedSlider extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      feed
    } = this.props;
    const images = feed.files && feed.files.filter(f => f.type === 'feed-photo');
    const videos = feed.files && feed.files.filter(f => f.type === 'feed-video');
    const audios = feed.files && feed.files.filter(f => f.type === 'feed-audio');
    let processing = false;
    videos && videos.forEach(f => {
      if (f.status !== 'finished') {
        processing = true;
      }
    });
    audios && audios.forEach(f => {
      if (f.status !== 'finished') {
        processing = true;
      }
    });
    return __jsx("div", {
      className: feed.type === 'audio' ? 'feed-slider custom' : 'feed-slider'
    }, !processing && feed.files && feed.files.length && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, images && images.length > 0 && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Image"].PreviewGroup, null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Carousel"], {
      adaptiveHeight: true,
      effect: "fade",
      draggable: true,
      swipe: true,
      swipeToSlide: true,
      arrows: true,
      dots: false,
      infinite: true
    }, images.map(img => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Image"], {
      preview: {
        maskClosable: false
      },
      key: img._id,
      src: img.url,
      fallback: "/static/no-image.jpg",
      title: img.name,
      width: "100%",
      alt: "img"
    })))), videos && videos.length > 0 && videos.map(vid => {
      var _feed$thumbnail;

      return __jsx(_components_common_video_player__WEBPACK_IMPORTED_MODULE_2__["VideoPlayer"], {
        key: vid._id,
        autoplay: false,
        controls: true,
        playsinline: true,
        poster: feed === null || feed === void 0 ? void 0 : (_feed$thumbnail = feed.thumbnail) === null || _feed$thumbnail === void 0 ? void 0 : _feed$thumbnail.url,
        fluid: true,
        sources: [{
          src: vid.url,
          type: 'video/mp4'
        }]
      });
    }), audios && audios.length > 0 && audios.map(audio => __jsx(_components_common_audio_player__WEBPACK_IMPORTED_MODULE_3__["AudioPlayer"], {
      key: audio._id,
      source: audio === null || audio === void 0 ? void 0 : audio.url
    }))), processing && __jsx("div", {
      className: "proccessing"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], null), __jsx("p", null, "Your media is currently proccessing")));
  }

}

/***/ }),

/***/ "./src/components/post/scroll-list.tsx":
/*!*********************************************!*\
  !*** ./src/components/post/scroll-list.tsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ScrollListFeed; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-infinite-scroll-component */ "react-infinite-scroll-component");
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _post_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./post-card */ "./src/components/post/post-card.tsx");
/* harmony import */ var _grid_card__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./grid-card */ "./src/components/post/grid-card.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;





class ScrollListFeed extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      items = [],
      loadMore,
      onDelete,
      canLoadmore,
      loading = false,
      isGrid = false,
      notFoundText
    } = this.props;
    return __jsx(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default.a, {
      dataLength: items.length,
      hasMore: canLoadmore,
      loader: null,
      next: loadMore,
      endMessage: null,
      scrollThreshold: 0.8
    }, __jsx("div", {
      className: isGrid ? 'grid-view' : 'fixed-scroll'
    }, items.length > 0 && items.map(item => {
      if (isGrid) {
        return __jsx(_grid_card__WEBPACK_IMPORTED_MODULE_4__["FeedGridCard"], {
          feed: item,
          key: item._id
        });
      }

      return __jsx(_post_card__WEBPACK_IMPORTED_MODULE_3__["default"], {
        feed: item,
        key: item._id,
        onDelete: onDelete.bind(this)
      });
    })), !items.length && !loading && __jsx("div", {
      className: "main-container custom"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Alert"], {
      className: "text-center",
      message: notFoundText || 'No post was found',
      type: "info"
    })), loading && __jsx("div", {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], null)));
  }

}

/***/ }),

/***/ "./src/components/post/search-bar.tsx":
/*!********************************************!*\
  !*** ./src/components/post/search-bar.tsx ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SearchFeedBar; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index.less */ "./src/components/post/index.less");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_index_less__WEBPACK_IMPORTED_MODULE_4__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






const {
  RangePicker
} = antd__WEBPACK_IMPORTED_MODULE_1__["DatePicker"];
const {
  Search
} = antd__WEBPACK_IMPORTED_MODULE_1__["Input"];
class SearchFeedBar extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      q: '',
      isGrid: false,
      showSearch: false,
      showCalendar: false
    });

    _defineProperty(this, "onSearch", Object(lodash__WEBPACK_IMPORTED_MODULE_3__["debounce"])(async e => {
      const {
        handleSearch
      } = this.props;
      const value = e.target && e.target.value || '';
      handleSearch({
        q: value
      });
    }, 500));
  }

  componentDidUpdate(prevProps) {
    const {
      tab: prevTab
    } = prevProps;
    const {
      tab
    } = this.props;

    if (prevTab !== tab) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        q: ''
      });
    }
  }

  handleViewGrid(isGrid) {
    const {
      handleViewGrid: viewGrid
    } = this.props;
    this.setState({
      isGrid
    });
    viewGrid(isGrid);
  }

  searchDateRange(dates, dateStrings) {
    if (!dateStrings.length) return;
    const {
      handleSearch
    } = this.props;
    handleSearch({
      fromDate: dateStrings[0],
      toDate: dateStrings[1]
    });
  }

  render() {
    const {
      q,
      isGrid,
      showSearch,
      showCalendar
    } = this.state;
    const {
      searching,
      tab
    } = this.props;
    return __jsx("div", {
      className: "search-post-bar"
    }, showCalendar && __jsx(RangePicker, {
      onChange: this.searchDateRange.bind(this)
    }), showSearch && __jsx(Search, {
      placeholder: "Enter keyword here...",
      onChange: e => {
        var _e$target;

        e.persist();
        this.setState({
          q: (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) || ''
        });
        this.onSearch(e);
      },
      value: q,
      loading: searching,
      allowClear: true,
      enterButton: true
    }), __jsx("div", {
      className: "grid-btns"
    }, __jsx("a", {
      "aria-hidden": true,
      className: showSearch ? 'active' : '',
      onClick: () => this.setState({
        showSearch: !showSearch,
        showCalendar: false
      })
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["SearchOutlined"], null)), __jsx("a", {
      "aria-hidden": true,
      className: showCalendar ? 'active' : '',
      onClick: () => this.setState({
        showCalendar: !showCalendar,
        showSearch: false
      })
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CalendarOutlined"], null)), tab === 'post' && __jsx("a", {
      "aria-hidden": true,
      className: isGrid ? 'active' : '',
      onClick: this.handleViewGrid.bind(this, true)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["AppstoreOutlined"], null)), tab === 'post' && __jsx("a", {
      "aria-hidden": true,
      className: !isGrid ? 'active' : '',
      onClick: this.handleViewGrid.bind(this, false)
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["MenuOutlined"], null))));
  }

}

/***/ }),

/***/ "./src/components/product/performer-list-product.tsx":
/*!***********************************************************!*\
  !*** ./src/components/product/performer-list-product.tsx ***!
  \***********************************************************/
/*! exports provided: PerformerListProduct */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerListProduct", function() { return PerformerListProduct; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _product_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./product-card */ "./src/components/product/product-card.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class PerformerListProduct extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      products
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, products.length > 0 && products.map(product => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 12,
      sm: 12,
      md: 8,
      lg: 6,
      key: product._id
    }, __jsx(_product_card__WEBPACK_IMPORTED_MODULE_2__["ProductCard"], {
      product: product
    }))));
  }

}

/***/ }),

/***/ "./src/components/product/product-card.tsx":
/*!*************************************************!*\
  !*** ./src/components/product/product-card.tsx ***!
  \*************************************************/
/*! exports provided: ProductCard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductCard", function() { return ProductCard; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _product_less__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./product.less */ "./src/components/product/product.less");
/* harmony import */ var _product_less__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_product_less__WEBPACK_IMPORTED_MODULE_3__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




class ProductCard extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      product
    } = this.props;
    const image = (product === null || product === void 0 ? void 0 : product.image) || '/static/no-image.jpg';
    return __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
      href: {
        pathname: '/store',
        query: {
          id: product.slug || product._id
        }
      },
      as: `/store/${product.slug || product._id}`
    }, __jsx("a", null, __jsx("div", {
      className: "prd-card",
      style: {
        backgroundImage: `url(${image})`
      }
    }, __jsx("div", {
      className: "label-wrapper"
    }, product.price > 0 && __jsx("span", {
      className: "label-wrapper-price"
    }, "$", product.price.toFixed(2)), !product.stock && product.type === 'physical' && __jsx("div", {
      className: "label-wrapper-digital"
    }, "Out of stock!"), product.stock > 0 && product.type === 'physical' && __jsx("div", {
      className: "label-wrapper-digital"
    }, product.stock, ' ', "in stock"), product.type === 'digital' && __jsx("span", {
      className: "label-wrapper-digital"
    }, "Digital")), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
      title: product.name
    }, __jsx("div", {
      className: "prd-info"
    }, product.name)))));
  }

}

/***/ }),

/***/ "./src/components/product/product.less":
/*!*********************************************!*\
  !*** ./src/components/product/product.less ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/components/product/scroll-list-item.tsx":
/*!*****************************************************!*\
  !*** ./src/components/product/scroll-list-item.tsx ***!
  \*****************************************************/
/*! exports provided: ScrollListProduct */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollListProduct", function() { return ScrollListProduct; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-infinite-scroll-component */ "react-infinite-scroll-component");
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _performer_list_product__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./performer-list-product */ "./src/components/product/performer-list-product.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




class ScrollListProduct extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      items = [],
      loadMore,
      canLoadmore = false,
      loading = false,
      notFoundText
    } = this.props;
    return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default.a, {
      dataLength: items.length,
      hasMore: canLoadmore,
      loader: null,
      next: loadMore,
      endMessage: null,
      scrollThreshold: 0.9
    }, __jsx(_performer_list_product__WEBPACK_IMPORTED_MODULE_3__["PerformerListProduct"], {
      products: items
    }), !loading && !items.length && __jsx("div", {
      className: "main-container custom"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Alert"], {
      className: "text-center",
      type: "info",
      message: notFoundText || 'No product was found'
    })), loading && __jsx("div", {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], null))));
  }

}

/***/ }),

/***/ "./src/components/report/report-form.tsx":
/*!***********************************************!*\
  !*** ./src/components/report/report-form.tsx ***!
  \***********************************************/
/*! exports provided: ReportForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportForm", function() { return ReportForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


class ReportForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      onFinish,
      submiting = false,
      performer
    } = this.props;
    return __jsx("div", {
      className: "confirm-purchase-form"
    }, __jsx("div", {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      alt: "main-avt",
      src: (performer === null || performer === void 0 ? void 0 : performer.avatar) || '/static/no-avatar.png'
    })), __jsx("div", {
      className: "info-body"
    }, __jsx("div", {
      style: {
        marginBottom: '15px',
        width: '100%'
      }
    }, __jsx("p", null, "Report post"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], {
      name: "report-form",
      onFinish: onFinish.bind(this),
      labelCol: {
        span: 24
      },
      wrapperCol: {
        span: 24
      },
      className: "account-form",
      scrollToFirstError: true,
      initialValues: {
        title: 'Violent or repulsive content',
        description: ''
      }
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Title",
      name: "title",
      rules: [{
        required: true,
        message: 'Please select title'
      }],
      validateTrigger: ['onChange', 'onBlur']
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Violent or repulsive content",
      key: "Violent or repulsive content"
    }, "Violent or repulsive content"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Hateful or abusive content",
      key: "Hateful or abusive content"
    }, "Hateful or abusive content"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Harassment or bullying",
      key: "Harassment or bullying"
    }, "Harassment or bullying"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Harmful or dangerous acts",
      key: "Harmful or dangerous acts"
    }, "Harmful or dangerous acts"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Child abuse",
      key: "Child abuse"
    }, "Child abuse"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Promotes terrorism",
      key: "Promotes terrorism"
    }, "Promotes terrorism"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Spam or misleading",
      key: "Spam or misleading"
    }, "Spam or misleading"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Infringes my rights",
      key: "Infringes my rights"
    }, "Infringes my rights"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      value: "Others",
      key: "Others"
    }, "Others"))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "description",
      label: "Description"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"].TextArea, {
      placeholder: "Tell us why you report?",
      minLength: 20,
      showCount: true,
      maxLength: 100,
      rows: 3
    })), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      htmlType: "submit",
      loading: submiting,
      disabled: submiting
    }, "SUBMIT"))))));
  }

}

/***/ }),

/***/ "./src/components/user/avatar-upload.tsx":
/*!***********************************************!*\
  !*** ./src/components/user/avatar-upload.tsx ***!
  \***********************************************/
/*! exports provided: AvatarUpload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AvatarUpload", function() { return AvatarUpload; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_img_crop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd-img-crop */ "antd-img-crop");
/* harmony import */ var antd_img_crop__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_img_crop__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}

function beforeUpload(file) {
  // const isJpgOrPng = file.type === "image/jpeg" || file.type === "image/png";
  // if (!isJpgOrPng) {
  //   message.error("You can only upload JPG/PNG file!");
  // }
  const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_4__["getGlobalConfig"])();
  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);

  if (!isLt2M) {
    antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`Avatar must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);
  }

  return isLt2M;
}

class AvatarUpload extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      loading: false,
      imageUrl: '/static/no-avatar.png'
    });

    _defineProperty(this, "handleChange", info => {
      const {
        onUploaded
      } = this.props;

      if (info.file.status === 'uploading') {
        this.setState({
          loading: true
        });
        return;
      }

      if (info.file.status === 'done') {
        // Get this url from response in real world.
        getBase64(info.file.originFileObj, imageUrl => {
          this.setState({
            imageUrl,
            loading: false
          });
          onUploaded && onUploaded({
            response: info.file.response,
            base64: imageUrl
          });
        });
      }
    });

    _defineProperty(this, "onPreview", async file => {
      let src = file.url;

      if (!src) {
        src = await new Promise(resolve => {
          const reader = new FileReader();
          reader.readAsDataURL(file.originFileObj);

          reader.onload = () => resolve(reader.result);
        });
      }

      const image = new Image();
      image.src = src;
      const imgWindow = window.open(src);
      imgWindow.document.write(image.outerHTML);
    });
  }

  componentDidMount() {
    const {
      image
    } = this.props;

    if (image) {
      this.setState({
        imageUrl: image
      });
    }
  }

  render() {
    const {
      loading
    } = this.state;
    const {
      imageUrl
    } = this.state;
    const {
      headers,
      uploadUrl
    } = this.props;
    return __jsx(antd_img_crop__WEBPACK_IMPORTED_MODULE_3___default.a, {
      rotate: true,
      shape: "round",
      quality: 1,
      modalTitle: "Edit Avatar",
      modalWidth: 767
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      accept: "image/*",
      name: "avatar",
      listType: "picture-card",
      className: "avatar-uploader",
      showUploadList: false,
      action: uploadUrl,
      beforeUpload: beforeUpload,
      onChange: this.handleChange,
      onPreview: this.onPreview,
      headers: headers
    }, __jsx("img", {
      src: imageUrl,
      alt: "avatar",
      style: {
        width: '100%',
        height: '100%',
        maxWidth: 104,
        maxHeight: 104
      }
    }), loading ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LoadingOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CameraOutlined"], null)));
  }

}

/***/ }),

/***/ "./src/components/user/cover-upload.tsx":
/*!**********************************************!*\
  !*** ./src/components/user/cover-upload.tsx ***!
  \**********************************************/
/*! exports provided: CoverUpload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoverUpload", function() { return CoverUpload; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var antd_img_crop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! antd-img-crop */ "antd-img-crop");
/* harmony import */ var antd_img_crop__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(antd_img_crop__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







function getBase64(img, callback) {
  const reader = new FileReader();
  reader.addEventListener('load', () => callback(reader.result));
  reader.readAsDataURL(img);
}

function beforeUpload(file) {
  const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_4__["getGlobalConfig"])();
  const isLt2M = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);

  if (!isLt2M) {
    antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`Cover must be less than ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB`);
  }

  return isLt2M;
}

class CoverUpload extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      loading: false
    });

    _defineProperty(this, "handleChange", info => {
      const {
        onUploaded
      } = this.props;

      if (info.file.status === 'uploading') {
        this.setState({
          loading: true
        });
        return;
      }

      if (info.file.status === 'done') {
        // Get this url from response in real world.
        getBase64(info.file.originFileObj, imageUrl => {
          this.setState({
            loading: false
          });
          onUploaded && onUploaded({
            response: info.file.response,
            base64: imageUrl
          });
        });
      }
    });

    _defineProperty(this, "onPreview", async file => {
      let src = file.url;

      if (!src) {
        src = await new Promise(resolve => {
          const reader = new FileReader();
          reader.readAsDataURL(file.originFileObj);

          reader.onload = () => resolve(reader.result);
        });
      }

      const image = new Image();
      image.src = src;
      const imgWindow = window.open(src);
      imgWindow.document.write(image.outerHTML);
    });
  }

  render() {
    const {
      loading
    } = this.state;
    const {
      headers,
      uploadUrl,
      options
    } = this.props;
    return __jsx(antd_img_crop__WEBPACK_IMPORTED_MODULE_3___default.a, {
      aspect: 4.5 / 1,
      shape: "rect",
      quality: 1,
      modalTitle: "Edit cover image",
      modalWidth: 767
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      accept: "image/*",
      name: options.fieldName || 'file',
      listType: "picture-card",
      showUploadList: false,
      action: uploadUrl,
      beforeUpload: beforeUpload,
      onChange: this.handleChange,
      onPreview: this.onPreview,
      headers: headers
    }, loading ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["LoadingOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["EditOutlined"], null), ' ', "Edit cover"));
  }

}

/***/ }),

/***/ "./src/components/video/confirm-purchase.tsx":
/*!***************************************************!*\
  !*** ./src/components/video/confirm-purchase.tsx ***!
  \***************************************************/
/*! exports provided: PurchaseVideoForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseVideoForm", function() { return PurchaseVideoForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class PurchaseVideoForm extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    var _video$performer, _video$performer2, _video$performer3;

    const {
      onFinish,
      submiting = false,
      video
    } = this.props;
    return __jsx("div", {
      className: "text-center"
    }, __jsx("div", {
      className: "tip-performer"
    }, __jsx("img", {
      alt: "p-avt",
      src: (video === null || video === void 0 ? void 0 : (_video$performer = video.performer) === null || _video$performer === void 0 ? void 0 : _video$performer.avatar) || '/no-avatar.png',
      style: {
        width: '100px',
        borderRadius: '50%'
      }
    }), __jsx("div", null, video === null || video === void 0 ? void 0 : (_video$performer2 = video.performer) === null || _video$performer2 === void 0 ? void 0 : _video$performer2.name, __jsx("small", null, "@", video === null || video === void 0 ? void 0 : (_video$performer3 = video.performer) === null || _video$performer3 === void 0 ? void 0 : _video$performer3.username))), __jsx("div", {
      style: {
        margin: '20px 0'
      }
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      type: "primary",
      loading: submiting,
      disabled: submiting,
      onClick: onFinish.bind(this)
    }, "Unlock video for", ' ', "$", video.price.toFixed(2)));
  }

}

/***/ }),

/***/ "./src/components/video/form-upload.tsx":
/*!**********************************************!*\
  !*** ./src/components/video/form-upload.tsx ***!
  \**********************************************/
/*! exports provided: FormUploadVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormUploadVideo", function() { return FormUploadVideo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @services/index */ "./src/services/index.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "moment");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _components_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @components/common */ "./src/components/common/index.tsx");
/* harmony import */ var _services_config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @services/config */ "./src/services/config.ts");
/* harmony import */ var _video_less__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./video.less */ "./src/components/video/video.less");
/* harmony import */ var _video_less__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_video_less__WEBPACK_IMPORTED_MODULE_9__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











const layout = {
  labelCol: {
    span: 24
  },
  wrapperCol: {
    span: 24
  }
};
const {
  Option
} = antd__WEBPACK_IMPORTED_MODULE_1__["Select"];
const validateMessages = {
  required: 'This field is required!'
};
class FormUploadVideo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      previewThumbnail: null,
      previewTeaser: null,
      previewVideo: null,
      selectedThumbnail: null,
      selectedVideo: null,
      selectedTeaser: null,
      isSale: false,
      isSchedule: false,
      scheduledAt: moment__WEBPACK_IMPORTED_MODULE_4___default()(),
      performers: [],
      isShowPreview: false,
      previewUrl: '',
      previewType: '',
      removedTeaser: false,
      removedThumbnail: false
    });

    _defineProperty(this, "getPerformers", Object(lodash__WEBPACK_IMPORTED_MODULE_5__["debounce"])(async (q, performerIds) => {
      try {
        const resp = await (await _services_index__WEBPACK_IMPORTED_MODULE_3__["performerService"].search({
          q,
          performerIds: performerIds || '',
          limit: 500
        })).data;
        const performers = resp.data || [];
        this.setState({
          performers
        });
      } catch (e) {
        const err = await e;
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error((err === null || err === void 0 ? void 0 : err.message) || 'Error occured');
      }
    }, 500));

    _defineProperty(this, "previewModal", () => {
      const {
        isShowPreview,
        previewUrl,
        previewType
      } = this.state;
      return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Modal"], {
        width: 767,
        footer: null,
        onOk: () => this.setState({
          isShowPreview: false
        }),
        onCancel: () => this.setState({
          isShowPreview: false
        }),
        visible: isShowPreview,
        destroyOnClose: true
      }, ['teaser', 'video'].includes(previewType) && __jsx(_components_common__WEBPACK_IMPORTED_MODULE_7__["VideoPlayer"], {
        autoplay: true,
        controls: true,
        playsinline: true,
        fluid: true,
        sources: [{
          src: previewUrl,
          type: 'video/mp4'
        }]
      }), previewType === 'thumbnail' && __jsx("img", {
        src: previewUrl,
        alt: "thumbnail",
        width: "100%",
        style: {
          borderRadius: 5
        }
      }));
    });
  }

  componentDidMount() {
    const {
      video,
      user
    } = this.props;

    if (video) {
      this.setState({
        previewThumbnail: video === null || video === void 0 ? void 0 : video.thumbnail,
        previewVideo: video === null || video === void 0 ? void 0 : video.video,
        previewTeaser: video === null || video === void 0 ? void 0 : video.teaser,
        isSale: video.isSale,
        isSchedule: video.isSchedule,
        scheduledAt: video.scheduledAt ? moment__WEBPACK_IMPORTED_MODULE_4___default()(video.scheduledAt) : moment__WEBPACK_IMPORTED_MODULE_4___default()()
      });
    }

    this.getPerformers('', (video === null || video === void 0 ? void 0 : video.participantIds) || [user._id]);
  }

  async handleRemovefile(type) {
    if (!window.confirm('Confirm to remove file!')) return;
    const {
      video
    } = this.props;

    try {
      await _services_index__WEBPACK_IMPORTED_MODULE_3__["videoService"].deleteFile(video._id, type);
      type === 'teaser' && this.setState({
        removedTeaser: true
      });
      type === 'thumbnail' && this.setState({
        removedThumbnail: true
      });
    } catch (e) {
      const err = await e;
      antd__WEBPACK_IMPORTED_MODULE_1__["message"].error((err === null || err === void 0 ? void 0 : err.message) || 'Error occured, please try again later');
    }
  }

  beforeUpload(file, field) {
    const {
      beforeUpload: beforeUploadHandler
    } = this.props;
    const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_8__["getGlobalConfig"])();

    if (field === 'thumbnail') {
      const isValid = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5);

      if (!isValid) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB or below`);
        return isValid;
      }

      this.setState({
        selectedThumbnail: file
      });
    }

    if (field === 'teaser') {
      const isValid = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_TEASER || 200);

      if (!isValid) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_TEASER || 200}MB or below`);
        return isValid;
      }

      this.setState({
        selectedTeaser: file
      });
    }

    if (field === 'video') {
      const isValid = file.size / 1024 / 1024 < (config.NEXT_PUBLIC_MAX_SIZE_VIDEO || 2000);

      if (!isValid) {
        antd__WEBPACK_IMPORTED_MODULE_1__["message"].error(`File is too large please provide an file ${config.NEXT_PUBLIC_MAX_SIZE_VIDEO || 2000}MB or below`);
        return isValid;
      }

      this.setState({
        selectedVideo: file
      });
    }

    return beforeUploadHandler(file, field);
  }

  render() {
    const {
      video,
      submit,
      uploading,
      uploadPercentage,
      user
    } = this.props;
    const {
      previewThumbnail,
      previewTeaser,
      previewVideo,
      performers,
      isSale,
      isSchedule,
      scheduledAt,
      selectedThumbnail,
      selectedTeaser,
      selectedVideo,
      removedTeaser,
      removedThumbnail
    } = this.state;
    const config = Object(_services_config__WEBPACK_IMPORTED_MODULE_8__["getGlobalConfig"])();
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"], _extends({}, layout, {
      onFinish: values => {
        const data = values;

        if (isSchedule) {
          data.scheduledAt = scheduledAt;
        }

        if (values.tags && values.tags.length) {
          data.tags = values.tags.map(tag => tag.replace(/[^a-zA-Z0-9 ]/g, '_'));
        }

        submit(data);
      },
      onFinishFailed: () => antd__WEBPACK_IMPORTED_MODULE_1__["message"].error('Please complete the required fields'),
      name: "form-upload",
      validateMessages: validateMessages,
      initialValues: video || {
        title: '',
        price: 9.99,
        description: '',
        tags: [],
        isSale: false,
        participantIds: [user._id],
        isSchedule: false,
        status: 'active'
      },
      scrollToFirstError: true,
      className: "account-form"
    }), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 24,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Title",
      name: "title",
      rules: [{
        required: true,
        message: 'Please input title of video!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 24,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Participants",
      name: "participantIds"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      mode: "multiple",
      style: {
        width: '100%'
      },
      showSearch: true,
      placeholder: "Search performers here",
      optionFilterProp: "children",
      onSearch: this.getPerformers.bind(this),
      loading: uploading,
      defaultValue: (video === null || video === void 0 ? void 0 : video.participantIds) || []
    }, performers && performers.length > 0 && performers.map(p => __jsx(Option, {
      key: p._id,
      value: p._id
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Avatar"], {
      src: (p === null || p === void 0 ? void 0 : p.avatar) || '/static/no-avatar.png'
    }), ' ', (p === null || p === void 0 ? void 0 : p.name) || (p === null || p === void 0 ? void 0 : p.username) || 'N/A'))))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Tags",
      name: "tags"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      mode: "tags",
      style: {
        width: '100%'
      },
      size: "middle",
      showArrow: false,
      defaultValue: (video === null || video === void 0 ? void 0 : video.tags) || []
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "status",
      label: "Status",
      rules: [{
        required: true,
        message: 'Please select status!'
      }]
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"], null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: "active",
      value: "active"
    }, "Active"), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Select"].Option, {
      key: "inactive",
      value: "inactive"
    }, "Inactive")))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "isSale",
      label: "For sale?"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Switch"], {
      checkedChildren: "Pay per view",
      unCheckedChildren: "Subscribe to view",
      checked: isSale,
      onChange: val => this.setState({
        isSale: val
      })
    })), isSale && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "price",
      label: "Price"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["InputNumber"], {
      style: {
        width: '100%'
      },
      min: 1
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      md: 12,
      xs: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "isSchedule",
      label: "Scheduled?"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Switch"], {
      checkedChildren: "Scheduled",
      unCheckedChildren: "Not scheduled",
      checked: isSchedule,
      onChange: val => this.setState({
        isSchedule: val
      })
    })), isSchedule && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Scheduled for"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["DatePicker"], {
      style: {
        width: '100%'
      },
      disabledDate: currentDate => currentDate && currentDate < moment__WEBPACK_IMPORTED_MODULE_4___default()().endOf('day'),
      defaultValue: scheduledAt,
      onChange: val => this.setState({
        scheduledAt: val
      })
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      span: 24
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      name: "description",
      label: "Description"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Input"].TextArea, {
      rows: 3
    }))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 24,
      md: 8
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Video",
      className: "upload-bl",
      help: previewVideo && __jsx("a", {
        "aria-hidden": true,
        onClick: () => this.setState({
          isShowPreview: true,
          previewUrl: previewVideo === null || previewVideo === void 0 ? void 0 : previewVideo.url,
          previewType: 'video'
        })
      }, (previewVideo === null || previewVideo === void 0 ? void 0 : previewVideo.name) || 'Click here to preview') || selectedVideo && __jsx("a", null, selectedVideo.name) || `Video file is ${config.NEXT_PUBLIC_MAX_SIZE_VIDEO || 2048}MB or below`
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      customRequest: () => false,
      listType: "picture-card",
      className: "avatar-uploader",
      accept: "video/*",
      multiple: false,
      showUploadList: false,
      disabled: uploading,
      beforeUpload: file => this.beforeUpload(file, 'video')
    }, selectedVideo ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FileDoneOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["VideoCameraAddOutlined"], null)))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 24,
      md: 8
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      label: "Teaser",
      className: "upload-bl",
      help: previewTeaser && !removedTeaser && __jsx("a", {
        "aria-hidden": true,
        onClick: () => this.setState({
          isShowPreview: true,
          previewUrl: previewTeaser === null || previewTeaser === void 0 ? void 0 : previewTeaser.url,
          previewType: 'teaser'
        })
      }, (previewTeaser === null || previewTeaser === void 0 ? void 0 : previewTeaser.name) || 'Click here to preview') || selectedTeaser && __jsx("a", null, selectedTeaser.name) || `Teaser is ${config.NEXT_PUBLIC_MAX_SIZE_TEASER || 200}MB or below`
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      customRequest: () => false,
      listType: "picture-card",
      className: "avatar-uploader",
      accept: "video/*",
      multiple: false,
      showUploadList: false,
      disabled: uploading,
      beforeUpload: file => this.beforeUpload(file, 'teaser')
    }, selectedTeaser ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FileDoneOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["VideoCameraAddOutlined"], null)), (video === null || video === void 0 ? void 0 : video.teaserId) && !removedTeaser && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "remove-btn",
      type: "primary",
      onClick: () => this.handleRemovefile('teaser')
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["DeleteOutlined"], null)))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 24,
      md: 8
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      className: "upload-bl",
      label: "Thumbnail",
      help: previewThumbnail && !removedThumbnail && __jsx("a", {
        "aria-hidden": true,
        onClick: () => this.setState({
          isShowPreview: true,
          previewUrl: previewThumbnail === null || previewThumbnail === void 0 ? void 0 : previewThumbnail.url,
          previewType: 'thumbnail'
        })
      }, (previewThumbnail === null || previewThumbnail === void 0 ? void 0 : previewThumbnail.name) || 'Click here to preview') || selectedThumbnail && __jsx("a", null, selectedThumbnail.name) || `Thumbnail is ${config.NEXT_PUBLIC_MAX_SIZE_IMAGE || 5}MB or below`
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Upload"], {
      listType: "picture-card",
      className: "avatar-uploader",
      accept: "image/*",
      multiple: false,
      showUploadList: false,
      disabled: uploading,
      beforeUpload: file => this.beforeUpload(file, 'thumbnail')
    }, selectedThumbnail ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["FileDoneOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["CameraOutlined"], null)), (video === null || video === void 0 ? void 0 : video.thumbnailId) && !removedThumbnail && __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "remove-btn",
      type: "primary",
      onClick: () => this.handleRemovefile('thumbnail')
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["DeleteOutlined"], null))))), uploadPercentage ? __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Progress"], {
      percent: Math.round(uploadPercentage)
    }) : null, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Form"].Item, {
      wrapperCol: _objectSpread(_objectSpread({}, layout.wrapperCol), {}, {
        offset: 4
      })
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "primary",
      htmlType: "submit",
      loading: uploading,
      disabled: uploading
    }, video ? 'Update' : 'Upload'), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      className: "secondary",
      onClick: () => next_router__WEBPACK_IMPORTED_MODULE_6___default.a.back(),
      disabled: uploading
    }, "Back")), this.previewModal());
  }

}

/***/ }),

/***/ "./src/components/video/index.tsx":
/*!****************************************!*\
  !*** ./src/components/video/index.tsx ***!
  \****************************************/
/*! exports provided: FormUploadVideo, TableListVideo, PerformerListVideo, VideoCard, RelatedListVideo, ThumbnailVideo, ScrollListVideo, PurchaseVideoForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _form_upload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form-upload */ "./src/components/video/form-upload.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FormUploadVideo", function() { return _form_upload__WEBPACK_IMPORTED_MODULE_0__["FormUploadVideo"]; });

/* harmony import */ var _table_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./table-list */ "./src/components/video/table-list.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableListVideo", function() { return _table_list__WEBPACK_IMPORTED_MODULE_1__["TableListVideo"]; });

/* harmony import */ var _performer_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./performer-list */ "./src/components/video/performer-list.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerListVideo", function() { return _performer_list__WEBPACK_IMPORTED_MODULE_2__["PerformerListVideo"]; });

/* harmony import */ var _video_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./video-card */ "./src/components/video/video-card.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VideoCard", function() { return _video_card__WEBPACK_IMPORTED_MODULE_3__["VideoCard"]; });

/* harmony import */ var _related_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./related-list */ "./src/components/video/related-list.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RelatedListVideo", function() { return _related_list__WEBPACK_IMPORTED_MODULE_4__["RelatedListVideo"]; });

/* harmony import */ var _thumbnail_video__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./thumbnail-video */ "./src/components/video/thumbnail-video.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ThumbnailVideo", function() { return _thumbnail_video__WEBPACK_IMPORTED_MODULE_5__["ThumbnailVideo"]; });

/* harmony import */ var _scroll_list_item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scroll-list-item */ "./src/components/video/scroll-list-item.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScrollListVideo", function() { return _scroll_list_item__WEBPACK_IMPORTED_MODULE_6__["ScrollListVideo"]; });

/* harmony import */ var _confirm_purchase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./confirm-purchase */ "./src/components/video/confirm-purchase.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PurchaseVideoForm", function() { return _confirm_purchase__WEBPACK_IMPORTED_MODULE_7__["PurchaseVideoForm"]; });










/***/ }),

/***/ "./src/components/video/performer-list.tsx":
/*!*************************************************!*\
  !*** ./src/components/video/performer-list.tsx ***!
  \*************************************************/
/*! exports provided: PerformerListVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerListVideo", function() { return PerformerListVideo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! . */ "./src/components/video/index.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class PerformerListVideo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      videos
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, videos.length > 0 && videos.map(video => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 12,
      sm: 12,
      md: 8,
      lg: 6,
      key: video._id
    }, __jsx(___WEBPACK_IMPORTED_MODULE_2__["VideoCard"], {
      video: video
    }))));
  }

}

/***/ }),

/***/ "./src/components/video/related-list.tsx":
/*!***********************************************!*\
  !*** ./src/components/video/related-list.tsx ***!
  \***********************************************/
/*! exports provided: RelatedListVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelatedListVideo", function() { return RelatedListVideo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _video_card__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./video-card */ "./src/components/video/video-card.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



class RelatedListVideo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      videos
    } = this.props;
    return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Row"], null, videos.length > 0 ? videos.map(video => __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Col"], {
      xs: 12,
      sm: 12,
      md: 6,
      lg: 6,
      key: video._id
    }, __jsx(_video_card__WEBPACK_IMPORTED_MODULE_2__["VideoCard"], {
      video: video
    }))) : __jsx("p", null, "No video was found"));
  }

}

/***/ }),

/***/ "./src/components/video/scroll-list-item.tsx":
/*!***************************************************!*\
  !*** ./src/components/video/scroll-list-item.tsx ***!
  \***************************************************/
/*! exports provided: ScrollListVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollListVideo", function() { return ScrollListVideo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-infinite-scroll-component */ "react-infinite-scroll-component");
/* harmony import */ var react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_video__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/video */ "./src/components/video/index.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




class ScrollListVideo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      items,
      loadMore,
      loading,
      canLoadmore,
      notFoundText
    } = this.props;
    return __jsx(react_infinite_scroll_component__WEBPACK_IMPORTED_MODULE_2___default.a, {
      dataLength: items.length,
      hasMore: canLoadmore,
      loader: null,
      next: loadMore,
      endMessage: null,
      scrollThreshold: 0.9
    }, __jsx(_components_video__WEBPACK_IMPORTED_MODULE_3__["PerformerListVideo"], {
      videos: items
    }), !items.length && !loading && __jsx("div", {
      className: "main-container custom"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Alert"], {
      className: "text-center",
      message: notFoundText || 'No video was found',
      type: "info"
    })), loading && __jsx("div", {
      className: "text-center"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Spin"], null)));
  }

}

/***/ }),

/***/ "./src/components/video/table-list.tsx":
/*!*********************************************!*\
  !*** ./src/components/video/table-list.tsx ***!
  \*********************************************/
/*! exports provided: TableListVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableListVideo", function() { return TableListVideo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _lib_date__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/date */ "./src/lib/date.ts");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _thumbnail_video__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./thumbnail-video */ "./src/components/video/thumbnail-video.tsx");

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;






class TableListVideo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      dataSource,
      rowKey,
      loading,
      pagination,
      onChange,
      onDelete
    } = this.props;
    const columns = [{
      title: 'Thumbnail',

      render(record) {
        return __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: {
            pathname: '/video',
            query: {
              id: record.slug || record._id
            }
          },
          as: `/video/${record.slug || record._id}`
        }, __jsx("a", null, __jsx(_thumbnail_video__WEBPACK_IMPORTED_MODULE_5__["ThumbnailVideo"], {
          video: record
        })));
      }

    }, {
      title: 'Title',
      dataIndex: 'title',

      render(title, record) {
        return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tooltip"], {
          title: title
        }, __jsx("div", {
          style: {
            maxWidth: 150,
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap'
          }
        }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
          href: {
            pathname: '/video',
            query: {
              id: record.slug || record._id
            }
          },
          as: `/video/${record.slug || record._id}`
        }, __jsx("a", null, title))));
      }

    }, {
      title: 'Sale?',
      dataIndex: 'isSale',

      render(isSale) {
        switch (isSale) {
          case true:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "green"
            }, "Y");

          case false:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "red"
            }, "N");

          default:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "orange"
            }, isSale);
        }
      }

    }, {
      title: 'Schedule?',
      dataIndex: 'isSchedule',

      render(isSchedule) {
        switch (isSchedule) {
          case true:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "green"
            }, "Y");

          case false:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "red"
            }, "N");

          default:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "orange"
            }, isSchedule);
        }
      }

    }, {
      title: 'Status',
      dataIndex: 'status',

      render(status) {
        switch (status) {
          case 'active':
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "success"
            }, "Active");

          case 'inactive':
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "orange"
            }, "Inactive");

          default:
            return __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Tag"], {
              color: "red"
            }, status);
        }
      }

    }, {
      title: 'Updated On',
      dataIndex: 'updatedAt',
      sorter: true,

      render(date) {
        return __jsx("span", null, Object(_lib_date__WEBPACK_IMPORTED_MODULE_3__["formatDate"])(date));
      }

    }, {
      title: 'Action',
      dataIndex: '_id',
      render: id => __jsx("div", {
        style: {
          whiteSpace: 'nowrap'
        }
      }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
        className: "info"
      }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_4___default.a, {
        href: {
          pathname: '/model/my-video/update',
          query: {
            id
          }
        },
        as: `/model/my-video/update?id=${id}`
      }, __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["EditOutlined"], null)))), __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Button"], {
        onClick: onDelete.bind(this, id),
        className: "danger"
      }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_2__["DeleteOutlined"], null)))
    }];
    return __jsx("div", {
      className: "table-responsive"
    }, __jsx(antd__WEBPACK_IMPORTED_MODULE_1__["Table"], {
      dataSource: dataSource,
      columns: columns,
      rowKey: rowKey,
      loading: loading,
      pagination: pagination,
      onChange: onChange.bind(this)
    }));
  }

}

/***/ }),

/***/ "./src/components/video/thumbnail-video.tsx":
/*!**************************************************!*\
  !*** ./src/components/video/thumbnail-video.tsx ***!
  \**************************************************/
/*! exports provided: ThumbnailVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThumbnailVideo", function() { return ThumbnailVideo; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _video_less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./video.less */ "./src/components/video/video.less");
/* harmony import */ var _video_less__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_video_less__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


class ThumbnailVideo extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  render() {
    const {
      video: videoProp,
      style
    } = this.props;
    const {
      thumbnail,
      video,
      teaser
    } = videoProp;
    const url = (thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.thumbnails) && (thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.thumbnails[0]) || (teaser === null || teaser === void 0 ? void 0 : teaser.thumbnails) && (teaser === null || teaser === void 0 ? void 0 : teaser.thumbnails[0]) || (video === null || video === void 0 ? void 0 : video.thumbnails) && (video === null || video === void 0 ? void 0 : video.thumbnails[0]) || '/static/no-image.jpg';
    return __jsx("img", {
      alt: "thumbnail",
      src: url,
      style: style || {
        width: '50px'
      }
    });
  }

}

/***/ }),

/***/ "./src/components/video/video-card.tsx":
/*!*********************************************!*\
  !*** ./src/components/video/video-card.tsx ***!
  \*********************************************/
/*! exports provided: VideoCard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoCard", function() { return VideoCard; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! antd */ "antd");
/* harmony import */ var antd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(antd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _lib_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/index */ "./src/lib/index.ts");
/* harmony import */ var _video_less__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./video.less */ "./src/components/video/video.less");
/* harmony import */ var _video_less__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_video_less__WEBPACK_IMPORTED_MODULE_5__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class VideoCard extends react__WEBPACK_IMPORTED_MODULE_0__["PureComponent"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isHovered: false
    });
  }

  render() {
    var _video$thumbnail, _video$thumbnail2, _video$thumbnail3, _video$teaser, _video$teaser2, _video$video, _video$video2, _video$stats, _video$stats2, _video$video3;

    const {
      video
    } = this.props;
    const {
      isHovered
    } = this.state;
    const canView = !video.isSale && video.isSubscribed || video.isSale && video.isBought;
    const thumbUrl = (canView ? video === null || video === void 0 ? void 0 : (_video$thumbnail = video.thumbnail) === null || _video$thumbnail === void 0 ? void 0 : _video$thumbnail.url : (video === null || video === void 0 ? void 0 : (_video$thumbnail2 = video.thumbnail) === null || _video$thumbnail2 === void 0 ? void 0 : _video$thumbnail2.thumbnails) && (video === null || video === void 0 ? void 0 : (_video$thumbnail3 = video.thumbnail) === null || _video$thumbnail3 === void 0 ? void 0 : _video$thumbnail3.thumbnails[0])) || (video === null || video === void 0 ? void 0 : (_video$teaser = video.teaser) === null || _video$teaser === void 0 ? void 0 : _video$teaser.thumbnails) && (video === null || video === void 0 ? void 0 : (_video$teaser2 = video.teaser) === null || _video$teaser2 === void 0 ? void 0 : _video$teaser2.thumbnails[0]) || (video === null || video === void 0 ? void 0 : (_video$video = video.video) === null || _video$video === void 0 ? void 0 : _video$video.thumbnails) && (video === null || video === void 0 ? void 0 : (_video$video2 = video.video) === null || _video$video2 === void 0 ? void 0 : _video$video2.thumbnails[0]) || '/static/no-image.jpg';
    return __jsx(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
      href: {
        pathname: '/video',
        query: {
          id: video.slug || video._id
        }
      },
      as: `/video/${video.slug || video._id}`
    }, __jsx("div", {
      className: "vid-card",
      onMouseEnter: () => this.setState({
        isHovered: true
      }),
      onMouseLeave: () => this.setState({
        isHovered: false
      })
    }, video.isSale && video.price > 0 && __jsx("span", {
      className: "vid-price"
    }, __jsx("div", {
      className: "label-price"
    }, "$", (video.price || 0).toFixed(2))), video.isSchedule && __jsx("span", {
      className: "vid-calendar"
    }, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["CalendarOutlined"], null)), __jsx("div", {
      className: "vid-thumb"
    }, __jsx("div", {
      className: "card-bg",
      style: {
        backgroundImage: `url(${thumbUrl})`,
        filter: !canView ? 'blur(20px)' : 'blur(0px)'
      }
    }), __jsx("div", {
      className: "vid-stats"
    }, __jsx("span", null, __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["EyeOutlined"], null), ' ', Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["shortenLargeNumber"])((video === null || video === void 0 ? void 0 : (_video$stats = video.stats) === null || _video$stats === void 0 ? void 0 : _video$stats.views) || 0)), __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["LikeOutlined"], null), ' ', Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["shortenLargeNumber"])((video === null || video === void 0 ? void 0 : (_video$stats2 = video.stats) === null || _video$stats2 === void 0 ? void 0 : _video$stats2.likes) || 0))), __jsx("a", null, __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["HourglassOutlined"], null), ' ', Object(_lib_index__WEBPACK_IMPORTED_MODULE_4__["videoDuration"])((video === null || video === void 0 ? void 0 : (_video$video3 = video.video) === null || _video$video3 === void 0 ? void 0 : _video$video3.duration) || 0))), __jsx("div", {
      className: "lock-middle"
    }, canView || isHovered ? __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["UnlockOutlined"], null) : __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__["LockOutlined"], null))), __jsx(antd__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
      title: video.title
    }, __jsx("div", {
      className: "vid-info"
    }, video.title))));
  }

}

/***/ }),

/***/ "./src/components/video/video.less":
/*!*****************************************!*\
  !*** ./src/components/video/video.less ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/icons/index.tsx":
/*!*****************************!*\
  !*** ./src/icons/index.tsx ***!
  \*****************************/
/*! exports provided: WalletSvg, ModelIcon, HomeIcon, PlusIcon, MessageIcon, UserIcon, TickIcon, ShareIcon, LiveIcon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WalletSvg", function() { return WalletSvg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModelIcon", function() { return ModelIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomeIcon", function() { return HomeIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlusIcon", function() { return PlusIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageIcon", function() { return MessageIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserIcon", function() { return UserIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TickIcon", function() { return TickIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShareIcon", function() { return ShareIcon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiveIcon", function() { return LiveIcon; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ant-design/icons */ "@ant-design/icons");
/* harmony import */ var _ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1__);

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

/* eslint-disable react/require-default-props */


const ModelSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 28 28"
}, __jsx("path", {
  id: "call-center-agent",
  d: "M51.14,20.906a9.759,9.759,0,0,0,1.414-5.048V9.672c-.536-12.9-18.913-12.891-19.444,0v6.187a9.759,9.759,0,0,0,1.414,5.048,8.085,8.085,0,0,0-4.949,7.443V30H56.089V28.35A8.085,8.085,0,0,0,51.14,20.906ZM34.877,9.672c.438-10.555,15.475-10.547,15.909,0v6.187a7.859,7.859,0,0,1-1.417,4.533,8.09,8.09,0,0,0-1.352-.114h-1.65v-2a6.184,6.184,0,0,0,2.651-5.074V10.6l-.787-.087a7.06,7.06,0,0,1-6.209-6L41.87,3.468l-1,.335a6.18,6.18,0,0,0-4.223,5.868v3.535a6.213,6.213,0,0,0,.063.884H34.877V9.672Zm7.954,7.954A4.415,4.415,0,0,1,39.3,15.858h0a2.55,2.55,0,0,1-.537-.841c-.3-.867-.261-.927-.261-.927h0a4.422,4.422,0,0,1-.089-.884V9.672a4.415,4.415,0,0,1,2.1-3.766,8.832,8.832,0,0,0,6.735,6.24v1.061A4.424,4.424,0,0,1,42.831,17.626Zm0,1.768a6.168,6.168,0,0,0,1.768-.258v1.142a1.768,1.768,0,0,1-3.535,0V19.136A6.166,6.166,0,0,0,42.831,19.394ZM39.96,26.762,37.908,24.71l1.712-1.642Zm1.477-3.236a3.556,3.556,0,0,0,2.787,0l-.431,4.705H41.87Zm4.6-.458,1.714,1.642L45.7,26.763Zm-11.164-7.21h2.365A6.229,6.229,0,0,0,39.3,18.281v2h-1.65a8.09,8.09,0,0,0-1.352.114A7.859,7.859,0,0,1,34.877,15.858Zm2.769,6.187h.487l-2.752,2.638,3.549,3.549H31.343A6.312,6.312,0,0,1,37.646,22.045Zm9.087,6.187,3.549-3.549-2.753-2.638h.488a6.312,6.312,0,0,1,6.3,6.187Z",
  transform: "translate(-26.574 1)"
}));

const HomeSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 28 28"
}, __jsx("path", {
  d: "M29,13.82a1,1,0,0,0-.37-.77l-12-9.82a1,1,0,0,0-1.26,0l-12,9.82a1,1,0,0,0-.37.77,1,1,0,0,0,1,1,.94.94,0,0,0,.63-.23L6,13.47V24.2A2.81,2.81,0,0,0,8.8,27h2.9a2.81,2.81,0,0,0,2.8-2.8V22.8a.8.8,0,0,1,.8-.8h1.4a.8.8,0,0,1,.8.8v1.4A2.81,2.81,0,0,0,20.3,27h2.9A2.81,2.81,0,0,0,26,24.2V13.47l1.37,1.12a.94.94,0,0,0,.63.23A1,1,0,0,0,29,13.82ZM24,24.2a.8.8,0,0,1-.8.8H20.3a.8.8,0,0,1-.8-.8V22.8A2.81,2.81,0,0,0,16.7,20H15.3a2.81,2.81,0,0,0-2.8,2.8v1.4a.8.8,0,0,1-.8.8H8.8a.8.8,0,0,1-.8-.8V11.84l8-6.55,8,6.55Z"
}));

const PlusSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 28 28"
}, __jsx("path", {
  d: "M21,15H17V11a1,1,0,0,0-2,0v4H11a1,1,0,0,0,0,2h4v4a1,1,0,0,0,2,0V17h4a1,1,0,0,0,0-2ZM23,5H9A4,4,0,0,0,5,9V23a4,4,0,0,0,4,4H23a4,4,0,0,0,4-4V9A4,4,0,0,0,23,5Zm2,18a2,2,0,0,1-2,2H9a2,2,0,0,1-2-2V9A2,2,0,0,1,9,7H23a2,2,0,0,1,2,2Z"
}));

const MessageSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 30 30"
}, __jsx("path", {
  d: "M21,5H11a6,6,0,0,0-6,6V28.5a1,1,0,0,0,.81,1l.19,0a1,1,0,0,0,.93-.63A3,3,0,0,1,9.69,27H21a6,6,0,0,0,6-6V11A6,6,0,0,0,21,5Zm4,16a4,4,0,0,1-4,4H9.69A4.9,4.9,0,0,0,7,25.79V11a4,4,0,0,1,4-4H21a4,4,0,0,1,4,4Zm-6-8H13a1,1,0,0,0,0,2h6a1,1,0,0,0,0-2Zm-3,4H13a1,1,0,0,0,0,2h3a1,1,0,0,0,0-2Z"
}));

const UserSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 28 28"
}, __jsx("path", {
  d: "M16,4A12,12,0,1,0,28,16,12,12,0,0,0,16,4Zm0,22a10.17,10.17,0,0,1-2.66-.37,3,3,0,0,1,5.32,0A10.17,10.17,0,0,1,16,26Zm4.52-1.09a5,5,0,0,0-9,0,10,10,0,1,1,9,0ZM16,12a4,4,0,1,0,4,4A4,4,0,0,0,16,12Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,16,18Z"
}));

const TickSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 25 25"
}, __jsx("path", {
  d: "M23,12a1,1,0,0,0-.28-.7l-1.15-1.19a1,1,0,0,0-.72-.3,1,1,0,0,0-1,1,1,1,0,0,0,.28.69l.48.5-.69.72a4,4,0,0,0-1.14,2.78,3.43,3.43,0,0,0,0,.56l.14,1-1,.17a4,4,0,0,0-2.85,2.07l-.47.88-.91-.44a3.94,3.94,0,0,0-1.75-.4,4.15,4.15,0,0,0-1.76.4l-.9.44-.47-.88A4,4,0,0,0,6,17.23l-1-.17.14-1a3.39,3.39,0,0,0,0-.55,4,4,0,0,0-1.13-2.78L3.39,12l.69-.72A4,4,0,0,0,5.22,8.5a3.43,3.43,0,0,0,0-.56L5,6.94l1-.17A4,4,0,0,0,8.87,4.7l.47-.88.91.44a3.94,3.94,0,0,0,1.75.4,4.15,4.15,0,0,0,1.76-.4l.9-.44.46.86a1,1,0,0,0,1.93-.39,1,1,0,0,0-.18-.57L16,2a1,1,0,0,0-.88-.53,1,1,0,0,0-.44.1l-1.76.87a2.14,2.14,0,0,1-.89.2,2.06,2.06,0,0,1-.88-.2L9.35,1.59A1,1,0,0,0,8,2L7.11,3.76a2,2,0,0,1-1.43,1l-1.94.34a1,1,0,0,0-.83,1,.66.66,0,0,0,0,.14l.28,2a2.64,2.64,0,0,1,0,.28,2,2,0,0,1-.57,1.39L1.28,11.31a1,1,0,0,0,0,1.38l1.38,1.43a2,2,0,0,1,.56,1.38,2.64,2.64,0,0,1,0,.28l-.28,2a.66.66,0,0,0,0,.14,1,1,0,0,0,.83,1l1.94.34a2,2,0,0,1,1.43,1L8,22a1,1,0,0,0,1.32.43l1.76-.87a2.14,2.14,0,0,1,.89-.2,2.06,2.06,0,0,1,.88.2l1.77.87a1,1,0,0,0,.44.1A1,1,0,0,0,16,22l.92-1.74a2,2,0,0,1,1.43-1l1.94-.34a1,1,0,0,0,.83-1,.66.66,0,0,0,0-.14l-.28-2a2.64,2.64,0,0,1,0-.28,2,2,0,0,1,.57-1.39l1.37-1.42A1,1,0,0,0,23,12ZM9.71,10.29A1,1,0,0,0,9,10a1,1,0,0,0-1,1,1,1,0,0,0,.29.71L12,15.41l9.71-9.7A1,1,0,0,0,22,5a1,1,0,0,0-1-1,1,1,0,0,0-.71.29L12,12.59Z"
}));

const ShareSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  fill: "currentColor",
  viewBox: "0 0 24 24"
}, __jsx("path", {
  d: "M20 14a1 1 0 00-1 1v3a1 1 0 01-1 1H6a1 1 0 01-1-1V6a1 1 0 011-1h4a1 1 0 000-2H6a3 3 0 00-3 3v12a3 3 0 003 3h12a3 3 0 003-3v-3a1 1 0 00-1-1zm-1.41-8H17a9 9 0 00-9 9 1 1 0 002 0 7 7 0 017-7h1.59l-2.3 2.29A1 1 0 0016 11a1 1 0 001 1 1 1 0 00.71-.29L22.41 7l-4.7-4.71A1 1 0 0017 2a1 1 0 00-1 1 1 1 0 00.29.71z"
}));

const LiveIconSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: "1em",
  viewBox: "-16 0 512 512.00113",
  width: "1em",
  fill: "currentColor"
}, __jsx("g", null, __jsx("path", {
  d: "m262.84375 140.558594c-12.699219 12.671875-33.28125 12.671875-45.980469 0-12.695312-12.671875-12.695312-33.21875 0-45.890625 12.699219-12.671875 33.28125-12.671875 45.980469 0 12.695312 12.671875 12.695312 33.21875 0 45.890625zm0 0"
}), __jsx("path", {
  d: "m307.257812 189.726562c-3.960937 0-7.921874-1.511718-10.9375-4.539062-6.03125-6.039062-6.019531-15.824219.019532-21.851562 12.238281-12.214844 18.976562-28.453126 18.976562-45.722657s-6.738281-33.507812-18.976562-45.722656c-6.039063-6.03125-6.050782-15.8125-.019532-21.855469 6.027344-6.039062 15.8125-6.050781 21.851563-.019531 18.089844 18.054687 28.050781 42.058594 28.050781 67.597656 0 25.535157-9.960937 49.542969-28.050781 67.597657-3.015625 3.011718-6.964844 4.515624-10.914063 4.515624zm0 0"
}), __jsx("path", {
  d: "m342.210938 235.222656c-3.960938 0-7.921876-1.511718-10.9375-4.535156-6.03125-6.042969-6.019532-15.824219.019531-21.855469 24.414062-24.367187 37.863281-56.761719 37.863281-91.21875s-13.449219-66.851562-37.863281-91.21875c-6.039063-6.03125-6.050781-15.8125-.019531-21.855469 6.03125-6.039062 15.8125-6.050781 21.851562-.019531 30.265625 30.207031 46.9375 70.371094 46.933594 113.09375 0 42.722657-16.667969 82.890625-46.933594 113.097657-3.015625 3.007812-6.964844 4.511718-10.914062 4.511718zm0 0"
}), __jsx("path", {
  d: "m172.371094 189.726562c-3.949219 0-7.898438-1.503906-10.917969-4.515624-18.089844-18.054688-28.050781-42.0625-28.050781-67.597657 0-25.539062 9.960937-49.542969 28.050781-67.597656 6.039063-6.03125 15.824219-6.023437 21.851563.019531 6.03125 6.039063 6.019531 15.824219-.019532 21.855469-12.238281 12.214844-18.976562 28.453125-18.976562 45.722656s6.738281 33.507813 18.976562 45.722657c6.039063 6.027343 6.050782 15.8125.019532 21.851562-3.015626 3.023438-6.976563 4.539062-10.933594 4.539062zm0 0"
}), __jsx("path", {
  d: "m137.417969 235.222656c-3.953125 0-7.902344-1.503906-10.917969-4.515625-30.265625-30.207031-46.933594-70.371093-46.933594-113.09375 0-42.726562 16.667969-82.890625 46.933594-113.097656 6.039062-6.027344 15.824219-6.019531 21.851562.023437 6.03125 6.039063 6.019532 15.820313-.019531 21.851563-24.414062 24.367187-37.863281 56.761719-37.863281 91.21875s13.449219 66.855469 37.863281 91.222656c6.039063 6.03125 6.050781 15.8125.019531 21.855469-3.015624 3.023438-6.976562 4.535156-10.933593 4.535156zm0 0"
}), __jsx("path", {
  d: "m443.480469 261.9375h-407.332031c-19.964844 0-36.148438 16.183594-36.148438 36.144531v177.769531c0 19.964844 16.183594 36.148438 36.148438 36.148438h407.328124c19.964844 0 36.148438-16.183594 36.148438-36.148438v-177.769531c0-19.960937-16.183594-36.144531-36.144531-36.144531zm-324.609375 203.683594h-56.933594c-8.53125 0-15.449219-6.917969-15.449219-15.453125v-126.398438c0-8.53125 6.917969-15.453125 15.449219-15.453125 8.535156 0 15.453125 6.917969 15.453125 15.453125v110.945313h41.480469c8.535156 0 15.453125 6.917968 15.453125 15.453125 0 8.535156-6.917969 15.453125-15.453125 15.453125zm63.328125-15.453125c0 8.535156-6.917969 15.453125-15.453125 15.453125s-15.453125-6.917969-15.453125-15.453125v-126.398438c0-8.53125 6.917969-15.453125 15.453125-15.453125s15.453125 6.917969 15.453125 15.453125zm130.015625-121.929688-38.160156 126.394531c-.003907.011719-.007813.023438-.011719.035157-4.144531 14.144531-25.273438 13.796875-29.5625 0-.003907-.011719-.007813-.023438-.011719-.035157l-38.160156-126.394531c-2.464844-8.171875 2.15625-16.792969 10.328125-19.261719 8.164062-2.464843 16.792969 2.15625 19.257812 10.328126l23.367188 77.394531 23.367187-77.394531c2.46875-8.171876 11.089844-12.796876 19.261719-10.328126 8.167969 2.46875 12.792969 11.089844 10.324219 19.261719zm95.066406 35.320313c8.535156 0 15.453125 6.917968 15.453125 15.453125 0 8.53125-6.917969 15.453125-15.453125 15.453125h-43.851562v40.25h52.175781c8.535156 0 15.453125 6.917968 15.453125 15.453125 0 8.535156-6.917969 15.453125-15.453125 15.453125h-67.628907c-8.535156 0-15.453124-6.917969-15.453124-15.453125v-126.398438c0-8.53125 6.917968-15.453125 15.453124-15.453125h69.710938c8.53125 0 15.453125 6.917969 15.453125 15.453125 0 8.535157-6.921875 15.453125-15.453125 15.453125h-54.261719v24.335938zm0 0"
})));

const WalletSvg = () => __jsx("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  version: "1.0",
  width: "183.000000pt",
  height: "160.000000pt",
  viewBox: "0 0 183.000000 160.000000",
  preserveAspectRatio: "xMidYMid meet"
}, __jsx("g", {
  transform: "translate(0.000000,160.000000) scale(0.100000,-0.100000)",
  fill: "currentColor",
  stroke: "none"
}, __jsx("path", {
  d: "M860 1319 c-118 -72 -248 -151 -287 -176 -69 -42 -86 -64 -63 -78 6 -4 135 69 286 161 217 130 278 163 286 153 5 -8 15 -26 23 -41 l15 -27 -171 -103 c-94 -56 -174 -108 -176 -116 -3 -7 -1 -18 5 -24 8 -8 62 20 186 96 96 58 177 106 179 106 3 0 33 -47 67 -105 42 -71 68 -105 78 -103 8 2 17 8 19 13 4 13 -208 368 -222 372 -5 1 -107 -56 -225 -128z"
}), __jsx("path", {
  d: "M376 1220 c-40 -13 -74 -47 -86 -89 -6 -21 -10 -191 -10 -404 0 -398 1 -408 55 -457 l27 -25 484 -3 c535 -3 525 -4 564 61 15 24 20 50 20 110 0 42 3 77 8 78 106 9 102 1 102 195 0 163 0 164 -25 180 -27 18 -55 13 -55 -10 0 -8 9 -18 21 -21 29 -10 18 -30 -17 -30 l-29 0 -5 170 c-4 143 -8 174 -23 197 -22 33 -102 67 -119 50 -15 -15 -2 -42 21 -42 11 0 32 -11 48 -24 24 -21 28 -32 31 -95 2 -39 2 -71 -1 -71 -2 0 -21 7 -40 15 -31 13 -111 15 -502 15 l-466 0 -24 25 c-27 26 -31 54 -13 88 20 39 40 46 124 47 60 0 83 4 87 14 3 7 0 19 -6 25 -13 13 -128 13 -171 1z m483 -250 l470 0 28 -24 c24 -21 27 -31 28 -82 l0 -59 -118 -5 c-90 -4 -120 -9 -127 -20 -5 -8 -10 -70 -10 -136 0 -101 3 -124 17 -135 11 -10 50 -15 127 -16 l111 -2 3 -60 c3 -71 -19 -129 -52 -136 -35 -7 -34 -7 -504 -6 l-453 1 -24 25 -25 24 0 331 0 331 30 -16 c25 -13 97 -15 499 -15z m639 -317 l-3 -108 -160 0 -160 0 -3 94 c-1 52 -1 100 2 108 4 10 42 13 166 13 l161 0 -3 -107z"
}), __jsx("path", {
  d: "M747 874 c-4 -4 -7 -15 -7 -25 0 -10 -8 -20 -18 -23 -29 -9 -61 -49 -68 -82 -6 -34 23 -80 62 -94 22 -9 24 -16 24 -70 0 -33 -4 -60 -8 -60 -14 0 -42 35 -42 53 0 10 -8 17 -20 17 -15 0 -20 -7 -20 -28 0 -36 22 -66 59 -82 18 -7 31 -21 33 -33 4 -30 42 -30 46 0 2 13 13 24 28 27 95 24 98 157 4 196 -28 11 -30 16 -30 62 0 56 14 60 40 14 8 -16 19 -28 23 -27 4 0 12 1 17 1 32 0 -8 83 -49 100 -18 7 -31 21 -33 33 -3 22 -28 34 -41 21z m-7 -139 c0 -46 -7 -54 -28 -33 -15 15 -15 51 0 66 21 21 28 13 28 -33z m90 -125 c11 -11 20 -25 20 -31 0 -19 -20 -48 -40 -59 -19 -10 -20 -7 -20 50 0 64 8 72 40 40z"
}), __jsx("path", {
  d: "M1250 690 c0 -11 6 -20 14 -20 21 0 30 -20 17 -33 -9 -9 -16 -6 -30 12 -12 16 -24 22 -35 18 -40 -15 3 -80 53 -80 54 0 83 70 43 106 -26 24 -62 22 -62 -3z"
})));
const ModelIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: ModelSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const HomeIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: HomeSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const PlusIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: PlusSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const MessageIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: MessageSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const UserIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: UserSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const TickIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: TickSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const ShareIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: ShareSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});
const LiveIcon = ({
  style,
  rotate,
  spin,
  className
}) => __jsx(_ant_design_icons__WEBPACK_IMPORTED_MODULE_1___default.a, {
  component: LiveIconSvg,
  className: className ? `${className} anticon-custom` : 'anticon-custom',
  style,
  rotate,
  spin
});

/***/ }),

/***/ "./src/lib/array.ts":
/*!**************************!*\
  !*** ./src/lib/array.ts ***!
  \**************************/
/*! exports provided: uniqueStringArrayValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniqueStringArrayValue", function() { return uniqueStringArrayValue; });
function uniqueStringArrayValue(array) {
  return array.filter((v, i, a) => a.indexOf(v) === i);
}

/***/ }),

/***/ "./src/lib/date.ts":
/*!*************************!*\
  !*** ./src/lib/date.ts ***!
  \*************************/
/*! exports provided: formatDate, formatDateFromnow, dobToAge, nowIsBefore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return formatDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDateFromnow", function() { return formatDateFromnow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dobToAge", function() { return dobToAge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nowIsBefore", function() { return nowIsBefore; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "moment");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);

function formatDate(date, format = 'DD/MM/YYYY HH:mm:ss') {
  return moment__WEBPACK_IMPORTED_MODULE_0___default()(date).format(format);
}
function formatDateFromnow(date) {
  return moment__WEBPACK_IMPORTED_MODULE_0___default()(date).fromNow();
}
function dobToAge(date) {
  return moment__WEBPACK_IMPORTED_MODULE_0___default()().diff(moment__WEBPACK_IMPORTED_MODULE_0___default()(date), 'years') > 0 && `${moment__WEBPACK_IMPORTED_MODULE_0___default()().diff(moment__WEBPACK_IMPORTED_MODULE_0___default()(date), 'years')}+`;
}
function nowIsBefore(date) {
  return moment__WEBPACK_IMPORTED_MODULE_0___default()().isBefore(date);
}

/***/ }),

/***/ "./src/lib/duration.ts":
/*!*****************************!*\
  !*** ./src/lib/duration.ts ***!
  \*****************************/
/*! exports provided: videoDuration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "videoDuration", function() { return videoDuration; });
function videoDuration(s) {
  if (!s) {
    return '00:00';
  }

  const secNum = parseInt(s, 10); // don't forget the second param

  let hours = Math.floor(secNum / 3600);
  let minutes = Math.floor((secNum - hours * 3600) / 60);
  let seconds = secNum - hours * 3600 - minutes * 60;
  if (hours < 10) hours = `0${hours}`;
  if (minutes < 10) minutes = `0${minutes}`;
  if (seconds < 10) seconds = `0${seconds}`;
  return `${(hours !== '00' ? `${hours}:` : '') + minutes}:${seconds}`;
}

/***/ }),

/***/ "./src/lib/index.ts":
/*!**************************!*\
  !*** ./src/lib/index.ts ***!
  \**************************/
/*! exports provided: isHasInternetConnection, createSagas, createAction, createAsyncAction, createAsyncActions, createSelectorsA, handleActions, createReducers, createSelectors, createSelector, createJSSelectors, isUrl, capitalizeFirstLetter, isEmail, generateUuid, formatDate, formatDateFromnow, dobToAge, nowIsBefore, validateMessages, videoDuration, arrayToTree, pathMatchRegexp, queryAncestors, getResponseError, shortenLargeNumber, uniqueStringArrayValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _internet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internet */ "./src/lib/internet.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isHasInternetConnection", function() { return _internet__WEBPACK_IMPORTED_MODULE_0__["isHasInternetConnection"]; });

/* harmony import */ var _redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./redux */ "./src/lib/redux.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSagas", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createSagas"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createAction", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createAsyncAction", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createAsyncAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createAsyncActions", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createAsyncActions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSelectorsA", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createSelectorsA"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "handleActions", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["handleActions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createReducers", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createReducers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSelectors", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createSelectors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSelector", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createSelector"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createJSSelectors", function() { return _redux__WEBPACK_IMPORTED_MODULE_1__["createJSSelectors"]; });

/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./string */ "./src/lib/string.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isUrl", function() { return _string__WEBPACK_IMPORTED_MODULE_2__["isUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "capitalizeFirstLetter", function() { return _string__WEBPACK_IMPORTED_MODULE_2__["capitalizeFirstLetter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isEmail", function() { return _string__WEBPACK_IMPORTED_MODULE_2__["isEmail"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generateUuid", function() { return _string__WEBPACK_IMPORTED_MODULE_2__["generateUuid"]; });

/* harmony import */ var _date__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./date */ "./src/lib/date.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return _date__WEBPACK_IMPORTED_MODULE_3__["formatDate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatDateFromnow", function() { return _date__WEBPACK_IMPORTED_MODULE_3__["formatDateFromnow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dobToAge", function() { return _date__WEBPACK_IMPORTED_MODULE_3__["dobToAge"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "nowIsBefore", function() { return _date__WEBPACK_IMPORTED_MODULE_3__["nowIsBefore"]; });

/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./message */ "./src/lib/message.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validateMessages", function() { return _message__WEBPACK_IMPORTED_MODULE_4__["validateMessages"]; });

/* harmony import */ var _duration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./duration */ "./src/lib/duration.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "videoDuration", function() { return _duration__WEBPACK_IMPORTED_MODULE_5__["videoDuration"]; });

/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ "./src/lib/utils.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrayToTree", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__["arrayToTree"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pathMatchRegexp", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__["pathMatchRegexp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queryAncestors", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__["queryAncestors"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getResponseError", function() { return _utils__WEBPACK_IMPORTED_MODULE_6__["getResponseError"]; });

/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./number */ "./src/lib/number.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shortenLargeNumber", function() { return _number__WEBPACK_IMPORTED_MODULE_7__["shortenLargeNumber"]; });

/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./array */ "./src/lib/array.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "uniqueStringArrayValue", function() { return _array__WEBPACK_IMPORTED_MODULE_8__["uniqueStringArrayValue"]; });











/***/ }),

/***/ "./src/lib/internet.ts":
/*!*****************************!*\
  !*** ./src/lib/internet.ts ***!
  \*****************************/
/*! exports provided: isHasInternetConnection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHasInternetConnection", function() { return isHasInternetConnection; });
const INTERNET_CHECK_URL = 'https://google.com';
const isHasInternetConnection = async () => {
  try {
    const res = await fetch(INTERNET_CHECK_URL, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        Pragma: 'no-cache',
        Expires: 0
      }
    });

    if (res.status === 404 || res.status === 401 || res.status === 403 || res.status === 500 || res.status >= 200 && res.status <= 300) {
      return true;
    }
  } catch (exception) {
    console.log(exception);
  }

  return false;
};

/***/ }),

/***/ "./src/lib/message.ts":
/*!****************************!*\
  !*** ./src/lib/message.ts ***!
  \****************************/
/*! exports provided: validateMessages */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateMessages", function() { return validateMessages; });
/* eslint-disable no-template-curly-in-string */
const validateMessages = {
  required: 'This field is required!',
  types: {
    email: 'Not a validate email!',
    number: 'Not a validate number!'
  },
  number: {
    range: 'Must be between ${min} and ${max}'
  }
};

/***/ }),

/***/ "./src/lib/number.ts":
/*!***************************!*\
  !*** ./src/lib/number.ts ***!
  \***************************/
/*! exports provided: shortenLargeNumber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shortenLargeNumber", function() { return shortenLargeNumber; });
function shortenLargeNumber(num) {
  if (num >= 1000000000) {
    return `${(num / 1000000000).toFixed(1).replace(/\.0$/, '')}G`;
  }

  if (num >= 1000000) {
    return `${(num / 1000000).toFixed(1).replace(/\.0$/, '')}M`;
  }

  if (num >= 1000) {
    return `${(num / 1000).toFixed(1).replace(/\.0$/, '')}K`;
  }

  return num;
}

/***/ }),

/***/ "./src/lib/redux.ts":
/*!**************************!*\
  !*** ./src/lib/redux.ts ***!
  \**************************/
/*! exports provided: createSagas, createAction, createAsyncAction, createAsyncActions, createSelectorsA, handleActions, createReducers, createSelectors, createSelector, createJSSelectors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSagas", function() { return createSagas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAction", function() { return createAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAsyncAction", function() { return createAsyncAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createAsyncActions", function() { return createAsyncActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSelectorsA", function() { return createSelectorsA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handleActions", function() { return handleActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createReducers", function() { return createReducers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSelectors", function() { return createSelectors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createJSSelectors", function() { return createJSSelectors; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ "reselect");
/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reselect__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSelector", function() { return reselect__WEBPACK_IMPORTED_MODULE_1__["createSelector"]; });

/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux-saga/effects */ "redux-saga/effects");
/* harmony import */ var redux_saga_effects__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(redux_saga_effects__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var redux_actions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-actions */ "redux-actions");
/* harmony import */ var redux_actions__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(redux_actions__WEBPACK_IMPORTED_MODULE_3__);
/* eslint-disable no-param-reassign */

/* eslint-disable func-names */





function createAction(type) {
  const action = Object(redux_actions__WEBPACK_IMPORTED_MODULE_3__["createAction"])(type);

  action.is = aType => action.toString() === aType;

  return action;
}
/* tslint:disable-next-line */


function createAsyncAction(action, type) {
  return {
    [action]: createAction(type),
    [`${action}Success`]: createAction(`${type}_SUCCESS`),
    [`${action}Fail`]: createAction(`${type}_FAIL`)
  };
}

function createAsyncActions(type) {
  return [createAction(type), createAction(`${type}_SUCCESS`), createAction(`${type}_FAIL`)];
}
/* tslint:disable */


function handleActions(actions, initialState) {
  return Object(redux_actions__WEBPACK_IMPORTED_MODULE_3__["handleActions"])(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["reduce"])(actions, (reducer, handler, action) => {
    reducer[action] = (state, act) => handler(state.set('action', action), act);

    return reducer;
  }, {}), initialState);
}

function createReducers(stateContext, reducers, initialState, preventResetting = false) {
  return {
    [stateContext]: Object(redux_actions__WEBPACK_IMPORTED_MODULE_3__["handleActions"])(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["reduce"])(Object(lodash__WEBPACK_IMPORTED_MODULE_0__["flatten"])(reducers), (reducer, action) => {
      if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isArray"])(action.on)) {
        action.on.forEach(act => {
          reducer[act] = action.reducer;
        });
      } else reducer[action.on] = action.reducer;

      return reducer;
    }, preventResetting ? {} : {
      APP_STATE_RESET: () => initialState
    }), initialState)
  };
}

function createSagas(sagas) {
  return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["flatten"])(sagas).map(saga => {
    const {
      on,
      effect = redux_saga_effects__WEBPACK_IMPORTED_MODULE_2__["takeLatest"],
      worker
    } = saga;
    return function* () {
      yield effect(on, function* (action) {
        yield Object(redux_saga_effects__WEBPACK_IMPORTED_MODULE_2__["delay"])(0);
        yield worker(action);
      });
    };
  });
}

function createSelectorsA(context, keys = []) {
  const stateSelector = state => state[context];

  if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(keys)) return stateSelector;
  return keys.map(key => state => Object(lodash__WEBPACK_IMPORTED_MODULE_0__["isArray"])(key) ? stateSelector(state).getIn(key) : stateSelector(state).get(key));
}

function createSelectors(context, keys) {
  const stateSelector = state => state[context];

  return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["reduce"])(keys, (selectors, key) => {
    selectors[`${key}Selector`] = state => stateSelector(state).get(key);

    return selectors;
  }, {});
}

function createJSSelectors(context, keys) {
  const stateSelector = state => state[context];

  return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["reduce"])(keys, (selectors, key) => {
    selectors[`${key}Selector`] = state => stateSelector(state)[key];

    return selectors;
  }, {});
}



/***/ }),

/***/ "./src/lib/string.ts":
/*!***************************!*\
  !*** ./src/lib/string.ts ***!
  \***************************/
/*! exports provided: isUrl, capitalizeFirstLetter, isEmail, generateUuid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUrl", function() { return isUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalizeFirstLetter", function() { return capitalizeFirstLetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmail", function() { return isEmail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateUuid", function() { return generateUuid; });
/* eslint-disable no-useless-escape */
function isUrl(url) {
  const regex = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
  return regex.test(url);
}
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function isEmail(email) {
  return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(email);
}
const generateUuid = () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
  /* eslint-disable */
  const r = Math.random() * 16 | 0;
  const v = c === 'x' ? r : r & 0x3 | 0x8;
  return v.toString(16);
});

/***/ }),

/***/ "./src/lib/utils.ts":
/*!**************************!*\
  !*** ./src/lib/utils.ts ***!
  \**************************/
/*! exports provided: arrayToTree, pathMatchRegexp, queryAncestors, getResponseError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayToTree", function() { return arrayToTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pathMatchRegexp", function() { return pathMatchRegexp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryAncestors", function() { return queryAncestors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getResponseError", function() { return getResponseError; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "lodash");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path-to-regexp */ "path-to-regexp");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_1__);


/**
 * Convert an array to a tree-structured array.
 * @param   {array}     array     The Array need to Converted.
 * @param   {string}    id        The alias of the unique ID of the object in the array.
 * @param   {string}    parentId       The alias of the parent ID of the object in the array.
 * @param   {string}    children  The alias of children of the object in the array.
 * @return  {array}    Return a tree-structured array.
 */

function arrayToTree(array, id = 'id', parentId = 'pid', children = 'children') {
  const result = [];
  const hash = {};
  const data = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["cloneDeep"])(array);
  data.forEach((item, index) => {
    hash[data[index][id]] = data[index];
  });
  data.forEach(item => {
    const hashParent = hash[item[parentId]];

    if (hashParent) {
      !hashParent[children] && (hashParent[children] = []);
      hashParent[children].push(item);
    } else {
      result.push(item);
    }
  });
  return result;
}
/**
 * Whether the path matches the regexp if the language prefix is ignored, https://github.com/pillarjs/path-to-regexp.
 * @param   {string|regexp|array}     regexp     Specify a string, array of strings, or a regular expression.
 * @param   {string}                  pathname   Specify the pathname to match.
 * @return  {array|null}              Return the result of the match or null.
 */

function pathMatchRegexp(regexp, pathname) {
  return path_to_regexp__WEBPACK_IMPORTED_MODULE_1__["pathToRegexp"](regexp).exec(pathname);
}
/**
 * In an array of objects, specify an object that traverses the objects whose parent ID matches.
 * @param   {array}     array     The Array need to Converted.
 * @param   {string}    current   Specify the object that needs to be queried.
 * @param   {string}    parentId  The alias of the parent ID of the object in the array.
 * @param   {string}    id        The alias of the unique ID of the object in the array.
 * @return  {array}    Return a key array.
 */

function queryAncestors(array, current, parentId, id = 'id') {
  const result = [current];
  const hashMap = new Map();
  array.forEach(item => hashMap.set(item[id], item));

  const getPath = pr => {
    const currentParentId = hashMap.get(pr[id])[parentId];

    if (currentParentId) {
      result.push(hashMap.get(currentParentId));
      getPath(hashMap.get(currentParentId));
    }
  };

  getPath(current);
  return result;
}
function getResponseError(data) {
  if (!data) {
    return '';
  }

  if (Array.isArray(data.message)) {
    const item = data.message[0];

    if (!item.constraints) {
      return data.error || 'Bad request!';
    }

    return Object.values(item.constraints)[0];
  } // TODO - parse for langauge or others


  return typeof data.message === 'string' ? data.message : 'Bad request!';
}

/***/ }),

/***/ "./src/redux/comment/actions.ts":
/*!**************************************!*\
  !*** ./src/redux/comment/actions.ts ***!
  \**************************************/
/*! exports provided: getComments, getCommentsSuccess, getCommentsFail, moreComment, moreCommentSuccess, moreCommentFail, createComment, createCommentSuccess, createCommentFail, deleteComment, deleteCommentSuccess, deleteCommentFail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getComments", function() { return getComments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCommentsSuccess", function() { return getCommentsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCommentsFail", function() { return getCommentsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreComment", function() { return moreComment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreCommentSuccess", function() { return moreCommentSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreCommentFail", function() { return moreCommentFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createComment", function() { return createComment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCommentSuccess", function() { return createCommentSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCommentFail", function() { return createCommentFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteComment", function() { return deleteComment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteCommentSuccess", function() { return deleteCommentSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteCommentFail", function() { return deleteCommentFail; });
/* harmony import */ var _lib_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/redux */ "./src/lib/redux.ts");

const {
  getComments,
  getCommentsSuccess,
  getCommentsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getComments', 'GET_THE_COMMENTS');
const {
  moreComment,
  moreCommentSuccess,
  moreCommentFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreComment', 'MORE_COMMENT');
const {
  createComment,
  createCommentSuccess,
  createCommentFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('createComment', 'CREATE_COMMENT');
const {
  deleteComment,
  deleteCommentSuccess,
  deleteCommentFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('deleteComment', 'DELETE_COMMENT');

/***/ }),

/***/ "./src/redux/feed/actions.ts":
/*!***********************************!*\
  !*** ./src/redux/feed/actions.ts ***!
  \***********************************/
/*! exports provided: getFeeds, getFeedsSuccess, getFeedsFail, moreFeeds, moreFeedsSuccess, moreFeedsFail, getVideoFeeds, getVideoFeedsSuccess, getVideoFeedsFail, moreVideoFeeds, moreVideoFeedsSuccess, moreVideoFeedsFail, getPhotoFeeds, getPhotoFeedsSuccess, getPhotoFeedsFail, morePhotoFeeds, morePhotoFeedsSuccess, morePhotoFeedsFail, removeFeedSuccess */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFeeds", function() { return getFeeds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFeedsSuccess", function() { return getFeedsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFeedsFail", function() { return getFeedsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreFeeds", function() { return moreFeeds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreFeedsSuccess", function() { return moreFeedsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreFeedsFail", function() { return moreFeedsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVideoFeeds", function() { return getVideoFeeds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVideoFeedsSuccess", function() { return getVideoFeedsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVideoFeedsFail", function() { return getVideoFeedsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVideoFeeds", function() { return moreVideoFeeds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVideoFeedsSuccess", function() { return moreVideoFeedsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVideoFeedsFail", function() { return moreVideoFeedsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPhotoFeeds", function() { return getPhotoFeeds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPhotoFeedsSuccess", function() { return getPhotoFeedsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPhotoFeedsFail", function() { return getPhotoFeedsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "morePhotoFeeds", function() { return morePhotoFeeds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "morePhotoFeedsSuccess", function() { return morePhotoFeedsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "morePhotoFeedsFail", function() { return morePhotoFeedsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFeedSuccess", function() { return removeFeedSuccess; });
/* harmony import */ var _lib_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/redux */ "./src/lib/redux.ts");

const {
  getFeeds,
  getFeedsSuccess,
  getFeedsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getFeeds', 'GET_FEEDS');
const {
  moreFeeds,
  moreFeedsSuccess,
  moreFeedsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreFeeds', 'GET_MODE_FEEDS');
const {
  getVideoFeeds,
  getVideoFeedsSuccess,
  getVideoFeedsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getVideoFeeds', 'GET_VIDEO_FEEDS');
const {
  moreVideoFeeds,
  moreVideoFeedsSuccess,
  moreVideoFeedsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreVideoFeeds', 'GET_MODE_VIDEO_FEEDS');
const {
  getPhotoFeeds,
  getPhotoFeedsSuccess,
  getPhotoFeedsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getPhotoFeeds', 'GET_PHOTO_FEEDS');
const {
  morePhotoFeeds,
  morePhotoFeedsSuccess,
  morePhotoFeedsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('morePhotoFeeds', 'GET_MODE_PHOTO_FEEDS');
const removeFeedSuccess = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAction"])('removeFeedSuccess');

/***/ }),

/***/ "./src/redux/gallery/actions.ts":
/*!**************************************!*\
  !*** ./src/redux/gallery/actions.ts ***!
  \**************************************/
/*! exports provided: getGalleries, getGalleriesSuccess, getGalleriesFail, moreGalleries, moreGalleriesSuccess, moreGalleriesFail, getRelatedGalleries, getRelatedGalleriesSuccess, getRelatedGalleriesFail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGalleries", function() { return getGalleries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGalleriesSuccess", function() { return getGalleriesSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGalleriesFail", function() { return getGalleriesFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreGalleries", function() { return moreGalleries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreGalleriesSuccess", function() { return moreGalleriesSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreGalleriesFail", function() { return moreGalleriesFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelatedGalleries", function() { return getRelatedGalleries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelatedGalleriesSuccess", function() { return getRelatedGalleriesSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelatedGalleriesFail", function() { return getRelatedGalleriesFail; });
/* harmony import */ var _lib_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/redux */ "./src/lib/redux.ts");

const {
  getGalleries,
  getGalleriesSuccess,
  getGalleriesFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getGalleries', 'GET_GALLERIES');
const {
  moreGalleries,
  moreGalleriesSuccess,
  moreGalleriesFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreGalleries', 'MORE_GALLERIES');
const {
  getRelatedGalleries,
  getRelatedGalleriesSuccess,
  getRelatedGalleriesFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getRelatedGalleries', 'GET_RELATED_GALLERIES');

/***/ }),

/***/ "./src/redux/product/actions.ts":
/*!**************************************!*\
  !*** ./src/redux/product/actions.ts ***!
  \**************************************/
/*! exports provided: listProducts, listProductsSuccess, listProductsFail, moreProduct, moreProductSuccess, moreProductFail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listProducts", function() { return listProducts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listProductsSuccess", function() { return listProductsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listProductsFail", function() { return listProductsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreProduct", function() { return moreProduct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreProductSuccess", function() { return moreProductSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreProductFail", function() { return moreProductFail; });
/* harmony import */ var _lib_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/redux */ "./src/lib/redux.ts");

const {
  listProducts,
  listProductsSuccess,
  listProductsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('listProducts', 'LIST_PRODUCT');
const {
  moreProduct,
  moreProductSuccess,
  moreProductFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreProduct', 'MORE_PRODUCT');

/***/ }),

/***/ "./src/redux/user/actions.ts":
/*!***********************************!*\
  !*** ./src/redux/user/actions.ts ***!
  \***********************************/
/*! exports provided: updateCurrentUser, updateCurrentUserAvatar, updateCurrentUserCover, updateUser, updateUserSuccess, updateUserFail, updatePerformer, setUpdating, updatePassword, updatePasswordSuccess, updatePasswordFail, updateBalance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateCurrentUser", function() { return updateCurrentUser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateCurrentUserAvatar", function() { return updateCurrentUserAvatar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateCurrentUserCover", function() { return updateCurrentUserCover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateUser", function() { return updateUser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateUserSuccess", function() { return updateUserSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateUserFail", function() { return updateUserFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePerformer", function() { return updatePerformer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdating", function() { return setUpdating; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePassword", function() { return updatePassword; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePasswordSuccess", function() { return updatePasswordSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePasswordFail", function() { return updatePasswordFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateBalance", function() { return updateBalance; });
/* harmony import */ var _lib_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/redux */ "./src/lib/redux.ts");

const updateCurrentUser = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAction"])('updateCurrentUser');
const updateCurrentUserAvatar = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAction"])('updateCurrentUserAvatar');
const updateCurrentUserCover = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAction"])('updateCurrentUserCover');
const {
  updateUser,
  updateUserSuccess,
  updateUserFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('updateUser', 'UPDATE_USER');
const {
  updatePerformer
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('updatePerformer', 'UPDATE_PERFORMER');
const setUpdating = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAction"])('updatingUser');
const {
  updatePassword,
  updatePasswordSuccess,
  updatePasswordFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('updatePassword', 'UPDATE_PASSWORD');
const updateBalance = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAction"])('updateBalance');

/***/ }),

/***/ "./src/redux/video/actions.ts":
/*!************************************!*\
  !*** ./src/redux/video/actions.ts ***!
  \************************************/
/*! exports provided: getVideos, getVideosSuccess, getVideosFail, getVods, getVodsSuccess, getVodsFail, moreVideo, moreVideoSuccess, moreVideoFail, moreVod, moreVodSuccess, moreVodFail, getRelated, getRelatedSuccess, getRelatedFail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVideos", function() { return getVideos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVideosSuccess", function() { return getVideosSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVideosFail", function() { return getVideosFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVods", function() { return getVods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVodsSuccess", function() { return getVodsSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVodsFail", function() { return getVodsFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVideo", function() { return moreVideo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVideoSuccess", function() { return moreVideoSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVideoFail", function() { return moreVideoFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVod", function() { return moreVod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVodSuccess", function() { return moreVodSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moreVodFail", function() { return moreVodFail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelated", function() { return getRelated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelatedSuccess", function() { return getRelatedSuccess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRelatedFail", function() { return getRelatedFail; });
/* harmony import */ var _lib_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/redux */ "./src/lib/redux.ts");

const {
  getVideos,
  getVideosSuccess,
  getVideosFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getVideos', 'GET_VIDEOS');
const {
  getVods,
  getVodsSuccess,
  getVodsFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getVods', 'GET_VODS');
const {
  moreVideo,
  moreVideoSuccess,
  moreVideoFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreVideo', 'LOAD_MORE');
const {
  moreVod,
  moreVodSuccess,
  moreVodFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('moreVod', 'MORE_VOD');
const {
  getRelated,
  getRelatedSuccess,
  getRelatedFail
} = Object(_lib_redux__WEBPACK_IMPORTED_MODULE_0__["createAsyncAction"])('getRelated', 'GET_RELATED');

/***/ }),

/***/ "./src/services/api-request.ts":
/*!*************************************!*\
  !*** ./src/services/api-request.ts ***!
  \*************************************/
/*! exports provided: TOKEN, APIRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOKEN", function() { return TOKEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APIRequest", function() { return APIRequest; });
/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-unfetch */ "isomorphic-unfetch");
/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! js-cookie */ "js-cookie");
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _lib_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/string */ "./src/lib/string.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ "./src/services/config.ts");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






const TOKEN = "token";
class APIRequest {
  setAuthHeaderToken(token) {
    APIRequest.token = token;
  }
  /**
   * Parses the JSON returned by a network request
   *
   * @param  {object} response A response from a network request
   *
   * @return {object}          The parsed JSON from the request
   */


  parseJSON(response) {
    if (response.status === 204 || response.status === 205) {
      return null;
    }

    return response.json();
  }
  /**
   * Checks if a network request came back fine, and throws an error if not
   *
   * @param  {object} response   A response from a network request
   *
   * @return {object|undefined} Returns either the response, or throws an error
   */


  checkStatus(response) {
    if (response.status >= 200 && response.status < 300) {
      return response;
    }

    if (response.status === 401) {
      if (false) {}

      throw new Error("Please login!");
    } // const error = new Error(response.statusText) as any;
    // error.response = response;
    // throw error;


    throw response.clone().json();
  }

  request(url, method, body, headers) {
    const verb = (method || "get").toUpperCase();

    const updatedHeader = _objectSpread({
      "Content-Type": "application/json",
      Authorization: APIRequest.token || js_cookie__WEBPACK_IMPORTED_MODULE_2___default.a.get(TOKEN) || null
    }, headers || {});

    const config = Object(_config__WEBPACK_IMPORTED_MODULE_4__["getGlobalConfig"])();
    const baseUrl = config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT || "https://api.my.foodiefans.io";
    const apiUrl = Object(_lib_string__WEBPACK_IMPORTED_MODULE_3__["isUrl"])(url) ? url : `${baseUrl}${url.startsWith("/") ? url : `/${url}`}`;
    return isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0___default()(apiUrl, {
      method: verb,
      headers: updatedHeader,
      body: body ? JSON.stringify(body) : null
    }).then(this.checkStatus).then(this.parseJSON);
  }

  buildUrl(baseUrl, params) {
    if (!params) {
      return baseUrl;
    }

    const queryString = Object.keys(params).map(k => {
      if (Array.isArray(params[k])) {
        return params[k].map(param => `${encodeURIComponent(k)}=${encodeURIComponent(param)}`).join("&");
      }

      return `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`;
    }).join("&");
    return `${baseUrl}?${queryString}`;
  }

  get(url, headers) {
    return this.request(url, "get", null, headers);
  }

  post(url, data, headers) {
    return this.request(url, "post", data, headers);
  }

  put(url, data, headers) {
    return this.request(url, "put", data, headers);
  }

  del(url, data, headers) {
    return this.request(url, "delete", data, headers);
  }

  upload(url, files, options = {
    onProgress() {},

    method: "POST"
  }) {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_4__["getGlobalConfig"])();
    const uploadUrl = Object(_lib_string__WEBPACK_IMPORTED_MODULE_3__["isUrl"])(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`;
    return new Promise((resolve, reject) => {
      const req = new XMLHttpRequest();
      req.upload.addEventListener("progress", event => {
        if (event.lengthComputable) {
          options.onProgress({
            percentage: event.loaded / event.total * 100
          });
        }
      });
      req.addEventListener("load", () => {
        const success = req.status >= 200 && req.status < 300;
        const {
          response
        } = req;

        if (!success) {
          return reject(response);
        }

        return resolve(response);
      });
      req.upload.addEventListener("error", () => {
        reject(req.response);
      });
      const formData = new FormData();
      files.forEach(f => formData.append(f.fieldname, f.file, f.file.name));
      options.customData && Object.keys(options.customData).forEach(fieldname => {
        if (typeof options.customData[fieldname] !== "undefined" && !Array.isArray(options.customData[fieldname])) formData.append(fieldname, options.customData[fieldname]);

        if (typeof options.customData[fieldname] !== "undefined" && Array.isArray(options.customData[fieldname])) {
          if (options.customData[fieldname].length) {
            for (let i = 0; i < options.customData[fieldname].length; i += 1) {
              formData.append(fieldname, options.customData[fieldname][i]);
            }
          }
        }
      });
      req.responseType = "json";
      req.open(options.method || "POST", uploadUrl);
      const token = APIRequest.token || js_cookie__WEBPACK_IMPORTED_MODULE_2___default.a.get(TOKEN);
      req.setRequestHeader("Authorization", token || "");
      req.send(formData);
    });
  }

}

_defineProperty(APIRequest, "token", "");

/***/ }),

/***/ "./src/services/auth.service.ts":
/*!**************************************!*\
  !*** ./src/services/auth.service.ts ***!
  \**************************************/
/*! exports provided: AuthService, authService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthService", function() { return AuthService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "authService", function() { return authService; });
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ "js-cookie");
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");


class AuthService extends _api_request__WEBPACK_IMPORTED_MODULE_1__["APIRequest"] {
  async login(data) {
    return this.post('/auth/login', data);
  }

  async loginTwitter() {
    return this.get(this.buildUrl('/auth/twitter/login'));
  }

  async loginGoogle(data) {
    return this.post('/auth/google/login', data);
  }

  async callbackLoginTwitter(data) {
    return this.get(this.buildUrl('/auth/twitter/callback', data));
  }

  async verifyEmail(data) {
    return this.post('/auth/email-verification', data);
  }

  setToken(token, remember = true) {
    const expired = {
      expires: !remember ? 1 : 365
    };
    js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.set(_api_request__WEBPACK_IMPORTED_MODULE_1__["TOKEN"], token, expired);
    this.setAuthHeaderToken(token);
  }

  getToken() {
    return js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.get(_api_request__WEBPACK_IMPORTED_MODULE_1__["TOKEN"]);
  }

  setTwitterToken(data, role) {
    js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.set('oauthToken', data.oauthToken, {
      expires: 1
    });
    js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.set('oauthTokenSecret', data.oauthTokenSecret, {
      expires: 1
    });
    js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.set('role', role, {
      expires: 1
    });
  }

  getTwitterToken() {
    const oauthToken = js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.get('oauthToken');
    const oauthTokenSecret = js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.get('oauthTokenSecret');
    const role = js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.get('role');
    return {
      oauthToken,
      oauthTokenSecret,
      role
    };
  }

  removeToken() {
    js_cookie__WEBPACK_IMPORTED_MODULE_0___default.a.remove(_api_request__WEBPACK_IMPORTED_MODULE_1__["TOKEN"]);
  }

  updatePassword(password, source) {
    return this.put('/auth/users/me/password', {
      password,
      source
    });
  }

  resetPassword(data) {
    return this.post('/auth/users/forgot', data);
  }

  register(data) {
    return this.post('/auth/users/register', data);
  }

  registerPerformer(documents, data, onProgress) {
    return this.upload('/auth/performers/register', documents, {
      onProgress,
      customData: data
    });
  }

  userSwitchToPerformer(userId) {
    return this.post(`/auth/users/${userId}/switch-to-performer`);
  }

}
const authService = new AuthService();

/***/ }),

/***/ "./src/services/banner.service.ts":
/*!****************************************!*\
  !*** ./src/services/banner.service.ts ***!
  \****************************************/
/*! exports provided: BannerService, bannerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BannerService", function() { return BannerService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bannerService", function() { return bannerService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class BannerService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/site-promo/search', query));
  }

}
const bannerService = new BannerService();

/***/ }),

/***/ "./src/services/block.service.ts":
/*!***************************************!*\
  !*** ./src/services/block.service.ts ***!
  \***************************************/
/*! exports provided: BlockService, blockService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockService", function() { return BlockService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blockService", function() { return blockService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class BlockService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  blockCountries(payload) {
    return this.post('/performer-blocks/countries', payload);
  }

  blockUser(payload) {
    return this.post('/performer-blocks/user', payload);
  }

  unBlockUser(id) {
    this.del(`/performer-blocks/user/${id}`);
  }

  getBlockListUsers(query) {
    return this.get(this.buildUrl('/performer-blocks/users', query));
  }

  checkCountryBlock() {
    return this.get('/country-block/check');
  }

}
const blockService = new BlockService();

/***/ }),

/***/ "./src/services/cart.service.ts":
/*!**************************************!*\
  !*** ./src/services/cart.service.ts ***!
  \**************************************/
/*! exports provided: CartService, cartService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CartService", function() { return CartService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cartService", function() { return cartService; });
class CartService {
  getCartByUser(userId) {
    let existCart = localStorage.getItem(`cart_${userId}`);
    existCart = existCart && existCart.length ? JSON.parse(existCart) : [];
    return existCart;
  }

}
const cartService = new CartService();

/***/ }),

/***/ "./src/services/comment.service.ts":
/*!*****************************************!*\
  !*** ./src/services/comment.service.ts ***!
  \*****************************************/
/*! exports provided: CommentService, commentService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommentService", function() { return CommentService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "commentService", function() { return commentService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class CommentService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  create(payload) {
    return this.post('/comments', payload);
  }

  update(id, payload) {
    return this.upload(`/comments/${id}`, payload);
  }

  search(query) {
    return this.get(this.buildUrl('/comments/search', query));
  }

  delete(id) {
    return this.del(`/comments/${id}`);
  }

}
const commentService = new CommentService();

/***/ }),

/***/ "./src/services/config.ts":
/*!********************************!*\
  !*** ./src/services/config.ts ***!
  \********************************/
/*! exports provided: setGlobalConfig, getGlobalConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setGlobalConfig", function() { return setGlobalConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGlobalConfig", function() { return getGlobalConfig; });
let globalConfig = {};
const setGlobalConfig = config => {
  globalConfig = config;
};
const getGlobalConfig = () => globalConfig;

/***/ }),

/***/ "./src/services/cookies.service.ts":
/*!*****************************************!*\
  !*** ./src/services/cookies.service.ts ***!
  \*****************************************/
/*! exports provided: CookieService, cookieService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CookieService", function() { return CookieService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cookieService", function() { return cookieService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class CookieService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  setCookie(cname, cvalue, exTime) {
    const d = new Date();
    d.setTime(d.getTime() + exTime * 60 * 1000);
    const expires = `expires=${d.toUTCString()}`;
    document.cookie = `${cname}=${cvalue};${expires};path=/`;
  }

  getCookie(cname) {
    const name = `${cname}=`;
    const decodedCookie = decodeURIComponent(document.cookie);
    const ca = decodedCookie.split(';');

    for (let i = 0; i < ca.length; i += 1) {
      let c = ca[i];

      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }

      if (c.indexOf(name) === 0) {
        return c.substring(name.length, c.length);
      }
    }

    return '';
  }

}
const cookieService = new CookieService();

/***/ }),

/***/ "./src/services/earning.service.ts":
/*!*****************************************!*\
  !*** ./src/services/earning.service.ts ***!
  \*****************************************/
/*! exports provided: EarningService, earningService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EarningService", function() { return EarningService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "earningService", function() { return earningService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class EarningService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  performerStarts(param) {
    return this.get(this.buildUrl('/earning/performer/stats', param));
  }

  performerSearch(param) {
    return this.get(this.buildUrl('/earning/performer/search', param));
  }

}
const earningService = new EarningService();

/***/ }),

/***/ "./src/services/feed.service.ts":
/*!**************************************!*\
  !*** ./src/services/feed.service.ts ***!
  \**************************************/
/*! exports provided: FeedService, feedService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FeedService", function() { return FeedService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "feedService", function() { return feedService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class FeedService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/feeds/performers', query));
  }

  userSearch(query) {
    return this.get(this.buildUrl('/feeds/users', query));
  }

  userHomeFeeds(query) {
    return this.get(this.buildUrl('/feeds/users/home-feeds', query));
  }

  delete(id) {
    return this.del(`/feeds/performers/${id}`);
  }

  findById(id, headers) {
    return this.get(`/feeds/performers/${id}`, headers);
  }

  findOne(id, headers) {
    return this.get(`/feeds/users/${id}`, headers);
  }

  update(id, payload) {
    return this.put(`/feeds/performers/${id}`, payload);
  }

  create(data) {
    return this.post('/feeds/performers', data);
  }

  uploadPhoto(file, payload, onProgress) {
    return this.upload('/feeds/performers/photo/upload', [{
      fieldname: 'file',
      file
    }], {
      onProgress,
      customData: payload
    });
  }

  uploadThumbnail(file, payload, onProgress) {
    return this.upload('/feeds/performers/thumbnail/upload', [{
      fieldname: 'file',
      file
    }], {
      onProgress,
      customData: payload
    });
  }

  uploadVideo(file, payload, onProgress) {
    return this.upload('/feeds/performers/video/upload', [{
      fieldname: 'file',
      file
    }], {
      onProgress,
      customData: payload
    });
  }

  uploadTeaser(file, payload, onProgress) {
    return this.upload('/feeds/performers/teaser/upload', [{
      fieldname: 'file',
      file
    }], {
      onProgress,
      customData: payload
    });
  }

  addPoll(payload) {
    return this.post('/feeds/performers/polls', payload);
  }

  votePoll(pollId) {
    return this.post(`/feeds/users/vote/${pollId}`);
  }

  getBookmark(payload) {
    return this.get(this.buildUrl('/reactions/feeds/bookmark', payload));
  }

}
const feedService = new FeedService();

/***/ }),

/***/ "./src/services/follow.service.ts":
/*!****************************************!*\
  !*** ./src/services/follow.service.ts ***!
  \****************************************/
/*! exports provided: followService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "followService", function() { return followService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");


class FollowService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  create(id) {
    return this.post(`/follows/${id}`);
  }

  delete(id) {
    return this.del(`/follows/${id}`);
  }

  getFollowers(req) {
    return this.get(this.buildUrl('/follows/followers', req));
  }

  getFollowing(req) {
    return this.get(this.buildUrl('/follows/following', req));
  }

}

const followService = new FollowService();

/***/ }),

/***/ "./src/services/gallery.service.ts":
/*!*****************************************!*\
  !*** ./src/services/gallery.service.ts ***!
  \*****************************************/
/*! exports provided: galleryService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "galleryService", function() { return galleryService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");


class GalleryService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  create(payload) {
    return this.post('/performer/performer-assets/galleries', payload);
  }

  search(param) {
    return this.get(this.buildUrl('/performer/performer-assets/galleries/search', param));
  }

  userSearch(param) {
    return this.get(this.buildUrl('/user/performer-assets/galleries/search', param));
  }

  update(id, payload) {
    return this.put(`/performer/performer-assets/galleries/${id}`, payload);
  }

  findById(id) {
    return this.get(`/performer/performer-assets/galleries/${id}/view`);
  }

  userViewDetails(id, headers) {
    return this.get(`/user/performer-assets/galleries/${id}/view`, headers);
  }

  delete(id) {
    return this.del(`/performer/performer-assets/galleries/${id}`);
  }

  getBookmarks(payload) {
    return this.get(this.buildUrl('/reactions/galleries/bookmark', payload));
  }

}

const galleryService = new GalleryService();

/***/ }),

/***/ "./src/services/index.ts":
/*!*******************************!*\
  !*** ./src/services/index.ts ***!
  \*******************************/
/*! exports provided: AuthService, authService, UserService, userService, FeedService, feedService, PerformerService, performerService, ProductService, productService, CommentService, commentService, ReactionService, reactionService, PaymentService, paymentService, UtilsService, utilsService, BannerService, bannerService, EarningService, earningService, CartService, cartService, MessageService, messageService, subscriptionService, OrderService, orderService, SettingService, settingService, PostService, postService, streamService, SearchService, searchService, VideoService, videoService, galleryService, TokenPackageService, tokenPackageService, PhotoService, photoService, TokenTransctionService, tokenTransctionService, payoutRequestService, BlockService, blockService, ReportService, reportService, CookieService, cookieService, ShippingAddressService, shippingAddressService, followService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _auth_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth.service */ "./src/services/auth.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AuthService", function() { return _auth_service__WEBPACK_IMPORTED_MODULE_0__["AuthService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "authService", function() { return _auth_service__WEBPACK_IMPORTED_MODULE_0__["authService"]; });

/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user.service */ "./src/services/user.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserService", function() { return _user_service__WEBPACK_IMPORTED_MODULE_1__["UserService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "userService", function() { return _user_service__WEBPACK_IMPORTED_MODULE_1__["userService"]; });

/* harmony import */ var _feed_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./feed.service */ "./src/services/feed.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FeedService", function() { return _feed_service__WEBPACK_IMPORTED_MODULE_2__["FeedService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "feedService", function() { return _feed_service__WEBPACK_IMPORTED_MODULE_2__["feedService"]; });

/* harmony import */ var _performer_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./performer.service */ "./src/services/performer.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerformerService", function() { return _performer_service__WEBPACK_IMPORTED_MODULE_3__["PerformerService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "performerService", function() { return _performer_service__WEBPACK_IMPORTED_MODULE_3__["performerService"]; });

/* harmony import */ var _product_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./product.service */ "./src/services/product.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProductService", function() { return _product_service__WEBPACK_IMPORTED_MODULE_4__["ProductService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "productService", function() { return _product_service__WEBPACK_IMPORTED_MODULE_4__["productService"]; });

/* harmony import */ var _comment_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./comment.service */ "./src/services/comment.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CommentService", function() { return _comment_service__WEBPACK_IMPORTED_MODULE_5__["CommentService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "commentService", function() { return _comment_service__WEBPACK_IMPORTED_MODULE_5__["commentService"]; });

/* harmony import */ var _reaction_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./reaction.service */ "./src/services/reaction.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReactionService", function() { return _reaction_service__WEBPACK_IMPORTED_MODULE_6__["ReactionService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reactionService", function() { return _reaction_service__WEBPACK_IMPORTED_MODULE_6__["reactionService"]; });

/* harmony import */ var _payment_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./payment.service */ "./src/services/payment.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PaymentService", function() { return _payment_service__WEBPACK_IMPORTED_MODULE_7__["PaymentService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "paymentService", function() { return _payment_service__WEBPACK_IMPORTED_MODULE_7__["paymentService"]; });

/* harmony import */ var _utils_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.service */ "./src/services/utils.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UtilsService", function() { return _utils_service__WEBPACK_IMPORTED_MODULE_8__["UtilsService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "utilsService", function() { return _utils_service__WEBPACK_IMPORTED_MODULE_8__["utilsService"]; });

/* harmony import */ var _banner_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./banner.service */ "./src/services/banner.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BannerService", function() { return _banner_service__WEBPACK_IMPORTED_MODULE_9__["BannerService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bannerService", function() { return _banner_service__WEBPACK_IMPORTED_MODULE_9__["bannerService"]; });

/* harmony import */ var _earning_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./earning.service */ "./src/services/earning.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EarningService", function() { return _earning_service__WEBPACK_IMPORTED_MODULE_10__["EarningService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "earningService", function() { return _earning_service__WEBPACK_IMPORTED_MODULE_10__["earningService"]; });

/* harmony import */ var _cart_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cart.service */ "./src/services/cart.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CartService", function() { return _cart_service__WEBPACK_IMPORTED_MODULE_11__["CartService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cartService", function() { return _cart_service__WEBPACK_IMPORTED_MODULE_11__["cartService"]; });

/* harmony import */ var _message_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./message.service */ "./src/services/message.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MessageService", function() { return _message_service__WEBPACK_IMPORTED_MODULE_12__["MessageService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "messageService", function() { return _message_service__WEBPACK_IMPORTED_MODULE_12__["messageService"]; });

/* harmony import */ var _subscription_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./subscription.service */ "./src/services/subscription.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "subscriptionService", function() { return _subscription_service__WEBPACK_IMPORTED_MODULE_13__["subscriptionService"]; });

/* harmony import */ var _order_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./order.service */ "./src/services/order.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OrderService", function() { return _order_service__WEBPACK_IMPORTED_MODULE_14__["OrderService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "orderService", function() { return _order_service__WEBPACK_IMPORTED_MODULE_14__["orderService"]; });

/* harmony import */ var _setting_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./setting.service */ "./src/services/setting.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SettingService", function() { return _setting_service__WEBPACK_IMPORTED_MODULE_15__["SettingService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "settingService", function() { return _setting_service__WEBPACK_IMPORTED_MODULE_15__["settingService"]; });

/* harmony import */ var _post_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./post.service */ "./src/services/post.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PostService", function() { return _post_service__WEBPACK_IMPORTED_MODULE_16__["PostService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "postService", function() { return _post_service__WEBPACK_IMPORTED_MODULE_16__["postService"]; });

/* harmony import */ var _stream_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./stream.service */ "./src/services/stream.service.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "streamService", function() { return _stream_service__WEBPACK_IMPORTED_MODULE_17__["streamService"]; });

/* harmony import */ var _search_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./search.service */ "./src/services/search.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SearchService", function() { return _search_service__WEBPACK_IMPORTED_MODULE_18__["SearchService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "searchService", function() { return _search_service__WEBPACK_IMPORTED_MODULE_18__["searchService"]; });

/* harmony import */ var _video_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./video.service */ "./src/services/video.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VideoService", function() { return _video_service__WEBPACK_IMPORTED_MODULE_19__["VideoService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "videoService", function() { return _video_service__WEBPACK_IMPORTED_MODULE_19__["videoService"]; });

/* harmony import */ var _gallery_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./gallery.service */ "./src/services/gallery.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "galleryService", function() { return _gallery_service__WEBPACK_IMPORTED_MODULE_20__["galleryService"]; });

/* harmony import */ var _token_package_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./token-package.service */ "./src/services/token-package.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TokenPackageService", function() { return _token_package_service__WEBPACK_IMPORTED_MODULE_21__["TokenPackageService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tokenPackageService", function() { return _token_package_service__WEBPACK_IMPORTED_MODULE_21__["tokenPackageService"]; });

/* harmony import */ var _photo_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./photo.service */ "./src/services/photo.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PhotoService", function() { return _photo_service__WEBPACK_IMPORTED_MODULE_22__["PhotoService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "photoService", function() { return _photo_service__WEBPACK_IMPORTED_MODULE_22__["photoService"]; });

/* harmony import */ var _token_transaction_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./token-transaction.service */ "./src/services/token-transaction.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TokenTransctionService", function() { return _token_transaction_service__WEBPACK_IMPORTED_MODULE_23__["TokenTransctionService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tokenTransctionService", function() { return _token_transaction_service__WEBPACK_IMPORTED_MODULE_23__["tokenTransctionService"]; });

/* harmony import */ var _payout_request_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./payout-request.service */ "./src/services/payout-request.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "payoutRequestService", function() { return _payout_request_service__WEBPACK_IMPORTED_MODULE_24__["payoutRequestService"]; });

/* harmony import */ var _block_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./block.service */ "./src/services/block.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockService", function() { return _block_service__WEBPACK_IMPORTED_MODULE_25__["BlockService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blockService", function() { return _block_service__WEBPACK_IMPORTED_MODULE_25__["blockService"]; });

/* harmony import */ var _report_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./report.service */ "./src/services/report.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReportService", function() { return _report_service__WEBPACK_IMPORTED_MODULE_26__["ReportService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reportService", function() { return _report_service__WEBPACK_IMPORTED_MODULE_26__["reportService"]; });

/* harmony import */ var _cookies_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./cookies.service */ "./src/services/cookies.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CookieService", function() { return _cookies_service__WEBPACK_IMPORTED_MODULE_27__["CookieService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "cookieService", function() { return _cookies_service__WEBPACK_IMPORTED_MODULE_27__["cookieService"]; });

/* harmony import */ var _shipping_address_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./shipping-address.service */ "./src/services/shipping-address.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ShippingAddressService", function() { return _shipping_address_service__WEBPACK_IMPORTED_MODULE_28__["ShippingAddressService"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shippingAddressService", function() { return _shipping_address_service__WEBPACK_IMPORTED_MODULE_28__["shippingAddressService"]; });

/* harmony import */ var _follow_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./follow.service */ "./src/services/follow.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "followService", function() { return _follow_service__WEBPACK_IMPORTED_MODULE_29__["followService"]; });
































/***/ }),

/***/ "./src/services/message.service.ts":
/*!*****************************************!*\
  !*** ./src/services/message.service.ts ***!
  \*****************************************/
/*! exports provided: MessageService, messageService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageService", function() { return MessageService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "messageService", function() { return messageService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./src/services/config.ts");


class MessageService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  getConversations(query) {
    return this.get(this.buildUrl('/conversations', query));
  }

  searchConversations(query) {
    return this.get(this.buildUrl('/conversations/search', query));
  }

  createConversation(data) {
    return this.post('/conversations', data);
  }

  getConversationDetail(id) {
    return this.get(`/conversations/${id}`);
  }

  getMessages(conversationId, query) {
    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));
  }

  sendMessage(conversationId, data) {
    return this.post(`/messages/conversations/${conversationId}`, data);
  }

  countTotalNotRead() {
    return this.get('/messages/counting-not-read-messages');
  }

  readAllInConversation(conversationId) {
    return this.post(`/messages/read-all/${conversationId}`);
  }

  getMessageUploadUrl() {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_1__["getGlobalConfig"])();
    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;
  }

  getConversationByStreamId(streamId) {
    return this.get(`/conversations/stream/${streamId}`);
  }

  getPublicMessages(conversationId, query) {
    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));
  }

  sendStreamMessage(conversationId, data) {
    return this.post(`/messages/stream/conversations/${conversationId}`, data);
  }

  sendPublicStreamMessage(conversationId, data) {
    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);
  }

  findPublicConversationPerformer(performerId) {
    return this.get(`/conversations/stream/public/${performerId}`);
  }

  deleteMessage(id) {
    return this.del(`/messages/${id}`);
  }

  deleteAllMessageInConversation(conversationId) {
    return this.del(`/messages/${conversationId}/remove-all-message`);
  }

  updateConversationName(conversationId, data) {
    return this.put(`/conversations/${conversationId}/update`, data);
  }

}
const messageService = new MessageService();

/***/ }),

/***/ "./src/services/order.service.ts":
/*!***************************************!*\
  !*** ./src/services/order.service.ts ***!
  \***************************************/
/*! exports provided: OrderService, orderService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderService", function() { return OrderService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orderService", function() { return orderService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class OrderService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  performerSearch(payload) {
    return this.get(this.buildUrl('/orders/search', payload));
  }

  userSearch(payload) {
    return this.get(this.buildUrl('/orders/users/search', payload));
  }

  findById(id) {
    return this.get(`/orders/${id}`);
  }

  update(id, data) {
    return this.put(`/orders/${id}/update`, data);
  }

  updateDeliveryAddress(id, data) {
    return this.put(`/orders/${id}/update/delivery-address`, data);
  }

  getDownloadLinkDigital(productId) {
    return this.get(`/user/performer-assets/products/${productId}/download-link`);
  }

}
const orderService = new OrderService();

/***/ }),

/***/ "./src/services/payment.service.ts":
/*!*****************************************!*\
  !*** ./src/services/payment.service.ts ***!
  \*****************************************/
/*! exports provided: PaymentService, paymentService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentService", function() { return PaymentService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "paymentService", function() { return paymentService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class PaymentService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  subscribePerformer(payload) {
    return this.post('/payment/subscribe/performers', payload);
  }

  userSearch(payload) {
    return this.get(this.buildUrl('/transactions/user/search', payload));
  }

  addFunds(payload) {
    return this.post('/payment/wallet/top-up', payload);
  }

  applyCoupon(code) {
    return this.post(`/coupons/${code}/apply-coupon`);
  }

  connectStripeAccount() {
    return this.post('/stripe/accounts');
  }

  getStripeCards() {
    return this.get('/stripe/user/cards');
  }

  addStripeCard(payload) {
    return this.post('/stripe/user/cards', payload);
  }

  removeStripeCard(id) {
    return this.del(`/stripe/user/cards/${id}`);
  }

  retrieveStripeAccount() {
    return this.get('/stripe/accounts/me');
  }

  loginLink() {
    return this.get('/stripe/accounts/me/login-link');
  }

}
const paymentService = new PaymentService();

/***/ }),

/***/ "./src/services/payout-request.service.ts":
/*!************************************************!*\
  !*** ./src/services/payout-request.service.ts ***!
  \************************************************/
/*! exports provided: payoutRequestService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "payoutRequestService", function() { return payoutRequestService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");


class PayoutRequestService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  calculate() {
    return this.post('/payout-requests/performer/calculate');
  }

  search(query) {
    return this.get(this.buildUrl('/payout-requests/performer/search', query));
  }

  create(body) {
    return this.post('/payout-requests/performer', body);
  }

  update(id, body) {
    return this.put(`/payout-requests/performer/${id}`, body);
  }

  detail(id, headers) {
    return this.get(`/payout-requests/performer/${id}/view`, headers);
  }

}

const payoutRequestService = new PayoutRequestService();

/***/ }),

/***/ "./src/services/performer.service.ts":
/*!*******************************************!*\
  !*** ./src/services/performer.service.ts ***!
  \*******************************************/
/*! exports provided: PerformerService, performerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformerService", function() { return PerformerService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "performerService", function() { return performerService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./src/services/config.ts");


class PerformerService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/performers/user/search', query));
  }

  randomSearch(query) {
    return this.get(this.buildUrl('/performers/search/random', query));
  }

  me(headers) {
    return this.get('/performers/me', headers);
  }

  findOne(id, headers) {
    return this.get(`/performers/${id}`, headers);
  }

  getAvatarUploadUrl() {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_1__["getGlobalConfig"])();
    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/avatar/upload`;
  }

  getCoverUploadUrl() {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_1__["getGlobalConfig"])();
    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/cover/upload`;
  }

  getVideoUploadUrl() {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_1__["getGlobalConfig"])();
    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/welcome-video/upload`;
  }

  getDocumentUploadUrl() {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_1__["getGlobalConfig"])();
    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/documents/upload`;
  }

  updateMe(id, payload) {
    return this.put(`/performers/${id}`, payload);
  }

  getTopPerformer(query) {
    return this.get(this.buildUrl('/performers/top', query));
  }

  updateBanking(id, payload) {
    return this.put(`/performers/${id}/banking-settings`, payload);
  }

  updatePaymentGateway(id, payload) {
    return this.put(`/performers/${id}/payment-gateway-settings`, payload);
  }

  getBookmarked(payload) {
    return this.get(this.buildUrl('/reactions/performers/bookmark', payload));
  }

  uploadDocuments(documents, onProgress) {
    return this.upload('/performers/documents/upload', documents, {
      onProgress
    });
  }

}
const performerService = new PerformerService();

/***/ }),

/***/ "./src/services/photo.service.ts":
/*!***************************************!*\
  !*** ./src/services/photo.service.ts ***!
  \***************************************/
/*! exports provided: PhotoService, photoService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhotoService", function() { return PhotoService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "photoService", function() { return photoService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class PhotoService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  searchByUser(query) {
    const {
      performerId
    } = query;
    return this.get(this.buildUrl(`/user/performer-assets/photos/${performerId}`, query));
  }

  searchByPerformer(query) {
    return this.get(this.buildUrl('/performer/performer-assets/photos/search', query));
  }

  update(id, payload) {
    return this.put(`/performer/performer-assets/photos/${id}`, payload);
  }

  setCoverGallery(id) {
    return this.post(`/performer/performer-assets/photos/set-cover/${id}`);
  }

  delete(id) {
    return this.del(`/performer/performer-assets/photos/${id}`);
  }

  uploadImages(file, payload, onProgress) {
    return this.upload('/performer/performer-assets/photos/upload', [{
      fieldname: 'photo',
      file
    }], {
      onProgress,
      customData: payload
    });
  }

  searchPhotosInGallery(payload) {
    return this.get(this.buildUrl('/performer/performer-assets/photos/search', payload));
  }

  userSearch(payload) {
    return this.get(this.buildUrl('/user/performer-assets/photos', payload));
  }

}
const photoService = new PhotoService();

/***/ }),

/***/ "./src/services/post.service.ts":
/*!**************************************!*\
  !*** ./src/services/post.service.ts ***!
  \**************************************/
/*! exports provided: PostService, postService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PostService", function() { return PostService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "postService", function() { return postService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class PostService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/posts/search', query));
  }

  findById(id) {
    return this.get(`/posts/${id}`);
  }

}
const postService = new PostService();

/***/ }),

/***/ "./src/services/product.service.ts":
/*!*****************************************!*\
  !*** ./src/services/product.service.ts ***!
  \*****************************************/
/*! exports provided: ProductService, productService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProductService", function() { return ProductService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "productService", function() { return productService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class ProductService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  createProduct(files, payload, onProgress) {
    return this.upload('/performer/performer-assets/products', files, {
      onProgress,
      customData: payload
    });
  }

  update(id, files, payload, onProgress) {
    return this.upload(`/performer/performer-assets/products/${id}`, files, {
      onProgress,
      customData: payload,
      method: 'PUT'
    });
  }

  search(query) {
    return this.get(this.buildUrl('/performer/performer-assets/products/search', query));
  }

  userSearch(query) {
    return this.get(this.buildUrl('/user/performer-assets/products/search', query));
  }

  userView(productId, headers) {
    return this.get(`/user/performer-assets/products/${productId}`, headers);
  }

  findById(id) {
    return this.get(`/performer/performer-assets/products/${id}/view`);
  }

  delete(id) {
    return this.del(`/performer/performer-assets/products/${id}`);
  }

  getBookmarked(payload) {
    return this.get(this.buildUrl('/reactions/products/bookmark', payload));
  }

}
const productService = new ProductService();

/***/ }),

/***/ "./src/services/reaction.service.ts":
/*!******************************************!*\
  !*** ./src/services/reaction.service.ts ***!
  \******************************************/
/*! exports provided: ReactionService, reactionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReactionService", function() { return ReactionService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reactionService", function() { return reactionService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class ReactionService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  create(payload) {
    return this.post('/reactions', payload);
  }

  delete(payload) {
    return this.del('/reactions', payload);
  }

  search(query) {
    return this.get(this.buildUrl('/reactions/search', query));
  }

}
const reactionService = new ReactionService();

/***/ }),

/***/ "./src/services/report.service.ts":
/*!****************************************!*\
  !*** ./src/services/report.service.ts ***!
  \****************************************/
/*! exports provided: ReportService, reportService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportService", function() { return ReportService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reportService", function() { return reportService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class ReportService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  create(payload) {
    return this.post('/reports', payload);
  }

}
const reportService = new ReportService();

/***/ }),

/***/ "./src/services/search.service.ts":
/*!****************************************!*\
  !*** ./src/services/search.service.ts ***!
  \****************************************/
/*! exports provided: SearchService, searchService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchService", function() { return SearchService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "searchService", function() { return searchService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class SearchService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  searchByKeyword(payload) {
    return this.post('/search/keywords', payload);
  }

  listByKeyword(query) {
    return this.get(this.buildUrl('/search/list/keywords', query));
  }

}
const searchService = new SearchService();

/***/ }),

/***/ "./src/services/setting.service.ts":
/*!*****************************************!*\
  !*** ./src/services/setting.service.ts ***!
  \*****************************************/
/*! exports provided: SettingService, settingService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettingService", function() { return SettingService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "settingService", function() { return settingService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


class SettingService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_settings", {});
  }

  async all(group = '', forceReload = false) {
    const settingGroup = group || 'all';

    if (this._settings[settingGroup] && !forceReload) {
      return this._settings[settingGroup];
    }

    const resp = await this.get(this.buildUrl('/settings/public', {
      group
    }));
    this._settings[settingGroup] = resp;
    return resp;
  }

  contact(data) {
    return this.post('/contact', data);
  }

}
const settingService = new SettingService();

/***/ }),

/***/ "./src/services/shipping-address.service.ts":
/*!**************************************************!*\
  !*** ./src/services/shipping-address.service.ts ***!
  \**************************************************/
/*! exports provided: ShippingAddressService, shippingAddressService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShippingAddressService", function() { return ShippingAddressService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shippingAddressService", function() { return shippingAddressService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class ShippingAddressService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  create(payload) {
    return this.post('/addresses/create', payload);
  }

  update(id, payload) {
    return this.upload(`/addresses/${id}`, payload);
  }

  search(query) {
    return this.get(this.buildUrl('/addresses/search', query));
  }

  delete(id) {
    return this.del(`/addresses/${id}`);
  }

}
const shippingAddressService = new ShippingAddressService();

/***/ }),

/***/ "./src/services/stream.service.tsx":
/*!*****************************************!*\
  !*** ./src/services/stream.service.tsx ***!
  \*****************************************/
/*! exports provided: streamService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "streamService", function() { return streamService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");


class StreamService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  updateStreamInfo(payload) {
    return this.put('/streaming/update', payload);
  }

  updateStreamDuration(payload) {
    return this.put('/streaming/set-duration', payload);
  }

  goLive(data) {
    return this.post('/streaming/live', data);
  }

  editLive(id, data) {
    return this.put(`/streaming/live/${id}`, data);
  }

  joinPublicChat(performerId, headers) {
    return this.post(`/streaming/join/${performerId}`, headers);
  }

  fetchAgoraAppToken(data) {
    return this.post('/streaming/agora/token', data);
  }

  search(query) {
    return this.get(this.buildUrl('/streaming/user/search', query));
  }

}

const streamService = new StreamService();

/***/ }),

/***/ "./src/services/subscription.service.ts":
/*!**********************************************!*\
  !*** ./src/services/subscription.service.ts ***!
  \**********************************************/
/*! exports provided: subscriptionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscriptionService", function() { return subscriptionService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");


class SubscriptionService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/subscriptions/performer/search', query));
  }

  userSearch(query) {
    return this.get(this.buildUrl('/subscriptions/user/search', query));
  }

  cancelSubscription(id, gateway) {
    return this.post(`/payment/${gateway}/cancel-subscription/${id}`);
  }

}

const subscriptionService = new SubscriptionService();

/***/ }),

/***/ "./src/services/token-package.service.ts":
/*!***********************************************!*\
  !*** ./src/services/token-package.service.ts ***!
  \***********************************************/
/*! exports provided: TokenPackageService, tokenPackageService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenPackageService", function() { return TokenPackageService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenPackageService", function() { return tokenPackageService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");
/* eslint-disable linebreak-style */

/* eslint-disable indent */

class TokenPackageService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/package/token/search', query));
  }

}
const tokenPackageService = new TokenPackageService();

/***/ }),

/***/ "./src/services/token-transaction.service.ts":
/*!***************************************************!*\
  !*** ./src/services/token-transaction.service.ts ***!
  \***************************************************/
/*! exports provided: TokenTransctionService, tokenTransctionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenTransctionService", function() { return TokenTransctionService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenTransctionService", function() { return tokenTransctionService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class TokenTransctionService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  sendTip(performerId, payload) {
    return this.post(`/wallet/charges/tip/${performerId}`, payload);
  }

  purchaseFeed(id, payload) {
    return this.post(`/wallet/charges/feed/${id}`, payload);
  }

  purchaseProduct(id, payload) {
    return this.post(`/wallet/charges/product/${id}`, payload);
  }

  purchaseVideo(id, payload) {
    return this.post(`/wallet/charges/video/${id}`, payload);
  }

  purchaseGallery(id, payload) {
    return this.post(`/wallet/charges/gallery/${id}`, payload);
  }

  purchaseMessage(id, payload) {
    return this.post(`/wallet/charges/message/${id}`, payload);
  }

  purchaseStream(id) {
    return this.post(`/wallet/charges/stream/${id}`);
  }

  userSearch(query) {
    return this.get(this.buildUrl('/wallet/charges/user/search', query));
  }

}
const tokenTransctionService = new TokenTransctionService();

/***/ }),

/***/ "./src/services/user.service.ts":
/*!**************************************!*\
  !*** ./src/services/user.service.ts ***!
  \**************************************/
/*! exports provided: UserService, userService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserService", function() { return UserService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "userService", function() { return userService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./src/services/config.ts");


class UserService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  me(headers) {
    return this.get('/users/me', headers);
  }

  updateMe(payload) {
    return this.put('/users', payload);
  }

  getAvatarUploadUrl(userId) {
    const config = Object(_config__WEBPACK_IMPORTED_MODULE_1__["getGlobalConfig"])();

    if (userId) {
      return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/${userId}/avatar/upload`;
    }

    return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;
  }

  search(query) {
    return this.get(this.buildUrl('/users/search', query));
  }

  findById(id) {
    return this.get(`/users/view/${id}`);
  }

}
const userService = new UserService();

/***/ }),

/***/ "./src/services/utils.service.ts":
/*!***************************************!*\
  !*** ./src/services/utils.service.ts ***!
  \***************************************/
/*! exports provided: UtilsService, utilsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UtilsService", function() { return UtilsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utilsService", function() { return utilsService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


class UtilsService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_countries", []);
  }

  async countriesList() {
    if (this._countries.length) {
      return this._countries;
    }

    const resp = await this.get('/countries/list');
    this._countries = resp;
    return resp;
  }

  async statesList(countryCode) {
    return this.get(`/states/${countryCode}`);
  }

  async citiesList(countryCode, state) {
    return this.get(`/cities/${countryCode}/${state}`);
  }

  languagesList() {
    return this.get('/languages/list');
  }

  phoneCodesList() {
    return this.get('/phone-codes/list');
  }

  bodyInfo() {
    return this.get('/user-additional');
  }

  verifyRecaptcha(token) {
    return this.post('/re-captcha/verify', {
      token
    });
  }

}
const utilsService = new UtilsService();

/***/ }),

/***/ "./src/services/video.service.ts":
/*!***************************************!*\
  !*** ./src/services/video.service.ts ***!
  \***************************************/
/*! exports provided: VideoService, videoService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoService", function() { return VideoService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "videoService", function() { return videoService; });
/* harmony import */ var _api_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api-request */ "./src/services/api-request.ts");

class VideoService extends _api_request__WEBPACK_IMPORTED_MODULE_0__["APIRequest"] {
  search(query) {
    return this.get(this.buildUrl('/performer/performer-assets/videos/search', query));
  }

  userSearch(query) {
    return this.get(this.buildUrl('/user/performer-assets/videos/search', query));
  }

  delete(id) {
    return this.del(`/performer/performer-assets/videos/${id}`);
  }

  findById(id, headers) {
    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);
  }

  findOne(id, headers) {
    return this.get(`/user/performer-assets/videos/${id}`, headers);
  }

  update(id, files, payload, onProgress) {
    return this.upload(`/performer/performer-assets/videos/edit/${id}`, files, {
      onProgress,
      customData: payload,
      method: 'PUT'
    });
  }

  deleteFile(id, type) {
    return this.del(`/performer/performer-assets/videos/remove-file/${id}`, {
      type
    });
  }

  uploadVideo(files, payload, onProgress) {
    return this.upload('/performer/performer-assets/videos/upload', files, {
      onProgress,
      customData: payload
    });
  }

  getBookmarks(payload) {
    return this.get(this.buildUrl('/reactions/videos/bookmark', payload));
  }

}
const videoService = new VideoService();

/***/ }),

/***/ "@ant-design/icons":
/*!************************************!*\
  !*** external "@ant-design/icons" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@ant-design/icons");

/***/ }),

/***/ "antd":
/*!***********************!*\
  !*** external "antd" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("antd");

/***/ }),

/***/ "antd-img-crop":
/*!********************************!*\
  !*** external "antd-img-crop" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("antd-img-crop");

/***/ }),

/***/ "emoji-mart":
/*!*****************************!*\
  !*** external "emoji-mart" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("emoji-mart");

/***/ }),

/***/ "isomorphic-unfetch":
/*!*************************************!*\
  !*** external "isomorphic-unfetch" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("isomorphic-unfetch");

/***/ }),

/***/ "js-cookie":
/*!****************************!*\
  !*** external "js-cookie" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("js-cookie");

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("moment");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/router");

/***/ }),

/***/ "path-to-regexp":
/*!*********************************!*\
  !*** external "path-to-regexp" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path-to-regexp");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-device-detect":
/*!**************************************!*\
  !*** external "react-device-detect" ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-device-detect");

/***/ }),

/***/ "react-google-recaptcha":
/*!*****************************************!*\
  !*** external "react-google-recaptcha" ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-google-recaptcha");

/***/ }),

/***/ "react-infinite-scroll-component":
/*!**************************************************!*\
  !*** external "react-infinite-scroll-component" ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-infinite-scroll-component");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-is");

/***/ }),

/***/ "react-moment-countdown":
/*!*****************************************!*\
  !*** external "react-moment-countdown" ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-moment-countdown");

/***/ }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-redux");

/***/ }),

/***/ "react-share":
/*!******************************!*\
  !*** external "react-share" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-share");

/***/ }),

/***/ "redux-actions":
/*!********************************!*\
  !*** external "redux-actions" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-actions");

/***/ }),

/***/ "redux-saga/effects":
/*!*************************************!*\
  !*** external "redux-saga/effects" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),

/***/ "reselect":
/*!***************************!*\
  !*** external "reselect" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("reselect");

/***/ }),

/***/ "video.js":
/*!***************************!*\
  !*** external "video.js" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("video.js");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,